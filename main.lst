 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 11/17/2024 22:22:48


       1/       0 :                     ; =============================================================
       2/       0 :                     ;
       3/       0 :                     ; Windows 9X - Mega Drive Edition
       4/       0 :                     ; Written by Filter
       5/       0 :                     ;
       6/       0 :                     ; =============================================================
       7/       0 :                     
       8/       0 :                     	include	"constants.asm"
(1)    1/       0 :                     ; ---------------------------------------------------------------------------
(1)    2/       0 :                     ; Constants
(1)    3/       0 :                     ; ---------------------------------------------------------------------------
(1)    4/       0 :                     
(1)    5/       0 :                     ; VDP addressses
(1)    6/       0 : =$C00000             vdp_data_port:		equ $C00000
(1)    7/       0 : =$C00004             vdp_control_port:	equ $C00004
(1)    8/       0 : =$C00008             vdp_counter:		equ $C00008
(1)    9/       0 :                     
(1)   10/       0 : =$C00011             psg_input:		equ $C00011
(1)   11/       0 :                     
(1)   12/       0 :                     ; Z80 addresses
(1)   13/       0 : =$A00000             z80_ram:		equ $A00000	; start of Z80 RAM
(1)   14/       0 : =$A02000             z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
(1)   15/       0 : =$A10001             z80_version:		equ $A10001
(1)   16/       0 : =$A10002             z80_port_1_data:	equ $A10002
(1)   17/       0 : =$A10008             z80_port_1_control:	equ $A10008
(1)   18/       0 : =$A1000A             z80_port_2_control:	equ $A1000A
(1)   19/       0 : =$A1000C             z80_expansion_control:	equ $A1000C
(1)   20/       0 : =$A11100             z80_bus_request:	equ $A11100
(1)   21/       0 : =$A11200             z80_reset:		equ $A11200
(1)   22/       0 : =$A04000             ym2612_a0:		equ $A04000
(1)   23/       0 : =$A04001             ym2612_d0:		equ $A04001
(1)   24/       0 : =$A04002             ym2612_a1:		equ $A04002
(1)   25/       0 : =$A04003             ym2612_d1:		equ $A04003
(1)   26/       0 :                     
(1)   27/       0 : =$A130F1             sram_port:		equ $A130F1
(1)   28/       0 :                     
(1)   29/       0 : =$A14000             security_addr:		equ $A14000
(1)   30/       0 :                     
(1)   31/       0 : =$A10009             IoCtrl1:		equ $A10009	; 1P control port
(1)   32/       0 : =$A1000B             IoCtrl2:		equ $A1000B	; 2P control port
(1)   33/       0 : =$A10003             IoData1:		equ $A10003	; 1P data port
(1)   34/       0 : =$A10005             IoData2:		equ $A10005	; 2P data port
(1)   35/       0 :                     
(1)   36/       0 :                     ; VRAM data
(1)   37/       0 : =$C000               vram_fg:	equ $C000	; foreground namespace
(1)   38/       0 : =$E000               vram_bg:	equ $E000	; background namespace
(1)   39/       0 : =$F800               vram_sprites:	equ $F800	; sprite table
(1)   40/       0 : =$FC00               vram_hscroll:	equ $FC00	; horizontal scroll table
(1)   41/       0 :                     
(1)   42/       0 :                     ; Colours
(1)   43/       0 : =$0                  cBlack:		equ $000		; colour black
(1)   44/       0 : =$EEE                cWhite:		equ $EEE		; colour white
(1)   45/       0 : =$E00                cBlue:		equ $E00		; colour blue
(1)   46/       0 : =$E0                 cGreen:		equ $0E0		; colour green
(1)   47/       0 : =$E                  cRed:		equ $00E		; colour red
(1)   48/       0 : =$EE                 cYellow:	equ cGreen+cRed		; colour yellow
(1)   49/       0 : =$EE0                cAqua:		equ cGreen+cBlue	; colour aqua
(1)   50/       0 : =$E0E                cMagenta:	equ cBlue+cRed		; colour magenta
       9/       0 :                     	include	"macros.asm"
(1)    1/       0 :                     ; ---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 212] - Source File main.asm(macros.asm) - Page 2 - 11/17/2024 22:22:48


(1)    2/       0 :                     ; stop the Z80
(1)    3/       0 :                     ; ---------------------------------------------------------------------------
(1)    4/       0 :                     
(1)    5/       0 :                     stopZ80:	macro
(1)    6/       0 :                     		move.w	#$100,(z80_bus_request).l
(1)    7/       0 :                     .wait:		beq.s	.wait
(1)    8/       0 :                     		endm
(1)    9/       0 :                     
(1)   10/       0 :                     ; ---------------------------------------------------------------------------
(1)   11/       0 :                     ; reset the Z80
(1)   12/       0 :                     ; ---------------------------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     resetZ80:	macro
(1)   15/       0 :                     		move.w	#$100,(z80_reset).l
(1)   16/       0 :                     		endm
(1)   17/       0 :                     
(1)   18/       0 :                     resetZ80a:	macro
(1)   19/       0 :                     		move.w	#0,(z80_reset).l
(1)   20/       0 :                     		endm
(1)   21/       0 :                     
(1)   22/       0 :                     ; ---------------------------------------------------------------------------
(1)   23/       0 :                     ; start the Z80
(1)   24/       0 :                     ; ---------------------------------------------------------------------------
(1)   25/       0 :                     
(1)   26/       0 :                     startZ80:	macro
(1)   27/       0 :                     		move.w	#0,(z80_bus_request).l
(1)   28/       0 :                     		endm
(1)   29/       0 :                     
(1)   30/       0 :                     ; ---------------------------------------------------------------------------
(1)   31/       0 :                     ; disable interrupts
(1)   32/       0 :                     ; ---------------------------------------------------------------------------
(1)   33/       0 :                     
(1)   34/       0 :                     disable_ints:	macro
(1)   35/       0 :                     		move	#$2700,sr
(1)   36/       0 :                     		endm
(1)   37/       0 :                     
(1)   38/       0 :                     ; ---------------------------------------------------------------------------
(1)   39/       0 :                     ; enable interrupts
(1)   40/       0 :                     ; ---------------------------------------------------------------------------
(1)   41/       0 :                     
(1)   42/       0 :                     enable_ints:	macro
(1)   43/       0 :                     		move	#$2300,sr
(1)   44/       0 :                     		endm
      10/       0 :                     	include	"macrosetup.asm"
(1)    1/       0 :                     	padding off					; we don't want AS padding out dc.b instructions
(1)    2/       0 :                     	listing purecode				; Want listing file, but only the final code in expanded macros
(1)    3/       0 :                     	page	0					; Don't want form feeds
(1)    4/       0 :                     	supmode on					; we don't need warnings about privileged instructions
(1)    5/       0 :                     
(1)    6/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)    7/       0 :                     
(1)    8/       0 :                     ; make org safer (impossible to overwrite previously assembled bytes)
(1)    9/       0 :                     ; and also make it work in Z80 code without creating a new segment
(1)   10/       0 :                     org macro address
(1)   11/       0 :                     	if notZ80(MOMCPU)
(1)   12/       0 :                     		if address < *
(1)   13/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   14/       0 :                     		else
(1)   15/       0 :                     			!org address
(1)   16/       0 :                     		endif
(1)   17/       0 :                     	else
(1)   18/       0 :                     		if address < $
(1)   19/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   20/       0 :                     		else
(1)   21/       0 :                     			while address > $
(1)   22/       0 :                     				db 0
(1)   23/       0 :                     			endm
(1)   24/       0 :                     		endif
(1)   25/       0 :                     	endif
(1)   26/       0 :                         endm
(1)   27/       0 :                     
(1)   28/       0 :                     ; define an alternate org that fills the extra space with 0s instead of FFs
(1)   29/       0 :                     org0 macro address
(1)   30/       0 :                     .diff := address - *
(1)   31/       0 :                     	if .diff < 0
(1)   32/       0 :                     		error "too much stuff before org0 $\{address} ($\{(-diff)} bytes)"
(1)   33/       0 :                     	else
(1)   34/       0 :                     		while .diff > 1024
(1)   35/       0 :                     							; AS can only generate 1 kb of code on a single line
(1)   36/       0 :                     			dc.b [1024]0
(1)   37/       0 :                     .diff := .diff - 1024
(1)   38/       0 :                     		endm
(1)   39/       0 :                     		dc.b [.diff]0
(1)   40/       0 :                     	endif
(1)   41/       0 :                         endm
(1)   42/       0 :                     
(1)   43/       0 :                     ; define the cnop pseudo-instruction
(1)   44/       0 :                     cnop macro offset,alignment
(1)   45/       0 :                     	if notZ80(MOMCPU)
(1)   46/       0 :                     		org (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   47/       0 :                     	else
(1)   48/       0 :                     		org ($-1+(alignment)-(($-1+(-(offset)))#(alignment)))
(1)   49/       0 :                     	endif
(1)   50/       0 :                         endm
(1)   51/       0 :                     
(1)   52/       0 :                     ; define an alternate cnop that fills the extra space with 0s instead of FFs
(1)   53/       0 :                     cnop0 macro offset,alignment
(1)   54/       0 :                     	org0 (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   55/       0 :                         endm
(1)   56/       0 :                     
(1)   57/       0 :                     ; redefine align in terms of cnop, because the built-in align can be stupid sometimes
(1)   58/       0 :                     align macro alignment
(1)   59/       0 :                     	cnop 0,alignment
(1)   60/       0 :                         endm
(1)   61/       0 :                     
(1)   62/       0 :                     ; define an alternate align that fills the extra space with 0s instead of FFs
(1)   63/       0 :                     align0 macro alignment
(1)   64/       0 :                     	cnop0 0,alignment
(1)   65/       0 :                         endm
(1)   66/       0 :                     
(1)   67/       0 :                     ; define the even pseudo-instruction
(1)   68/       0 :                     even macro
(1)   69/       0 :                     	if notZ80(MOMCPU)
(1)   70/       0 :                     		if (*)&1
(1)   71/       0 :                     			dc.b 0				;ds.b 1 
(1)   72/       0 :                     		endif
(1)   73/       0 :                     	else
(1)   74/       0 :                     		if ($)&1
(1)   75/       0 :                     			db 0
(1)   76/       0 :                     		endif
(1)   77/       0 :                     	endif
(1)   78/       0 :                         endm
(1)   79/       0 :                     
(1)   80/       0 :                     ; make ds work in Z80 code without creating a new segment
(1)   81/       0 :                     ds macro
(1)   82/       0 :                     	if notZ80(MOMCPU)
(1)   83/       0 :                     		!ds.ATTRIBUTE ALLARGS
(1)   84/       0 :                     	else
(1)   85/       0 :                     		rept ALLARGS
(1)   86/       0 :                     			db 0
(1)   87/       0 :                     		endm
(1)   88/       0 :                     	endif
(1)   89/       0 :                        endm
(1)   90/       0 :                     
(1)   91/       0 :                     ; define a trace macro
(1)   92/       0 :                     ; lets you easily check what address a location in this disassembly assembles to
(1)   93/       0 :                     trace macro optionalMessageWithoutQuotes
(1)   94/       0 :                     	if MOMPASS=1
(1)   95/       0 :                     		if ("ALLARGS"<>"")
(1)   96/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF} msg=ALLARGS"
(1)   97/       0 :                     		else
(1)   98/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF}"
(1)   99/       0 :                     		endif
(1)  100/       0 :                     tracenum := (tracenum+1)
(1)  101/       0 :                     	endif
(1)  102/       0 :                        endm
(1)  103/       0 : =$0                  tracenum := 0
(1)  104/       0 :                     
(1)  105/       0 :                     bit function nBits,1<<(nBits-1)
(1)  106/       0 :                     signmask function val,nBits,-((-(val&bit(nBits)))&bit(nBits))
(1)  107/       0 :                     signextend function val,nBits,(val+signmask(val,nBits))!signmask(val,nBits)
(1)  108/       0 :                     signextendB function val,signextend(val,8)
      11/       0 :                     	include	"ram/main.asm"
(1)    1/       0 :                     
(1)    2/       0 :                     
(1)    3/FFFFFFFFFFFF0000 :                     	phase $FFFF0000
(1)    4/FFFFFFFFFFFF0000 :                     RAM_Start:
(1)    5/FFFFFFFFFFFF0000 : (MACRO)              		ds.b $8000
(1)    5/FFFFFFFFFFFF0000 :                                     !ds.b $8000
(1)    6/FFFFFFFFFFFF8000 : (MACRO)              MouseBuffer:	ds.b 1
(1)    6/FFFFFFFFFFFF8000 :                                     !ds.b 1
(1)    7/FFFFFFFFFFFF8001 : (MACRO)              		ds.b $7DFB
(1)    7/FFFFFFFFFFFF8001 :                                     !ds.b $7DFB
(1)    8/FFFFFFFFFFFFFDFC : (MACRO)              GameMode:	ds.l 1
(1)    8/FFFFFFFFFFFFFDFC :                                     !ds.l 1
(1)    9/FFFFFFFFFFFFFE00 :                     StackRAM:
(1)   10/FFFFFFFFFFFFFE00 : (MACRO)              		ds.b $200
(1)   10/FFFFFFFFFFFFFE00 :                                     !ds.b $200
(1)   11/       0 :                     RAM_End:
(1)   12/   10000 :                     	dephase
(1)   13/       0 :                     	!org 0
      12/       0 :                     	include	"errorhandler/Debugger.asm"
(1)    1/       0 :                     
(1)    2/       0 :                     ; ===============================================================
(1)    3/       0 :                     ; ---------------------------------------------------------------
(1)    4/       0 :                     ; Error handling and debugging modules
(1)    5/       0 :                     ;
(1)    6/       0 :                     ; (c) 2016-2023, Vladikcomper
(1)    7/       0 :                     ; ---------------------------------------------------------------
(1)    8/       0 :                     ; Debugging macros definitions file
(1)    9/       0 :                     ; ---------------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; ---------------------------------------------------------------
(1)   12/       0 :                     ; Debugger customization
(1)   13/       0 :                     ; ---------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 :                     ; Enable debugger extensions
(1)   16/       0 :                     ; Pressing A/B/C on the exception screen can open other debuggers
(1)   17/       0 :                     ; Pressing Start or unmapped button returns to the exception
(1)   18/       0 : =$1                  DEBUGGER__EXTENSIONS__ENABLE:			equ		1		; 0 = OFF, 1 = ON
(1)   19/       0 :                     
(1)   20/       0 :                     ; Debuggers mapped to pressing A/B/C on the exception screen
(1)   21/       0 :                     ; Use 0 to disable button, use debugger's entry point otherwise.
(1)   22/       0 : =$2CEB8              DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER:	equ		Debugger_AddressRegisters	; display address register symbols
(1)   23/       0 : =$2CF04              DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER:	equ		Debugger_Backtrace			; display exception backtrace
(1)   24/       0 : =$0                  DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER:	equ		0		; disabled
(1)   25/       0 :                     
(1)   26/       0 :                     
(1)   27/       0 :                     ; ===============================================================
(1)   28/       0 :                     ; ---------------------------------------------------------------
(1)   29/       0 :                     ; Constants
(1)   30/       0 :                     ; ---------------------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     ; ----------------------------
(1)   33/       0 :                     ; Arguments formatting flags
(1)   34/       0 :                     ; ----------------------------
(1)   35/       0 :                     
(1)   36/       0 :                     ; General arguments format flags
(1)   37/       0 : =$80                 hex		equ		$80				; flag to display as hexadecimal number
(1)   38/       0 : =$90                 dec		equ		$90				; flag to display as decimal number
(1)   39/       0 : =$A0                 bin		equ		$A0				; flag to display as binary number
(1)   40/       0 : =$B0                 sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
(1)   41/       0 : =$C0                 symdisp	equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
(1)   42/       0 : =$D0                 str		equ		$D0				; flag to display as string (treat as offset, insert string from that offset)
(1)   43/       0 :                     
(1)   44/       0 :                     ; NOTES:
(1)   45/       0 :                     ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
(1)   46/       0 :                     ;		In case, you need a different formatting for the displacement part (different text color and such),
(1)   47/       0 :                     ;		use "sym|split", so the displacement won't be displayed until symdisp is met
(1)   48/       0 :                     ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
(1)   49/       0 :                     ;		display a garbage offset.
(1)   50/       0 :                     ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
(1)   51/       0 :                     ;		otherwise, the "symdisp" results are undefined.
(1)   52/       0 :                     ;	* When using "str" flag, the argument should point to string offset that will be inserted.
(1)   53/       0 :                     ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
(1)   54/       0 :                     ;		only console control flags (see below).
(1)   55/       0 :                     
(1)   56/       0 :                     
(1)   57/       0 :                     ; Additional flags ...
(1)   58/       0 :                     ; ... for number formatters (hex, dec, bin)
(1)   59/       0 : =$8                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
(1)   60/       0 :                     
(1)   61/       0 :                     ; ... for symbol formatter (sym)
(1)   62/       0 : =$8                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
(1)   63/       0 : =$4                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
(1)   64/       0 :                     
(1)   65/       0 :                     ; ... for symbol displacement formatter (symdisp)
(1)   66/       0 : =$8                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
(1)   67/       0 :                     
(1)   68/       0 :                     ; Argument type flags:
(1)   69/       0 :                     ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
(1)   70/       0 :                     ; - ONLY USE when writting down strings manually with DC.B
(1)   71/       0 : =$0                  byte	equ		0
(1)   72/       0 : =$1                  word	equ		1
(1)   73/       0 : =$3                  long	equ		3
(1)   74/       0 :                     
(1)   75/       0 :                     ; -----------------------
(1)   76/       0 :                     ; Console control flags
(1)   77/       0 :                     ; -----------------------
(1)   78/       0 :                     
(1)   79/       0 :                     ; Plain control flags: no arguments following
(1)   80/       0 : =$E0                 endl	equ		$E0				; "End of line": flag for line break
(1)   81/       0 : =$E6                 cr		equ		$E6				; "Carriage return": jump to the beginning of the line
(1)   82/       0 : =$E8                 pal0	equ		$E8				; use palette line #0
(1)   83/       0 : =$EA                 pal1	equ		$EA				; use palette line #1
(1)   84/       0 : =$EC                 pal2	equ		$EC				; use palette line #2
(1)   85/       0 : =$EE                 pal3	equ		$EE				; use palette line #3
(1)   86/       0 :                     
(1)   87/       0 :                     ; Parametrized control flags: followed by 1-byte argument
(1)   88/       0 : =$F0                 setw	equ		$F0				; set line width: number of characters before automatic line break
(1)   89/       0 : =$F4                 setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
(1)   90/       0 : =$F8                 setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
(1)   91/       0 : =$FA                 setx	equ		$FA				; set x-position
(1)   92/       0 :                     
(1)   93/       0 :                     
(1)   94/       0 :                     ; ---------------------------------------------------------------
(1)   95/       0 :                     ; Import global functions
(1)   96/       0 :                     ; ---------------------------------------------------------------
(1)   97/       0 :                     
(1)   98/       0 :                     ; Debugger extension functions
(1)   99/       0 : =$2CFA2              __global__ErrorHandler_ConsoleOnly: equ DebuggerExtensions+$0
(1)  100/       0 : =$2CFC8              __global__ErrorHandler_ClearConsole: equ DebuggerExtensions+$26
(1)  101/       0 : =$2CFF2              __global__KDebug_WriteLine_Formatted: equ DebuggerExtensions+$50
(1)  102/       0 : =$2CFF6              __global__KDebug_Write_Formatted: equ DebuggerExtensions+$54
(1)  103/       0 : =$2D04C              __global__KDebug_FlushLine: equ DebuggerExtensions+$AA
(1)  104/       0 : =$2D064              __global__ErrorHandler_PauseConsole: equ DebuggerExtensions+$C2
(1)  105/       0 : =$2D09A              __global__ErrorHandler_PagesController: equ DebuggerExtensions+$F8
(1)  106/       0 : =$2D0FA              __global__VSync: equ DebuggerExtensions+$158
(1)  107/       0 :                     
(1)  108/       0 :                     ; Error handler & core functions
(1)  109/       0 : =$2D140              __global__ErrorHandler: equ ErrorHandler+$0
(1)  110/       0 : =$2D262              __global__Error_IdleLoop: equ ErrorHandler+$122
(1)  111/       0 : =$2D27C              __global__Error_InitConsole: equ ErrorHandler+$13C
(1)  112/       0 : =$2D288              __global__Error_MaskStackBoundaries: equ ErrorHandler+$148
(1)  113/       0 : =$2D2F2              __global__Error_DrawOffsetLocation: equ ErrorHandler+$1B2
(1)  114/       0 : =$2D2F6              __global__Error_DrawOffsetLocation2: equ ErrorHandler+$1B6
(1)  115/       0 : =$2D37C              __global__ErrorHandler_SetupVDP: equ ErrorHandler+$23C
(1)  116/       0 : =$2D3B4              __global__ErrorHandler_VDPConfig: equ ErrorHandler+$274
(1)  117/       0 : =$2D3CA              __global__ErrorHandler_VDPConfig_Nametables: equ ErrorHandler+$28A
(1)  118/       0 : =$2D406              __global__ErrorHandler_ConsoleConfig_Initial: equ ErrorHandler+$2C6
(1)  119/       0 : =$2D40A              __global__ErrorHandler_ConsoleConfig_Shared: equ ErrorHandler+$2CA
(1)  120/       0 : =$2D474              __global__Art1bpp_Font: equ ErrorHandler+$334
(1)  121/       0 : =$2DA38              __global__FormatString: equ ErrorHandler+$8F8
(1)  122/       0 : =$2DB0E              __global__Console_Init: equ ErrorHandler+$9CE
(1)  123/       0 : =$2DB50              __global__Console_Reset: equ ErrorHandler+$A10
(1)  124/       0 : =$2DB52              __global__Console_InitShared: equ ErrorHandler+$A12
(1)  125/       0 : =$2DB8E              __global__Console_SetPosAsXY_Stack: equ ErrorHandler+$A4E
(1)  126/       0 : =$2DB94              __global__Console_SetPosAsXY: equ ErrorHandler+$A54
(1)  127/       0 : =$2DBC2              __global__Console_GetPosAsXY: equ ErrorHandler+$A82
(1)  128/       0 : =$2DBE4              __global__Console_StartNewLine: equ ErrorHandler+$AA4
(1)  129/       0 : =$2DC0C              __global__Console_SetBasePattern: equ ErrorHandler+$ACC
(1)  130/       0 : =$2DC20              __global__Console_SetWidth: equ ErrorHandler+$AE0
(1)  131/       0 : =$2DC36              __global__Console_WriteLine_WithPattern: equ ErrorHandler+$AF6
(1)  132/       0 : =$2DC38              __global__Console_WriteLine: equ ErrorHandler+$AF8
(1)  133/       0 : =$2DC3C              __global__Console_Write: equ ErrorHandler+$AFC
(1)  134/       0 : =$2DCE8              __global__Console_WriteLine_Formatted: equ ErrorHandler+$BA8
(1)  135/       0 : =$2DCEC              __global__Console_Write_Formatted: equ ErrorHandler+$BAC
(1)  136/       0 : =$2DD1C              __global__Decomp1bpp: equ ErrorHandler+$BDC
(1)  137/       0 :                     
(1)  138/       0 :                     ; ---------------------------------------------------------------
(1)  139/       0 :                     ; Macros
(1)  140/       0 :                     ; ---------------------------------------------------------------
(1)  141/       0 :                     
(1)  142/       0 :                     
(1)  143/       0 :                     ; ---------------------------------------------------------------
(1)  144/       0 :                     ; WARNING! This disables automatic padding in order to combine DC.B's correctly
(1)  145/       0 :                     ;	Make sure your code doesn't rely on padding (enabled by default)!
(1)  146/       0 :                     ; ---------------------------------------------------------------
(1)  147/       0 :                     
(1)  148/       0 :                     ; ---------------------------------------------------------------
(1)  149/       0 :                     ; Creates assertions for debugging
(1)  150/       0 :                     ; ---------------------------------------------------------------
(1)  151/       0 :                     ; EXAMPLES:
(1)  152/       0 :                     ;	assert.b	d0, eq, #1		; d0 must be $01, or else crash!
(1)  153/       0 :                     ;	assert.w	d5, eq			; d5 must be $0000!
(1)  154/       0 :                     ;	assert.l	a1, hi, a0		; asert a1 > a0, or else crash!
(1)  155/       0 :                     ;	assert.b	MemFlag, ne		; MemFlag must be non-zero!
(1)  156/       0 :                     ; ---------------------------------------------------------------
(1)  157/       0 :                     
(1)  158/       0 :                     assert	macro	SRC, COND, DEST
(1)  159/       0 :                     	; Assertions only work in DEBUG builds
(1)  160/       0 :                     	ifdef __DEBUG__
(1)  161/       0 :                     		if "DEST"<>""
(1)  162/       0 :                     			cmp.ATTRIBUTE	DEST, SRC
(1)  163/       0 :                     		else
(1)  164/       0 :                     			tst.ATTRIBUTE	SRC
(1)  165/       0 :                     		endif
(1)  166/       0 :                     
(1)  167/       0 :                     		switch lowstring("COND")
(1)  168/       0 :                     		case "eq"
(1)  169/       0 :                     			beq	.skip
(1)  170/       0 :                     		case "ne"
(1)  171/       0 :                     			bne	.skip
(1)  172/       0 :                     		case "cs"
(1)  173/       0 :                     			bcs	.skip
(1)  174/       0 :                     		case "cc"
(1)  175/       0 :                     			bcc	.skip
(1)  176/       0 :                     		case "pl"
(1)  177/       0 :                     			bpl	.skip
(1)  178/       0 :                     		case "mi"
(1)  179/       0 :                     			bmi	.skip
(1)  180/       0 :                     		case "hi"
(1)  181/       0 :                     			bhi	.skip
(1)  182/       0 :                     		case "hs"
(1)  183/       0 :                     			bhs	.skip
(1)  184/       0 :                     		case "ls"
(1)  185/       0 :                     			bls	.skip
(1)  186/       0 :                     		case "lo"
(1)  187/       0 :                     			blo	.skip
(1)  188/       0 :                     		case "gt"
(1)  189/       0 :                     			bgt	.skip
(1)  190/       0 :                     		case "ge"
(1)  191/       0 :                     			bge	.skip
(1)  192/       0 :                     		case "le"
(1)  193/       0 :                     			ble	.skip
(1)  194/       0 :                     		case "lt"
(1)  195/       0 :                     			blt	.skip
(1)  196/       0 :                     		elsecase
(1)  197/       0 :                     			!error "Unknown condition COND"
(1)  198/       0 :                     		endcase
(1)  199/       0 :                     
(1)  200/       0 :                     		RaiseError	"Assertion failed:%<endl>SRC COND DEST"
(1)  201/       0 :                     
(1)  202/       0 :                     	.skip:
(1)  203/       0 :                     	endif
(1)  204/       0 :                         endm
(1)  205/       0 :                     
(1)  206/       0 :                     ; ---------------------------------------------------------------
(1)  207/       0 :                     ; Raises an error with the given message
(1)  208/       0 :                     ; ---------------------------------------------------------------
(1)  209/       0 :                     ; EXAMPLES:
(1)  210/       0 :                     ;	RaiseError	"Something is wrong"
(1)  211/       0 :                     ;	RaiseError	"Your D0 value is BAD: %<.w d0>"
(1)  212/       0 :                     ;	RaiseError	"Module crashed! Extra info:", YourMod_Debugger
(1)  213/       0 :                     ; ---------------------------------------------------------------
(1)  214/       0 :                     
(1)  215/       0 :                     RaiseError	macro	string, consoleprogram, opts
(1)  216/       0 :                     
(1)  217/       0 :                     	pea		*(pc)
(1)  218/       0 :                     	move.w	sr, -(sp)
(1)  219/       0 :                     	__FSTRING_GenerateArgumentsCode string
(1)  220/       0 :                     	jsr		__global__ErrorHandler
(1)  221/       0 :                     	__FSTRING_GenerateDecodedString string
(1)  222/       0 :                     	if ("consoleprogram"<>"")			; if console program offset is specified ...
(1)  223/       0 :                     		.__align_flag:	set	((((*)&1)!1)*_eh_align_offset)
(1)  224/       0 :                     		if "opts"<>""
(1)  225/       0 :                     			dc.b	opts+_eh_enter_console|.__align_flag					; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)  226/       0 :                     		else
(1)  227/       0 :                     			dc.b	_eh_enter_console|.__align_flag						; ''
(1)  228/       0 :                     		endif
(1)  229/       0 :                     		!align	2													; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)  230/       0 :                     		if DEBUGGER__EXTENSIONS__ENABLE
(1)  231/       0 :                     			jsr		consoleprogram										; ... an aligned "jsr" instruction that calls console program itself
(1)  232/       0 :                     			jmp		__global__ErrorHandler_PagesController
(1)  233/       0 :                     		else
(1)  234/       0 :                     			jmp		consoleprogram										; ... an aligned "jmp" instruction that calls console program itself
(1)  235/       0 :                     		endif
(1)  236/       0 :                     	else
(1)  237/       0 :                     		if DEBUGGER__EXTENSIONS__ENABLE
(1)  238/       0 :                     			.__align_flag:	set	((((*)&1)!1)*_eh_align_offset)
(1)  239/       0 :                     			if "opts"<>""
(1)  240/       0 :                     				dc.b	opts+_eh_return|.__align_flag					; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)  241/       0 :                     			else
(1)  242/       0 :                     				dc.b	_eh_return|.__align_flag							; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)  243/       0 :                     			endif
(1)  244/       0 :                     			!align	2													; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)  245/       0 :                     			jmp		__global__ErrorHandler_PagesController
(1)  246/       0 :                     		else
(1)  247/       0 :                     			dc.b	opts+0						; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
(1)  248/       0 :                     			!align	2							; ... in case \opts argument is empty or skipped
(1)  249/       0 :                     		endif
(1)  250/       0 :                     	endif
(1)  251/       0 :                     	!align	2
(1)  252/       0 :                     
(1)  253/       0 :                     	endm
(1)  254/       0 :                     
(1)  255/       0 :                     
(1)  256/       0 :                     ; ---------------------------------------------------------------
(1)  257/       0 :                     ; Console interface
(1)  258/       0 :                     ; ---------------------------------------------------------------
(1)  259/       0 :                     ; EXAMPLES:
(1)  260/       0 :                     ;	Console.Run	YourConsoleProgram
(1)  261/       0 :                     ;	Console.Write "Hello "
(1)  262/       0 :                     ;	Console.WriteLine "...world!"
(1)  263/       0 :                     ;	Console.SetXY #1, #4
(1)  264/       0 :                     ;	Console.WriteLine "Your data is %<.b d0>"
(1)  265/       0 :                     ;	Console.WriteLine "%<pal0>Your code pointer: %<.l a0 sym>"
(1)  266/       0 :                     ; ---------------------------------------------------------------
(1)  267/       0 :                     
(1)  268/       0 :                     Console	macro	argument1, argument2
(1)  269/       0 :                     
(1)  270/       0 :                     	switch lowstring("ATTRIBUTE")
(1)  271/       0 :                     	case "write"
(1)  272/       0 :                     		move.w	sr, -(sp)
(1)  273/       0 :                     		__FSTRING_GenerateArgumentsCode argument1
(1)  274/       0 :                     		movem.l	a0-a2/d7, -(sp)
(1)  275/       0 :                     		lea		4*4(sp), a2
(1)  276/       0 :                     		lea		.__data(pc), a1
(1)  277/       0 :                     		jsr		__global__Console_Write_Formatted
(1)  278/       0 :                     		movem.l	(sp)+, a0-a2/d7
(1)  279/       0 :                     		if (.__sp>8)
(1)  280/       0 :                     			lea		.__sp(sp), sp
(1)  281/       0 :                     		elseif (.__sp>0)
(1)  282/       0 :                     			addq.w	#.__sp, sp
(1)  283/       0 :                     		endif
(1)  284/       0 :                     		move.w	(sp)+, sr
(1)  285/       0 :                     		bra.w	.__leave
(1)  286/       0 :                     	.__data:
(1)  287/       0 :                     		__FSTRING_GenerateDecodedString argument1
(1)  288/       0 :                     		!align	2
(1)  289/       0 :                     	.__leave:
(1)  290/       0 :                     
(1)  291/       0 :                     	case "writeline"
(1)  292/       0 :                     		move.w	sr, -(sp)
(1)  293/       0 :                     		__FSTRING_GenerateArgumentsCode argument1
(1)  294/       0 :                     		movem.l	a0-a2/d7, -(sp)
(1)  295/       0 :                     		lea		4*4(sp), a2
(1)  296/       0 :                     		lea		.__data(pc), a1
(1)  297/       0 :                     		jsr		__global__Console_WriteLine_Formatted
(1)  298/       0 :                     		movem.l	(sp)+, a0-a2/d7
(1)  299/       0 :                     		if (.__sp>8)
(1)  300/       0 :                     			lea		.__sp(sp), sp
(1)  301/       0 :                     		elseif (.__sp>0)
(1)  302/       0 :                     			addq.w	#.__sp, sp
(1)  303/       0 :                     		endif
(1)  304/       0 :                     		move.w	(sp)+, sr
(1)  305/       0 :                     		bra.w	.__leave
(1)  306/       0 :                     	.__data:
(1)  307/       0 :                     		__FSTRING_GenerateDecodedString argument1
(1)  308/       0 :                     		!align	2
(1)  309/       0 :                     	.__leave:
(1)  310/       0 :                     
(1)  311/       0 :                     	case "run"
(1)  312/       0 :                     		jsr		__global__ErrorHandler_ConsoleOnly
(1)  313/       0 :                     		jsr		argument1
(1)  314/       0 :                     		bra.s	*
(1)  315/       0 :                     
(1)  316/       0 :                     	case "clear"
(1)  317/       0 :                     		move.w	sr, -(sp)
(1)  318/       0 :                     		jsr		__global__ErrorHandler_ClearConsole
(1)  319/       0 :                     		move.w	(sp)+, sr
(1)  320/       0 :                     
(1)  321/       0 :                     	case "pause"
(1)  322/       0 :                     		move.w	sr, -(sp)
(1)  323/       0 :                     		jsr		__global__ErrorHandler_PauseConsole
(1)  324/       0 :                     		move.w	(sp)+, sr
(1)  325/       0 :                     
(1)  326/       0 :                     	case "sleep"
(1)  327/       0 :                     		move.w	sr, -(sp)
(1)  328/       0 :                     		move.w	d0, -(sp)
(1)  329/       0 :                     		move.l	a0, -(sp)
(1)  330/       0 :                     		move.w	argument1, d0
(1)  331/       0 :                     		subq.w	#1, d0
(1)  332/       0 :                     		bcs.s	.__sleep_done
(1)  333/       0 :                     		.__sleep_loop:
(1)  334/       0 :                     			jsr		__global__VSync
(1)  335/       0 :                     			dbf		d0, .__sleep_loop
(1)  336/       0 :                     
(1)  337/       0 :                     	.__sleep_done:
(1)  338/       0 :                     		move.l	(sp)+, a0
(1)  339/       0 :                     		move.w	(sp)+, d0
(1)  340/       0 :                     		move.w	(sp)+, sr
(1)  341/       0 :                     
(1)  342/       0 :                     	case "setxy"
(1)  343/       0 :                     		move.w	sr, -(sp)
(1)  344/       0 :                     		movem.l	d0-d1, -(sp)
(1)  345/       0 :                     		move.w	argument2, -(sp)
(1)  346/       0 :                     		move.w	argument1, -(sp)
(1)  347/       0 :                     		jsr		__global__Console_SetPosAsXY_Stack
(1)  348/       0 :                     		addq.w	#4, sp
(1)  349/       0 :                     		movem.l	(sp)+, d0-d1
(1)  350/       0 :                     		move.w	(sp)+, sr
(1)  351/       0 :                     
(1)  352/       0 :                     	case "breakline"
(1)  353/       0 :                     		move.w	sr, -(sp)
(1)  354/       0 :                     		jsr		__global__Console_StartNewLine
(1)  355/       0 :                     		move.w	(sp)+, sr
(1)  356/       0 :                     
(1)  357/       0 :                     	elsecase
(1)  358/       0 :                     		!error	"ATTRIBUTE isn't a member of Console"
(1)  359/       0 :                     
(1)  360/       0 :                     	endcase
(1)  361/       0 :                     	endm
(1)  362/       0 :                     
(1)  363/       0 :                     ; ---------------------------------------------------------------
(1)  364/       0 :                     KDebug	macro	argument1
(1)  365/       0 :                     	ifdef __DEBUG__	; KDebug interface is only available in DEBUG builds
(1)  366/       0 :                     	switch lowstring("ATTRIBUTE")
(1)  367/       0 :                     	case "write"
(1)  368/       0 :                     		move.w	sr, -(sp)
(1)  369/       0 :                     		__FSTRING_GenerateArgumentsCode argument1
(1)  370/       0 :                     		movem.l	a0-a2/d7, -(sp)
(1)  371/       0 :                     		lea		4*4(sp), a2
(1)  372/       0 :                     		lea		.__data(pc), a1
(1)  373/       0 :                     		jsr		__global__KDebug_Write_Formatted
(1)  374/       0 :                     		movem.l	(sp)+, a0-a2/d7
(1)  375/       0 :                     		if (.__sp>8)
(1)  376/       0 :                     			lea		.__sp(sp), sp
(1)  377/       0 :                     		elseif (.__sp>0)
(1)  378/       0 :                     			addq.w	#.__sp, sp
(1)  379/       0 :                     		endif
(1)  380/       0 :                     		move.w	(sp)+, sr
(1)  381/       0 :                     		bra.w	.__leave
(1)  382/       0 :                     	.__data:
(1)  383/       0 :                     		__FSTRING_GenerateDecodedString argument1
(1)  384/       0 :                     		!align	2
(1)  385/       0 :                     	.__leave:
(1)  386/       0 :                     
(1)  387/       0 :                     	case "writeline"
(1)  388/       0 :                     		move.w	sr, -(sp)
(1)  389/       0 :                     		__FSTRING_GenerateArgumentsCode argument1
(1)  390/       0 :                     		movem.l	a0-a2/d7, -(sp)
(1)  391/       0 :                     		lea		4*4(sp), a2
(1)  392/       0 :                     		lea		.__data(pc), a1
(1)  393/       0 :                     		jsr		__global__KDebug_WriteLine_Formatted
(1)  394/       0 :                     		movem.l	(sp)+, a0-a2/d7
(1)  395/       0 :                     		if (.__sp>8)
(1)  396/       0 :                     			lea		.__sp(sp), sp
(1)  397/       0 :                     		elseif (.__sp>0)
(1)  398/       0 :                     			addq.w	#.__sp, sp
(1)  399/       0 :                     		endif
(1)  400/       0 :                     		move.w	(sp)+, sr
(1)  401/       0 :                     		bra.w	.__leave
(1)  402/       0 :                     	.__data:
(1)  403/       0 :                     		__FSTRING_GenerateDecodedString argument1
(1)  404/       0 :                     		!align	2
(1)  405/       0 :                     	.__leave:
(1)  406/       0 :                     
(1)  407/       0 :                     	case "breakline"
(1)  408/       0 :                     		move.w	sr, -(sp)
(1)  409/       0 :                     		jsr		__global__KDebug_FlushLine
(1)  410/       0 :                     		move.w	(sp)+, sr
(1)  411/       0 :                     
(1)  412/       0 :                     	case "starttimer"
(1)  413/       0 :                     		move.w	sr, -(sp)
(1)  414/       0 :                     		move.w	#$9FC0, ($C00004).l
(1)  415/       0 :                     		move.w	(sp)+, sr
(1)  416/       0 :                     
(1)  417/       0 :                     	case "endtimer"
(1)  418/       0 :                     		move.w	sr, -(sp)
(1)  419/       0 :                     		move.w	#$9F00, ($C00004).l
(1)  420/       0 :                     		move.w	(sp)+, sr
(1)  421/       0 :                     
(1)  422/       0 :                     	case "breakpoint"
(1)  423/       0 :                     		move.w	sr, -(sp)
(1)  424/       0 :                     		move.w	#$9D00, ($C00004).l
(1)  425/       0 :                     		move.w	(sp)+, sr
(1)  426/       0 :                     
(1)  427/       0 :                     	elsecase
(1)  428/       0 :                     		!error	"ATTRIBUTE isn't a member of KDebug"
(1)  429/       0 :                     
(1)  430/       0 :                     	endcase
(1)  431/       0 :                     	endif
(1)  432/       0 :                     	endm
(1)  433/       0 :                     
(1)  434/       0 :                     ; ---------------------------------------------------------------
(1)  435/       0 :                     __ErrorMessage  macro string, opts
(1)  436/       0 :                     		__FSTRING_GenerateArgumentsCode string
(1)  437/       0 :                     		jsr		__global__ErrorHandler
(1)  438/       0 :                     		__FSTRING_GenerateDecodedString string
(1)  439/       0 :                     
(1)  440/       0 :                     		if DEBUGGER__EXTENSIONS__ENABLE
(1)  441/       0 :                     		.__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)  442/       0 :                     			dc.b	(opts)+_eh_return|.__align_flag	; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)  443/       0 :                     			!align	2												; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)  444/       0 :                     			jmp		__global__ErrorHandler_PagesController	; ... extensions controller
(1)  445/       0 :                     		else
(1)  446/       0 :                     			dc.b	(opts)+0
(1)  447/       0 :                     			!align	2
(1)  448/       0 :                     		endif
(1)  449/       0 :                     	endm
(1)  450/       0 :                     
(1)  451/       0 :                     ; ---------------------------------------------------------------
(1)  452/       0 :                     ; WARNING: Since AS cannot compile instructions out of strings
(1)  453/       0 :                     ;	we have to do lots of switch-case bullshit down here..
(1)  454/       0 :                     
(1)  455/       0 :                     __FSTRING_PushArgument macro OPERAND,DEST
(1)  456/       0 :                     
(1)  457/       0 :                     	.__operand:		set	OPERAND
(1)  458/       0 :                     	.__dval:		set	0
(1)  459/       0 :                     
(1)  460/       0 :                     	; If OPERAND starts with "#", simulate "#immediate" mode by splitting OPERAND string
(1)  461/       0 :                     	if (substr(OPERAND, 0, 1)="#")
(1)  462/       0 :                     		.__dval:	set	VAL(substr(OPERAND, 1, 0))
(1)  463/       0 :                     		.__operand:	set	"#"
(1)  464/       0 :                     
(1)  465/       0 :                     	; If OPERAND ends with "(pc)", simulate "d16(pc)" mode by splitting OPERAND string
(1)  466/       0 :                     	elseif (strlen(OPERAND)>4)&&(substr(OPERAND, strlen(OPERAND)-4, 4)="(pc)")
(1)  467/       0 :                     		.__dval:	set	VAL(substr(OPERAND, 0, strlen(OPERAND)-4))
(1)  468/       0 :                     		.__operand:	set substr(OPERAND, strlen(OPERAND)-4, 0)
(1)  469/       0 :                     
(1)  470/       0 :                     	; If OPERAND ends with "(an)", simulate "d16(an)" mode by splitting OPERAND string
(1)  471/       0 :                     	elseif (strlen(OPERAND)>4)&&(substr(OPERAND, strlen(OPERAND)-4, 2)="(a")&&(substr(OPERAND, strlen(OPERAND)-1, 1)=")")
(1)  472/       0 :                     		.__dval:	set	VAL(substr(OPERAND, 0, strlen(OPERAND)-4))
(1)  473/       0 :                     		.__operand:	set substr(OPERAND, strlen(OPERAND)-4, 0)
(1)  474/       0 :                     	endif
(1)  475/       0 :                     
(1)  476/       0 :                     	switch lowstring(.__operand)
(1)  477/       0 :                     	case "d0"
(1)  478/       0 :                     		move.ATTRIBUTE	d0,DEST
(1)  479/       0 :                     	case "d1"
(1)  480/       0 :                     		move.ATTRIBUTE	d1,DEST
(1)  481/       0 :                     	case "d2"
(1)  482/       0 :                     		move.ATTRIBUTE	d2,DEST
(1)  483/       0 :                     	case "d3"
(1)  484/       0 :                     		move.ATTRIBUTE	d3,DEST
(1)  485/       0 :                     	case "d4"
(1)  486/       0 :                     		move.ATTRIBUTE	d4,DEST
(1)  487/       0 :                     	case "d5"
(1)  488/       0 :                     		move.ATTRIBUTE	d5,DEST
(1)  489/       0 :                     	case "d6"
(1)  490/       0 :                     		move.ATTRIBUTE	d6,DEST
(1)  491/       0 :                     	case "d7"
(1)  492/       0 :                     		move.ATTRIBUTE	d7,DEST
(1)  493/       0 :                     	
(1)  494/       0 :                     	case "a0"
(1)  495/       0 :                     		move.ATTRIBUTE	a0,DEST
(1)  496/       0 :                     	case "a1"
(1)  497/       0 :                     		move.ATTRIBUTE	a1,DEST
(1)  498/       0 :                     	case "a2"
(1)  499/       0 :                     		move.ATTRIBUTE	a2,DEST
(1)  500/       0 :                     	case "a3"
(1)  501/       0 :                     		move.ATTRIBUTE	a3,DEST
(1)  502/       0 :                     	case "a4"
(1)  503/       0 :                     		move.ATTRIBUTE	a4,DEST
(1)  504/       0 :                     	case "a5"
(1)  505/       0 :                     		move.ATTRIBUTE	a5,DEST
(1)  506/       0 :                     	case "a6"
(1)  507/       0 :                     		move.ATTRIBUTE	a6,DEST
(1)  508/       0 :                     
(1)  509/       0 :                     	case "(a0)"
(1)  510/       0 :                     		move.ATTRIBUTE	.__dval(a0),DEST
(1)  511/       0 :                     	case "(a1)"
(1)  512/       0 :                     		move.ATTRIBUTE	.__dval(a1),DEST
(1)  513/       0 :                     	case "(a2)"
(1)  514/       0 :                     		move.ATTRIBUTE	.__dval(a2),DEST
(1)  515/       0 :                     	case "(a3)"
(1)  516/       0 :                     		move.ATTRIBUTE	.__dval(a3),DEST
(1)  517/       0 :                     	case "(a4)"
(1)  518/       0 :                     		move.ATTRIBUTE	.__dval(a4),DEST
(1)  519/       0 :                     	case "(a5)"
(1)  520/       0 :                     		move.ATTRIBUTE	.__dval(a5),DEST
(1)  521/       0 :                     	case "(a6)"
(1)  522/       0 :                     		move.ATTRIBUTE	.__dval(a6),DEST
(1)  523/       0 :                     
(1)  524/       0 :                     	case "(pc)"
(1)  525/       0 :                     		move.ATTRIBUTE	.__dval(pc),DEST
(1)  526/       0 :                     
(1)  527/       0 :                     	case "#"
(1)  528/       0 :                     		move.ATTRIBUTE	#.__dval,DEST
(1)  529/       0 :                     
(1)  530/       0 :                     	elsecase
(1)  531/       0 :                     	.__evaluated_operand: set VAL(OPERAND)
(1)  532/       0 :                     		move.ATTRIBUTE	.__evaluated_operand,DEST
(1)  533/       0 :                     
(1)  534/       0 :                     	endcase
(1)  535/       0 :                     	endm
(1)  536/       0 :                     
(1)  537/       0 :                     ; ---------------------------------------------------------------
(1)  538/       0 :                     ; WARNING! Incomplete!
(1)  539/       0 :                     __FSTRING_GenerateArgumentsCode macro string
(1)  540/       0 :                     
(1)  541/       0 :                     	.__pos:	set 	strstr(string,"%<")		; token position
(1)  542/       0 :                     	.__sp:	set		0						; stack displacement
(1)  543/       0 :                     	.__str:	set		string
(1)  544/       0 :                     
(1)  545/       0 :                     	; Parse string itself
(1)  546/       0 :                     	while (.__pos>=0)
(1)  547/       0 :                     
(1)  548/       0 :                         	; Find the last occurance "%<" in the string
(1)  549/       0 :                         	while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)  550/       0 :                     			.__pos: 	set		strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)  551/       0 :                     		endm
(1)  552/       0 :                     		.__substr:	set		substr(.__str,.__pos,0)
(1)  553/       0 :                     
(1)  554/       0 :                     		; Retrive expression in brackets following % char
(1)  555/       0 :                         	.__endpos:	set		strstr(.__substr,">")
(1)  556/       0 :                     		if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of string
(1)  557/       0 :                     			.__endpos:	set		strlen(.__substr)-1
(1)  558/       0 :                     		endif
(1)  559/       0 :                         	.__midpos:	set		strstr(substr(.__substr,5,0)," ")
(1)  560/       0 :                         	if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)  561/       0 :                     			.__midpos:	set		.__endpos
(1)  562/       0 :                     		else
(1)  563/       0 :                     			.__midpos:	set		.__midpos+5
(1)  564/       0 :                         	endif
(1)  565/       0 :                     		.__type:		set		substr(.__substr,2,2)	; .type
(1)  566/       0 :                     
(1)  567/       0 :                     		; Expression is an effective address (e.g. %(.w d0 hex) )
(1)  568/       0 :                     		if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)  569/       0 :                     			.__operand:	set		substr(.__substr,5,.__midpos-5)						; ea
(1)  570/       0 :                     			.__param:	set		substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)		; param
(1)  571/       0 :                     
(1)  572/       0 :                     			if (.__type==".b")
(1)  573/       0 :                     				subq.w	#2, sp
(1)  574/       0 :                     				__FSTRING_PushArgument.b	.__operand,1(sp)
(1)  575/       0 :                     				.__sp:	set		.__sp+2
(1)  576/       0 :                     
(1)  577/       0 :                     			elseif (.__type==".w")
(1)  578/       0 :                     				__FSTRING_PushArgument.w	.__operand,-(sp)
(1)  579/       0 :                     				.__sp:	set		.__sp+2
(1)  580/       0 :                     
(1)  581/       0 :                     			elseif (.__type==".l")
(1)  582/       0 :                     				__FSTRING_PushArgument.l	.__operand,-(sp)
(1)  583/       0 :                     				.__sp:	set		.__sp+4
(1)  584/       0 :                     
(1)  585/       0 :                     			else
(1)  586/       0 :                     				error "Unrecognized type in string operand: \{.__type}"
(1)  587/       0 :                     			endif
(1)  588/       0 :                     
(1)  589/       0 :                     		endif
(1)  590/       0 :                     
(1)  591/       0 :                     		; Cut string
(1)  592/       0 :                     		if (.__pos>0)
(1)  593/       0 :                     			.__str:	set		substr(.__str, 0, .__pos)
(1)  594/       0 :                     			.__pos:	set		strstr(.__str,"%<")
(1)  595/       0 :                     		else
(1)  596/       0 :                     			.__pos:	set		-1
(1)  597/       0 :                     		endif
(1)  598/       0 :                     
(1)  599/       0 :                     	endm
(1)  600/       0 :                     
(1)  601/       0 :                     	endm
(1)  602/       0 :                     
(1)  603/       0 :                     ; ---------------------------------------------------------------
(1)  604/       0 :                     __FSTRING_GenerateDecodedString macro string
(1)  605/       0 :                     
(1)  606/       0 :                     	.__lpos:	set		0		; start position
(1)  607/       0 :                     	.__pos:	set		strstr(string, "%<")
(1)  608/       0 :                     
(1)  609/       0 :                     	while (.__pos>=0)
(1)  610/       0 :                     
(1)  611/       0 :                     		; Write part of string before % token
(1)  612/       0 :                     		if (.__pos-.__lpos>0)
(1)  613/       0 :                     			dc.b	substr(string, .__lpos, .__pos-.__lpos)
(1)  614/       0 :                     		endif
(1)  615/       0 :                     
(1)  616/       0 :                     		; Retrive expression in brakets following % char
(1)  617/       0 :                         	.__endpos:	set		strstr(substr(string,.__pos+1,0),">")+.__pos+1 
(1)  618/       0 :                     		if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of string
(1)  619/       0 :                     			.__endpos:	set		strlen(string)-1
(1)  620/       0 :                     		endif
(1)  621/       0 :                         	.__midpos:	set		strstr(substr(string,.__pos+5,0)," ")+.__pos+5
(1)  622/       0 :                         	if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)  623/       0 :                     			.__midpos:	set		.__endpos
(1)  624/       0 :                         	endif
(1)  625/       0 :                     		.__type:		set		substr(string,.__pos+1+1,2)		; .type
(1)  626/       0 :                     
(1)  627/       0 :                     		; Expression is an effective address (e.g. %<.w d0 hex> )
(1)  628/       0 :                     		if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)  629/       0 :                     			.__param:	set		substr(string,.__midpos+1,.__endpos-.__midpos-1)	; param
(1)  630/       0 :                     
(1)  631/       0 :                     			; Validate format setting ("param")
(1)  632/       0 :                     			if (strlen(.__param)<1)
(1)  633/       0 :                     				.__param: 	set		"hex"			; if param is ommited, set it to "hex"
(1)  634/       0 :                     			elseif (.__param=="signed")
(1)  635/       0 :                     				.__param:	set		"hex+signed"	; if param is "signed", correct it to "hex+signed"
(1)  636/       0 :                     			endif
(1)  637/       0 :                     
(1)  638/       0 :                     			if (val(.__param) < $80)
(1)  639/       0 :                     				!error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)  640/       0 :                     			endif
(1)  641/       0 :                     
(1)  642/       0 :                     			if (.__type==".b")
(1)  643/       0 :                     				dc.b	val(.__param)
(1)  644/       0 :                     			elseif (.__type==".w")
(1)  645/       0 :                     				dc.b	val(.__param)|1
(1)  646/       0 :                     			else
(1)  647/       0 :                     				dc.b	val(.__param)|3
(1)  648/       0 :                     			endif
(1)  649/       0 :                     
(1)  650/       0 :                     		; Expression is an inline constant (e.g. %<endl> )
(1)  651/       0 :                     		else
(1)  652/       0 :                     			dc.b	val(substr(string,.__pos+1+1,.__endpos-.__pos-2))
(1)  653/       0 :                     		endif
(1)  654/       0 :                     
(1)  655/       0 :                     		.__lpos:	set		.__endpos+1
(1)  656/       0 :                     		if (strstr(substr(string,.__pos+1,0),"%<")>=0)
(1)  657/       0 :                     			.__pos:	set		strstr(substr(string,.__pos+1,0), "%<")+.__pos+1
(1)  658/       0 :                     		else
(1)  659/       0 :                     			.__pos:	set		-1
(1)  660/       0 :                     		endif
(1)  661/       0 :                     
(1)  662/       0 :                     	endm
(1)  663/       0 :                     
(1)  664/       0 :                     	; Write part of string before the end
(1)  665/       0 :                     	dc.b	substr(string, .__lpos, 0), 0
(1)  666/       0 :                     
(1)  667/       0 :                     	endm
(1)  668/       0 :                     
      13/       0 :                     
      14/       0 :                     StartOfRom:
      15/       0 : FFFF FE00           		dc.l StackRAM
      16/       4 : 0000 0202           		dc.l EntryPoint
      17/       8 : 0000 0200           		dc.l ErrorTrap		; Bus error
      18/       C : 0000 0200           		dc.l ErrorTrap	; Address error (4)
      19/      10 : 0000 0200           		dc.l ErrorTrap	; Illegal instruction
      20/      14 : 0000 0200           		dc.l ErrorTrap		; Division by zero
      21/      18 : 0000 0200           		dc.l ErrorTrap		; CHK exception
      22/      1C : 0000 0200           		dc.l ErrorTrap		; TRAPV exception (8)
      23/      20 : 0000 0200           		dc.l ErrorTrap	; Privilege violation
      24/      24 : 0000 0200           		dc.l ErrorTrap		; TRACE exception
      25/      28 : 0000 0200           		dc.l ErrorTrap	; Line-A emulator
      26/      2C : 0000 0200           		dc.l ErrorTrap	; Line-F emulator (12)
      27/      30 : 0000 0200           		dc.l ErrorTrap	; Unused (reserved)
      28/      34 : 0000 0200           		dc.l ErrorTrap	; Unused (reserved)
      29/      38 : 0000 0200           		dc.l ErrorTrap	; Unused (reserved)
      30/      3C : 0000 0200           		dc.l ErrorTrap	; Unused (reserved) (16)
      31/      40 : 0000 0200           		dc.l ErrorTrap	; Unused (reserved)
      32/      44 : 0000 0200           		dc.l ErrorTrap	; Unused (reserved)
      33/      48 : 0000 0200           		dc.l ErrorTrap	; Unused (reserved)
      34/      4C : 0000 0200           		dc.l ErrorTrap	; Unused (reserved) (20)
      35/      50 : 0000 0200           		dc.l ErrorTrap	; Unused (reserved)
      36/      54 : 0000 0200           		dc.l ErrorTrap	; Unused (reserved)
      37/      58 : 0000 0200           		dc.l ErrorTrap	; Unused (reserved)
      38/      5C : 0000 0200           		dc.l ErrorTrap	; Unused (reserved) (24)
      39/      60 : 0000 0200           		dc.l ErrorTrap	; Spurious exception
      40/      64 : 0000 0200           		dc.l ErrorTrap		; IRQ level 1
      41/      68 : 0000 0200           		dc.l ErrorTrap		; IRQ level 2
      42/      6C : 0000 0200           		dc.l ErrorTrap		; IRQ level 3 (28)
      43/      70 : 0000 0200           		dc.l ErrorTrap		; IRQ level 4 (horizontal retrace interrupt)
      44/      74 : 0000 0200           		dc.l ErrorTrap		; IRQ level 5
      45/      78 : 0000 027C           		dc.l V_Int		; IRQ level 6 (vertical retrace interrupt)
      46/      7C : 0000 0200           		dc.l ErrorTrap		; IRQ level 7 (32)
      47/      80 : 0000 0200           		dc.l ErrorTrap		; TRAP #00 exception
      48/      84 : 0000 0200           		dc.l ErrorTrap		; TRAP #01 exception
      49/      88 : 0000 0200           		dc.l ErrorTrap		; TRAP #02 exception
      50/      8C : 0000 0200           		dc.l ErrorTrap		; TRAP #03 exception (36)
      51/      90 : 0000 0200           		dc.l ErrorTrap		; TRAP #04 exception
      52/      94 : 0000 0200           		dc.l ErrorTrap		; TRAP #05 exception
      53/      98 : 0000 0200           		dc.l ErrorTrap		; TRAP #06 exception
      54/      9C : 0000 0200           		dc.l ErrorTrap		; TRAP #07 exception (40)
      55/      A0 : 0000 0200           		dc.l ErrorTrap		; TRAP #08 exception
      56/      A4 : 0000 0200           		dc.l ErrorTrap		; TRAP #09 exception
      57/      A8 : 0000 0200           		dc.l ErrorTrap		; TRAP #10 exception
      58/      AC : 0000 0200           		dc.l ErrorTrap		; TRAP #11 exception (44)
      59/      B0 : 0000 0200           		dc.l ErrorTrap		; TRAP #12 exception
      60/      B4 : 0000 0200           		dc.l ErrorTrap		; TRAP #13 exception
      61/      B8 : 0000 0200           		dc.l ErrorTrap		; TRAP #14 exception
      62/      BC : 0000 0200           		dc.l ErrorTrap		; TRAP #15 exception (48)
      63/      C0 : 0000 0200           		dc.l ErrorTrap		; Unused (reserved)
      64/      C4 : 0000 0200           		dc.l ErrorTrap		; Unused (reserved)
      65/      C8 : 0000 0200           		dc.l ErrorTrap		; Unused (reserved)
      66/      CC : 0000 0200           		dc.l ErrorTrap		; Unused (reserved) (52)
      67/      D0 : 0000 0200           		dc.l ErrorTrap		; Unused (reserved)
      68/      D4 : 0000 0200           		dc.l ErrorTrap		; Unused (reserved)
      69/      D8 : 0000 0200           		dc.l ErrorTrap		; Unused (reserved)
      70/      DC : 0000 0200           		dc.l ErrorTrap		; Unused (reserved) (56)
      71/      E0 : 0000 0200           		dc.l ErrorTrap		; Unused (reserved)
      72/      E4 : 0000 0200           		dc.l ErrorTrap		; Unused (reserved)
      73/      E8 : 0000 0200           		dc.l ErrorTrap		; Unused (reserved)
      74/      EC : 0000 0200           		dc.l ErrorTrap		; Unused (reserved) (60)
      75/      F0 : 0000 0200           		dc.l ErrorTrap		; Unused (reserved)
      76/      F4 : 0000 0200           		dc.l ErrorTrap		; Unused (reserved)
      77/      F8 : 0000 0200           		dc.l ErrorTrap		; Unused (reserved)
      78/      FC : 0000 0200           		dc.l ErrorTrap		; Unused (reserved) (64)
      79/     100 :                     Header:
      80/     100 : 5345 4741 204D      		dc.b "SEGA MEGA DRIVE " ; Console name
              106 : 4547 4120 4452 
              10C : 4956 4520          
      81/     110 : 4255 494C 4420      		dc.b "BUILD 11/17/2024" ; Copyright holder and release date
              116 : 3131 2F31 372F 
              11C : 3230 3234          
      82/     120 : 5749 4E44 4F57      		dc.b "WINDOWS 9X - MEGA DRIVE EDITION                 " ; Domestic name
              126 : 5320 3958 202D 
              12C : 204D 4547 4120 
              132 : 4452 4956 4520 
              138 : 4544 4954 494F 
              13E : 4E20 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
      83/     150 : 5749 4E44 4F57      		dc.b "WINDOWS 9X - MEGA DRIVE EDITION                 " ; International name
              156 : 5320 3958 202D 
              15C : 204D 4547 4120 
              162 : 4452 4956 4520 
              168 : 4544 4954 494F 
              16E : 4E20 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
      84/     180 : 474D 2058 5858      		dc.b "GM XXXXXXXX-00"   ; Version
              186 : 5858 5858 582D 
              18C : 3030             
      85/     18E : 0000                		dc.w 0			; Checksum
      86/     190 : 4A20 2020 2020      		dc.b "J               " ; I/O Support
              196 : 2020 2020 2020 
              19C : 2020 2020          
      87/     1A0 : 0000 0000           		dc.l StartOfRom		; Start address of ROM
      88/     1A4 : 0002 DD37           		dc.l EndOfRom-1		; End address of ROM
      89/     1A8 : FFFF 0000           		dc.l RAM_Start		; Start address of RAM
      90/     1AC : FFFF FFFF           		dc.l RAM_End-1		; End address of RAM
      91/     1B0 : 2020 2020           		dc.b "    "		; Backup RAM ID
      92/     1B4 : 2020 2020           		dc.l $20202020		; Backup RAM start address
      93/     1B8 : 2020 2020           		dc.l $20202020		; Backup RAM end address
      94/     1BC : 2020 2020 2020      		dc.b "            "	; Modem support
              1C2 : 2020 2020 2020    
      95/     1C8 : 5468 6973 2062      		dc.b "This build is provided to XXXXXXXXXXXXX."	; Notes
              1CE : 7569 6C64 2069 
              1D4 : 7320 7072 6F76 
              1DA : 6964 6564 2074 
              1E0 : 6F20 5858 5858 
              1E6 : 5858 5858 5858 
              1EC : 5858 582E          
      96/     1F0 : 4A55 4520 2020      		dc.b "JUE             " ; Country code (region)
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
      97/     200 :                     EndOfHeader:
      98/     200 :                     
      99/     200 :                     ; ===========================================================================
     100/     200 :                     ; Freeze the 68000.
     101/     200 :                     ErrorTrap:
     102/     200 : 60FE                		bra.s	ErrorTrap	; Loop indefinitely.
     103/     202 :                     ; ===========================================================================
     104/     202 :                     
     105/     202 :                     EntryPoint:
     106/     202 : 700F                		moveq	#$F,d0					; get only the version number
     107/     204 : C039 00A1 0001      		and.b	z80_version.l,d0			; load hardware version/region
     108/     20A : 670A                		beq.s	SG_NoTMSS				; if the version is 0, branch (no TMSS in this machine)
     109/     20C : 23FC 5345 4741      		move.l	#"SEGA",security_addr.l		; give TMSS the string "SEGA" so it unlocks the VDP
              212 : 00A1 4000          
     110/     216 :                     
     111/     216 :                     SG_NoTMSS:
     112/     216 : 323C 0100           		move.w	#$100,d1				; prepare Z80 value/VDP register increment
     113/     21A : 33C1 00A1 1100      		move.w	d1,z80_bus_request.l			; request Z80 to stop
     114/     220 : 4279 00A1 1200      		clr.w	z80_reset.l			; request Z80 reset on (resets YM2612)
     115/     226 : 4BF9 00C0 0000      		lea	vdp_data_port.l,a5			; load VDP data port
     116/     22C : 49ED 0011           		lea	$11(a5),a4				; load PSG port
     117/     230 : 18BC 009F           		move.b	#$9F,(a4)				; mute all PSG channels
     118/     234 : 18BC 00BF           		move.b	#$BF,(a4)				; ''
     119/     238 : 18BC 00DF           		move.b	#$DF,(a4)				; ''
     120/     23C : 18BC 00FF           		move.b	#$FF,(a4)				; ''
     121/     240 : 33C1 00A1 1200      		move.w	d1,z80_reset.l			; request Z80 reset off
     122/     246 :                     
     123/     246 : 4EB9 0000 0302      		jsr	MegaPCM_LoadDriver.l
     124/     24C : 41F9 0000 1FD8      		lea	SampleTable.l,a0
     125/     252 : 4EB9 0000 036C      		jsr	MegaPCM_LoadSampleTable.l
     126/     258 : 4A40                		tst.w	d0                      ; was sample table loaded successfully?
     127/     25A : 6702                		beq.s	.SampleTableOk          ; if yes, branch
     128/     25C : 4AFC                		illegal
     129/     25E :                     .SampleTableOk:
     130/     25E :                     
     131/     25E : 7060                		moveq	#$60,d0
     132/     260 : 13C0 00A1 0009      		move.b	d0,IoCtrl1.l	; 1P control port
     133/     266 : 13C0 00A1 0003      		move.b	d0,IoData1.l	; 1P data port
     134/     26C :                     
     135/     26C : 21FC 0000 02F8      		move.l	#InfiniteLoopGM,GameMode.w
              272 : FDFC             
     136/     274 :                     
     137/     274 :                     GameModeLoop:
     138/     274 : 2078 FDFC           		movea.l	GameMode.w,a0
     139/     278 : 4E90                		jsr	(a0)
     140/     27A : 60F8                		bra.s	GameModeLoop
     141/     27C :                     
     142/     27C :                     		; interrupts
     143/     27C :                     		include	"interrupts/vertical.asm"
(1)    1/     27C :                     ; ==============================================================
(1)    2/     27C :                     ; --------------------------------------------------------------
(1)    3/     27C :                     ; Vertical interrupts
(1)    4/     27C :                     ; --------------------------------------------------------------
(1)    5/     27C :                     V_Int:
(1)    6/     27C : 48E7 FFFE           		movem.l	d0-a6,-(sp)	; push everything into stack
(1)    7/     280 : 6100 0008           		bsr.w	ReadMouse	; read mouse controls
(1)    8/     284 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6	; restore everything from stack
(1)    9/     288 : 4E73                		rte
     144/     28A :                     
     145/     28A :                     		; controllers
     146/     28A :                     		include	"controllers/mouse.asm"
(1)    1/     28A :                     ; Reads a mouse packet
(1)    2/     28A :                     ; d0.w = 0 on success
(1)    3/     28A :                     ;       -1 on failure
(1)    4/     28A :                     
(1)    5/     28A :                     ReadMouse:
(1)    6/     28A :                     	; I/O data port to read from
(1)    7/     28A :                     	; Use IoData2 for player 2
(1)    8/     28A : 41F9 00A1 0003      	lea	IoData1.l,a0
(1)    9/     290 :                     
(1)   10/     290 :                     	; Buffer to store the nibbles
(1)   11/     290 :                     	; (we use up one byte per nibble)
(1)   12/     290 : 43F8 8000           	lea	MouseBuffer.w,a1
(1)   13/     294 :                     
(1)   14/     294 :                     	; Look-up table, see below
(1)   15/     294 : 45FA 0050           	lea	.Table(pc),a2
(1)   16/     298 :                     
(1)   17/     298 :                     	; Keep Z80 out of the 68000 bus
(1)   18/     298 : (MACRO)              	stopZ80
(1)   18/     298 : 33FC 0100 00A1                      move.w  #$100,(z80_bus_request).l
              29E : 1100             
(1)   18/     2A0 : 67FE                .wait:          beq.s   .wait
(1)   19/     2A2 :                     
(1)   20/     2A2 :                     	; Now loop through all nibbles
(1)   21/     2A2 :                     	; (the -1 is because of DBF)
(1)   22/     2A2 : 7008                	moveq	#9-1,d0
(1)   23/     2A4 :                     .Loop:
(1)   24/     2A4 :                     
(1)   25/     2A4 :                     	; Tell mouse to send next nibble
(1)   26/     2A4 :                     	; and wait for it to be ready (if
(1)   27/     2A4 :                     	; it takes too long we bail out)
(1)   28/     2A4 : 109A                	move.b	(a2)+,(a0)
(1)   29/     2A6 : 3E3C 00FF           	move.w	#$100-1,d7
(1)   30/     2AA :                     .Wait:
(1)   31/     2AA : 7C10                	moveq	#$10,d6	; Mask out bit 4 and
(1)   32/     2AC : CC10                	and.b	(a0),d6	; check if it matches
(1)   33/     2AE : BC12                	cmp.b	(a2),d6	; what we want
(1)   34/     2B0 : 6706                	beq.s	.GotIt
(1)   35/     2B2 :                     
(1)   36/     2B2 : 51CF FFF6           	dbf	d7,.Wait   ; Keep waiting if not,
(1)   37/     2B6 : 601E                	bra.s	.Error	  ; or throw error if we
(1)   38/     2B8 :                     						; waited way too long
(1)   39/     2B8 :                     
(1)   40/     2B8 :                     	; Got the nibble, store it into a
(1)   41/     2B8 :                     	; buffer and move onto the next one
(1)   42/     2B8 :                     .GotIt:
(1)   43/     2B8 : 7C0F                	moveq	#$F,d6	; Mask out the nibble
(1)   44/     2BA : CC10                	and.b	(a0),d6	; and store it into
(1)   45/     2BC : 12C6                	move.b	d6,(a1)+   ; the buffer
(1)   46/     2BE :                     
(1)   47/     2BE : 45EA 0001           	lea	1(a2),a2   ; Advance look-up table
(1)   48/     2C2 : 51C8 FFE0           	dbf	d0,.Loop   ; Keep looping
(1)   49/     2C6 :                     
(1)   50/     2C6 : 10BC 0060           	move.b	#$60,(a0) ; Leave mouse alone
(1)   51/     2CA : (MACRO)              	startZ80		   ; Let Z80 continue
(1)   51/     2CA : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              2D0 : 1100             
(1)   52/     2D2 : 7000                	moveq	#0,d0	  ; Success!
(1)   53/     2D4 : 4E75                	rts				 ; End of subroutine
(1)   54/     2D6 :                     
(1)   55/     2D6 :                     .Error:
(1)   56/     2D6 : 10BC 0060           	move.b	#$60,(a0)  ; Reset mouse just in case
(1)   57/     2DA : (MACRO)              	startZ80		   ; Let Z80 continue
(1)   57/     2DA : 33FC 0000 00A1                      move.w  #0,(z80_bus_request).l
              2E0 : 1100             
(1)   58/     2E2 : 70FF                	moveq	#-1,d0	 ; Failure...
(1)   59/     2E4 : 4E75                	rts				 ; End of subroutine
(1)   60/     2E6 :                     
(1)   61/     2E6 :                     ; Look-up table used in the loop above
(1)   62/     2E6 :                     ; 1st byte is what to write, 2nd byte is
(1)   63/     2E6 :                     ; what to wait for (in bit 4)
(1)   64/     2E6 :                     .Table:
(1)   65/     2E6 : 2010                	dc.b	$20,$10	; 1st nibble
(1)   66/     2E8 : 0000                	dc.b	$00,$00	; 2nd nibble
(1)   67/     2EA : 2010                	dc.b	$20,$10	; 3rd nibble
(1)   68/     2EC : 0000                	dc.b	$00,$00	; 4th nibble
(1)   69/     2EE : 2010                	dc.b	$20,$10	; 5th nibble
(1)   70/     2F0 : 0000                	dc.b	$00,$00	; 6th nibble
(1)   71/     2F2 : 2010                	dc.b	$20,$10	; 7th nibble
(1)   72/     2F4 : 0000                	dc.b	$00,$00	; 8th nibble
(1)   73/     2F6 : 2010                	dc.b	$20,$10	; 9th nibble
     147/     2F8 :                     
     148/     2F8 :                     		; objects and object code
     149/     2F8 :                     		include	"gamemodes/infinite loop.asm"
(1)    1/     2F8 :                     ;
(1)    2/     2F8 :                     ; This is an infinite loop test.
(1)    3/     2F8 :                     ;
(1)    4/     2F8 :                     InfiniteLoopGM:
(1)    5/     2F8 : 7081                		moveq	#signextendB($81),d0
(1)    6/     2FA : 4EB9 0000 054C      		jsr	MegaPCM_PlaySample.l
(1)    7/     300 :                     		
(1)    8/     300 :                     .loop:
(1)    9/     300 : 60FE                		bra.s	.loop
     150/     302 :                     
     151/     302 :                     		; objects and object code
     152/     302 :                     		include	"objects/process.asm"
(1)    1/     302 :                     
     153/     302 :                     
     154/     302 :                     		; sound
     155/     302 :                     		include	"sound/MegaPCM.asm"
(1)    1/     302 :                     
(1)    2/     302 :                     ; ==============================================================================
(1)    3/     302 :                     ; ------------------------------------------------------------------------------
(1)    4/     302 :                     ; Mega PCM 2.0 - DAC Sound Driver
(1)    5/     302 :                     ;
(1)    6/     302 :                     ; Documentation, examples and source code are available at:
(1)    7/     302 :                     ; - https://github.com/vladikcomper/MegaPCM/tree/2.x
(1)    8/     302 :                     ;
(1)    9/     302 :                     ; (c) 2012-2024, Vladikcomper
(1)   10/     302 :                     ; ------------------------------------------------------------------------------
(1)   11/     302 :                     
(1)   12/     302 :                     ; ==============================================================================
(1)   13/     302 :                     ; ------------------------------------------------------------------------------
(1)   14/     302 :                     ; Constants
(1)   15/     302 :                     ; ------------------------------------------------------------------------------
(1)   16/     302 :                     
(1)   17/     302 :                     
(1)   18/     302 :                     ; ------------------------------------------------------------------------------
(1)   19/     302 :                     ; Definitions for sample table
(1)   20/     302 :                     ; ------------------------------------------------------------------------------
(1)   21/     302 :                     
(1)   22/     302 : =$1                  FLAGS_SFX:		equ	$01		; sample is SFX, normal drums cannot interrupt it
(1)   23/     302 : =$2                  FLAGS_LOOP:		equ	$02		; loop sample indefinitely
(1)   24/     302 :                     
(1)   25/     302 : =$0                  TYPE_NONE:		equ	$00
(1)   26/     302 : ='P'                 TYPE_PCM:		equ	'P'
(1)   27/     302 : ='T'                 TYPE_PCM_TURBO:	equ	'T'
(1)   28/     302 : ='D'                 TYPE_DPCM:		equ	'D'
(1)   29/     302 :                     
(1)   30/     302 :                     ; ------------------------------------------------------------------------------
(1)   31/     302 :                     ; Maximum playback rates:
(1)   32/     302 : =$7D00               TYPE_PCM_TURBO_MAX_RATE:	equ	32000 ; Hz
(1)   33/     302 : =$620C               TYPE_PCM_MAX_RATE:			equ	25100 ; Hz
(1)   34/     302 : =$5078               TYPE_DPCM_MAX_RATE:			equ	20600 ; Hz
(1)   35/     302 :                     
(1)   36/     302 :                     ; Internal driver's base rates for pitched playback.
(1)   37/     302 :                     ; NOTICE: Actual max rates are slightly lower,
(1)   38/     302 :                     ; because the highest pitch is 255/256, not 256/256.
(1)   39/     302 : =$6278               TYPE_PCM_BASE_RATE:			equ	25208 ; Hz
(1)   40/     302 : =$50D3               TYPE_DPCM_BASE_RATE:		equ	20691 ; Hz
(1)   41/     302 :                     
(1)   42/     302 :                     
(1)   43/     302 :                     ; ------------------------------------------------------------------------------
(1)   44/     302 :                     ; Return error codes for `MegaPCM_LoadSampleTable`
(1)   45/     302 :                     ; ------------------------------------------------------------------------------
(1)   46/     302 :                     
(1)   47/     302 : =$1                  MPCM_ST_TOO_MANY_SAMPLES:			equ	$01
(1)   48/     302 : =$2                  MPCM_ST_UNKNOWN_SAMPLE_TYPE:		equ	$02
(1)   49/     302 :                     
(1)   50/     302 : =$10                 MPCM_ST_PITCH_NOT_SET:				equ	$10
(1)   51/     302 :                     
(1)   52/     302 : =$20                 MPCM_ST_WAVE_INVALID_HEADER:		equ	$20
(1)   53/     302 : =$21                 MPCM_ST_WAVE_BAD_AUDIO_FORMAT:		equ	$21
(1)   54/     302 : =$22                 MPCM_ST_WAVE_NOT_MONO:				equ	$22
(1)   55/     302 : =$23                 MPCM_ST_WAVE_NOT_8BIT:				equ	$23
(1)   56/     302 : =$24                 MPCM_ST_WAVE_BAD_SAMPLE_RATE:		equ	$24
(1)   57/     302 : =$25                 MPCM_ST_WAVE_MISSING_DATA_CHUNK:	equ	$25
(1)   58/     302 :                     
(1)   59/     302 :                     
(1)   60/     302 :                     ; ------------------------------------------------------------------------------
(1)   61/     302 :                     ; System Ports used by Mega PCM
(1)   62/     302 :                     ; ------------------------------------------------------------------------------
(1)   63/     302 :                     
(1)   64/     302 : =$A00000             MPCM_Z80_RAM:		equ		$A00000
(1)   65/     302 : =$A11100             MPCM_Z80_BUSREQ:	equ		$A11100
(1)   66/     302 : =$A11200             MPCM_Z80_RESET:		equ		$A11200
(1)   67/     302 :                     
(1)   68/     302 : =$A04000             MPCM_YM2612_A0:		equ		$A04000
(1)   69/     302 : =$A04001             MPCM_YM2612_D0:		equ		$A04001
(1)   70/     302 : =$A04002             MPCM_YM2612_A1:		equ		$A04002
(1)   71/     302 : =$A04003             MPCM_YM2612_D1:		equ		$A04003
(1)   72/     302 :                     
(1)   73/     302 :                     ; ------------------------------------------------------------------------------
(1)   74/     302 :                     ; Z80 equates
(1)   75/     302 :                     ; ------------------------------------------------------------------------------
(1)   76/     302 :                     
(1)   77/     302 : =$1FC3               Z_MPCM_DriverReady:	equ $1fc3
(1)   78/     302 : =$1FC2               Z_MPCM_CommandInput:	equ $1fc2
(1)   79/     302 : =$1FC4               Z_MPCM_VolumeInput:	equ $1fc4
(1)   80/     302 : =$1FC5               Z_MPCM_SFXVolumeInput:	equ $1fc5
(1)   81/     302 : =$1FC6               Z_MPCM_PanInput:	equ $1fc6
(1)   82/     302 : =$1FC7               Z_MPCM_SFXPanInput:	equ $1fc7
(1)   83/     302 : =$1FDD               Z_MPCM_LoopId:	equ $1fdd
(1)   84/     302 : =$1FDC               Z_MPCM_ActiveSamplePitch:	equ $1fdc
(1)   85/     302 : =$1FE2               Z_MPCM_VBlankActive:	equ $1fe2
(1)   86/     302 : =$1FE3               Z_MPCM_CalibrationApplied:	equ $1fe3
(1)   87/     302 : =$1FE4               Z_MPCM_CalibrationScore_ROM:	equ $1fe4
(1)   88/     302 : =$1FE6               Z_MPCM_CalibrationScore_RAM:	equ $1fe6
(1)   89/     302 : =$1FE8               Z_MPCM_LastErrorCode:	equ $1fe8
(1)   90/     302 : =$1976               Z_MPCM_SampleTable:	equ $1976
(1)   91/     302 : =$1                  Z_MPCM_COMMAND_STOP:	equ $1
(1)   92/     302 : =$2                  Z_MPCM_COMMAND_PAUSE:	equ $2
(1)   93/     302 : =$1                  Z_MPCM_LOOP_IDLE:	equ $1
(1)   94/     302 : =$2                  Z_MPCM_LOOP_PAUSE:	equ $2
(1)   95/     302 : =$10                 Z_MPCM_LOOP_PCM:	equ $10
(1)   96/     302 : =$18                 Z_MPCM_LOOP_PCM_TURBO:	equ $18
(1)   97/     302 : =$20                 Z_MPCM_LOOP_DPCM:	equ $20
(1)   98/     302 : =$80                 Z_MPCM_LOOP_CALIBRATION:	equ $80
(1)   99/     302 : =$2                  Z_MPCM_ERROR__BAD_INTERRUPT:	equ $2
(1)  100/     302 : =$1                  Z_MPCM_ERROR__BAD_SAMPLE_TYPE:	equ $1
(1)  101/     302 : =$80                 Z_MPCM_ERROR__UNKNOWN_COMMAND:	equ $80
(1)  102/     302 :                     
(1)  103/     302 :                     ; ==============================================================================
(1)  104/     302 :                     ; ------------------------------------------------------------------------------
(1)  105/     302 :                     ; Macros
(1)  106/     302 :                     ; ------------------------------------------------------------------------------
(1)  107/     302 :                     
(1)  108/     302 :                     ; ------------------------------------------------------------------------------
(1)  109/     302 :                     ; Macro to generate sample record in a sample table
(1)  110/     302 :                     ; ------------------------------------------------------------------------------
(1)  111/     302 :                     
(1)  112/     302 :                     dcSample: macro	SAMPLETYPE, SAMPLEPTR, SAMPLERATE, SAMPLEFLAGS
(1)  113/     302 :                     	if ARGCOUNT>4
(1)  114/     302 :                     		fatal "Too many arguments. USAGE: dcSample type, samplePtr, sampleRateHz, flags"
(1)  115/     302 :                     	endif
(1)  116/     302 :                     
(1)  117/     302 :                     	dc.b	SAMPLETYPE					; $00	- type
(1)  118/     302 :                     
(1)  119/     302 :                     	if SAMPLETYPE=TYPE_PCM
(1)  120/     302 :                     		if (SAMPLERATE+0)>TYPE_PCM_MAX_RATE
(1)  121/     302 :                     			fatal "Invalid sample rate: SAMPLERATE. TYPE_PCM only supports sample rates <= 25100 Hz"
(1)  122/     302 :                     		endif
(1)  123/     302 :                     		dc.b	SAMPLEFLAGS+0							; $01	- flags (optional)
(1)  124/     302 :                     		dc.b	(SAMPLERATE+0)*256/TYPE_PCM_BASE_RATE	; $02	- pitch (optional for .WAV files)
(1)  125/     302 :                     		dc.b	0										; $03	- <RESERVED>
(1)  126/     302 :                     		dc.l	SAMPLEPTR								; $04	- start offset
(1)  127/     302 :                     		dc.l	SAMPLEPTR_End							; $08	- end offset
(1)  128/     302 :                     
(1)  129/     302 :                     	elseif SAMPLETYPE=TYPE_PCM_TURBO
(1)  130/     302 :                     		if ((SAMPLERATE+0)<>TYPE_PCM_TURBO_MAX_RATE)&((SAMPLERATE+0)<>0)
(1)  131/     302 :                     			fatal "Invalid sample rate: SAMPLERATE. TYPE_PCM_TURBO only supports sample rate of 32000 Hz"
(1)  132/     302 :                     		endif
(1)  133/     302 :                     		dc.b	SAMPLEFLAGS+0							; $01	- flags (optional)
(1)  134/     302 :                     		dc.b	$FF										; $02	- pitch (optional for .WAV files)
(1)  135/     302 :                     		dc.b	0										; $03	- <RESERVED>
(1)  136/     302 :                     		dc.l	SAMPLEPTR								; $04	- start offset
(1)  137/     302 :                     		dc.l	SAMPLEPTR_End							; $08	- end offset
(1)  138/     302 :                     
(1)  139/     302 :                     	elseif SAMPLETYPE=TYPE_DPCM
(1)  140/     302 :                     		if SAMPLERATE>TYPE_DPCM_MAX_RATE
(1)  141/     302 :                     			fatal "Invalid sample rate: SAMPLERATE. TYPE_DPCM only supports sample rates <= 20600 Hz"
(1)  142/     302 :                     		endif
(1)  143/     302 :                     		dc.b	SAMPLEFLAGS+0							; $01	- flags (optional)
(1)  144/     302 :                     		dc.b	(SAMPLERATE)*256/TYPE_DPCM_BASE_RATE	; $02	- pitch
(1)  145/     302 :                     		dc.b	0										; $03	- <RESERVED>
(1)  146/     302 :                     		dc.l	SAMPLEPTR								; $04	- start offset
(1)  147/     302 :                     		dc.l	SAMPLEPTR_End							; $08	- end offset
(1)  148/     302 :                     
(1)  149/     302 :                     	elseif SAMPLETYPE=TYPE_NONE
(1)  150/     302 :                     		dc.b	0, 0, 0
(1)  151/     302 :                     		dc.l	0, 0
(1)  152/     302 :                     
(1)  153/     302 :                     	else
(1)  154/     302 :                     		fatal "Unknown sample type. Please use one of: TYPE_PCM, TYPE_DPCM, TYPE_PCM_TURBO, TYPE_NONE"
(1)  155/     302 :                     	endif
(1)  156/     302 :                     	endm
(1)  157/     302 :                     
(1)  158/     302 :                     ; ------------------------------------------------------------------------------
(1)  159/     302 :                     ; Macro to include a sample file
(1)  160/     302 :                     ; ------------------------------------------------------------------------------
(1)  161/     302 :                     
(1)  162/     302 :                     incdac:	macro NAME, PATH
(1)  163/     302 :                     		even
(1)  164/     302 :                     	NAME:	label *
(1)  165/     302 :                     		binclude	PATH
(1)  166/     302 :                     	NAME_End:	label *
(1)  167/     302 :                     	endm
(1)  168/     302 :                     
(1)  169/     302 :                     ; ------------------------------------------------------------------------------
(1)  170/     302 :                     ; Macro to stop Z80 and take over its bus
(1)  171/     302 :                     ; ------------------------------------------------------------------------------
(1)  172/     302 :                     
(1)  173/     302 :                     MPCM_stopZ80:	macro OPBUSREQ
(1)  174/     302 :                     	if ARGCOUNT==1
(1)  175/     302 :                     		move.w	#$100, OPBUSREQ
(1)  176/     302 :                     		.wait:
(1)  177/     302 :                     			bset	#0, OPBUSREQ
(1)  178/     302 :                     			bne.s	.wait
(1)  179/     302 :                     	else
(1)  180/     302 :                     		move.w	#$100, MPCM_Z80_BUSREQ
(1)  181/     302 :                     		.wait:
(1)  182/     302 :                     			bset	#0, MPCM_Z80_BUSREQ
(1)  183/     302 :                     			bne.s	.wait
(1)  184/     302 :                     	endif
(1)  185/     302 :                     	endm
(1)  186/     302 :                     
(1)  187/     302 :                     ; ------------------------------------------------------------------------------
(1)  188/     302 :                     ; Macro to start Z80 and release its bus
(1)  189/     302 :                     ; ------------------------------------------------------------------------------
(1)  190/     302 :                     
(1)  191/     302 :                     MPCM_startZ80:	macro OPBUSREQ
(1)  192/     302 :                     	if ARGCOUNT==1
(1)  193/     302 :                     		move.w	#0, OPBUSREQ
(1)  194/     302 :                     	else
(1)  195/     302 :                     		move.w	#0, MPCM_Z80_BUSREQ
(1)  196/     302 :                     	endif
(1)  197/     302 :                     	endm
(1)  198/     302 :                     
(1)  199/     302 :                     ; ------------------------------------------------------------------------------
(1)  200/     302 :                     ; Ensures Mega PCM 2 isn't busy writing to YM (other than DAC output obviously)
(1)  201/     302 :                     ; ------------------------------------------------------------------------------
(1)  202/     302 :                     
(1)  203/     302 :                     MPCM_ensureYMWriteReady:	macro OPBUSREQ
(1)  204/     302 :                     	.chk_ready:
(1)  205/     302 :                     		tst.b	(MPCM_Z80_RAM+Z_MPCM_DriverReady).l
(1)  206/     302 :                     		bne.s	.ready
(1)  207/     302 :                     		MPCM_startZ80	OPBUSREQ
(1)  208/     302 :                     		move.w	d0, -(sp)
(1)  209/     302 :                     		moveq	#10, d0
(1)  210/     302 :                     		dbf		d0, *						; waste 100+ cycles
(1)  211/     302 :                     		move.w	(sp)+, d0
(1)  212/     302 :                     		MPCM_stopZ80	OPBUSREQ
(1)  213/     302 :                     		bra.s	.chk_ready
(1)  214/     302 :                     	.ready:
(1)  215/     302 :                     	endm
(1)  216/     302 :                     
(1)  217/     302 :                     ; ==============================================================================
(1)  218/     302 :                     ; ------------------------------------------------------------------------------
(1)  219/     302 :                     ; Mega PCM library blob
(1)  220/     302 :                     ; ------------------------------------------------------------------------------
(1)  221/     302 :                     
(1)  222/     302 :                     MegaPCMLibraryBlob:
(1)  223/     302 :                     
(1)  224/     302 : 40E7 46FC 2700      	dc.l	$40E746FC, $27002F0B, $47F900A1, $1100303C, $01003680, $37400100, $41FA0346, $43F900A0
              308 : 2F0B 47F9 00A1 
              30E : 1100 303C 0100 
              314 : 3680 3740 0100 
              31A : 41FA 0346 43F9 
              320 : 00A0             
(1)  225/     322 : 0000 323C 1975      	dc.l	$0000323C, $197512D8, $51C9FFFC, $72003741, $010041F9, $00A01FC3, $4E714E71, $37400100
              328 : 12D8 51C9 FFFC 
              32E : 7200 3741 0100 
              334 : 41F9 00A0 1FC3 
              33A : 4E71 4E71 3740 
              340 : 0100             
(1)  226/     342 : 3681 6016 36BC      	dc.l	$36816016, $36BC0100, $08130000, $66FA1210, $36BC0000, $0C010052, $670A303C, $0FFF51C8
              348 : 0100 0813 0000 
              34E : 66FA 1210 36BC 
              354 : 0000 0C01 0052 
              35A : 670A 303C 0FFF 
              360 : 51C8             
(1)  227/     362 : FFFE 60E0 265F      	dc.l	$FFFE60E0, $265F46DF, $4E7548E7, $3C3847F9, $00A11100, $43F900A0, $1976594F, $747E1A18
              368 : 46DF 4E75 48E7 
              36E : 3C38 47F9 00A1 
              374 : 1100 43F9 00A0 
              37A : 1976 594F 747E 
              380 : 1A18             
(1)  228/     382 : 6700 0174 6B00      	dc.l	$67000174, $6B000160, $18181618, $52482458, $28580C05, $00446700, $00F80C05, $00506708
              388 : 0160 1818 1618 
              38E : 5248 2458 2858 
              394 : 0C05 0044 6700 
              39A : 00F8 0C05 0050 
              3A0 : 6708             
(1)  229/     3A2 : 0C05 0054 6600      	dc.l	$0C050054, $66000184, $20120C80, $52494646, $67180C80, $41494646, $67000174, $0C804E49
              3A8 : 0184 2012 0C80 
              3AE : 5249 4646 6718 
              3B4 : 0C80 4149 4646 
              3BA : 6700 0174 0C80 
              3C0 : 4E49             
(1)  230/     3C2 : 5354 6600 00C4      	dc.l	$53546600, $00C46000, $01660CAA, $57415645, $00086600, $015A45EA, $000C0C92, $666D7420
              3C8 : 6000 0166 0CAA 
              3CE : 5741 5645 0008 
              3D4 : 6600 015A 45EA 
              3DA : 000C 0C92 666D 
              3E0 : 7420             
(1)  231/     3E2 : 6600 014C 0C6A      	dc.l	$6600014C, $0C6A0100, $00086700, $000C0C6A, $FEFF0008, $6600013C, $0C6A0100, $000A6600
              3E8 : 0100 0008 6700 
              3EE : 000C 0C6A FEFF 
              3F4 : 0008 6600 013C 
              3FA : 0C6A 0100 000A 
              400 : 6600             
(1)  232/     402 : 0136 0C6A 0800      	dc.l	$01360C6A, $08000016, $66000130, $4A036630, $1EAA000D, $1F6A000C, $00013017, $0C050054
              408 : 0016 6600 0130 
              40E : 4A03 6630 1EAA 
              414 : 000D 1F6A 000C 
              41A : 0001 3017 0C05 
              420 : 0054             
(1)  233/     422 : 660C 0C40 7D00      	dc.l	$660C0C40, $7D006600, $011676FF, $60120C40, $620C6200, $010A48C0, $E18880FC, $62781600
              428 : 6600 0116 76FF 
              42E : 6012 0C40 620C 
              434 : 6200 010A 48C0 
              43A : E188 80FC 6278 
              440 : 1600             
(1)  234/     442 : B5CC 6400 00FE      	dc.l	$B5CC6400, $00FE1EAA, $00071F6A, $00060001, $1F6A0005, $00021F6A, $00040003, $201745F2
              448 : 1EAA 0007 1F6A 
              44E : 0006 0001 1F6A 
              454 : 0005 0002 1F6A 
              45A : 0004 0003 2017 
              460 : 45F2             
(1)  235/     462 : 0808 0C92 6461      	dc.l	$08080C92, $64617461, $66D61EAA, $00071F6A, $00060001, $1F6A0005, $00021F6A, $00040003
              468 : 7461 66D6 1EAA 
              46E : 0007 1F6A 0006 
              474 : 0001 1F6A 0005 
              47A : 0002 1F6A 0004 
              480 : 0003             
(1)  236/     482 : 2017 49F2 0808      	dc.l	$201749F2, $0808504A, $300C0240, $000198C0, $4A036700, $00B2200A, $D0805240, $E2583E80
              488 : 504A 300C 0240 
              48E : 0001 98C0 4A03 
              494 : 6700 00B2 200A 
              49A : D080 5240 E258 
              4A0 : 3E80             
(1)  237/     4A2 : 4840 220C D281      	dc.l	$4840220C, $D2815241, $E2593F41, $00024841, $40E746FC, $270036BC, $01000813, $000066FA
              4A8 : 5241 E259 3F41 
              4AE : 0002 4841 40E7 
              4B4 : 46FC 2700 36BC 
              4BA : 0100 0813 0000 
              4C0 : 66FA             
(1)  238/     4C2 : 12C5 12C4 12C3      	dc.l	$12C512C4, $12C312C0, $12C112EF, $000312EF, $000212EF, $000512EF, $000436BC, $000046DF
              4C8 : 12C0 12C1 12EF 
              4CE : 0003 12EF 0002 
              4D4 : 12EF 0005 12EF 
              4DA : 0004 36BC 0000 
              4E0 : 46DF             
(1)  239/     4E2 : 51CA FE9C 6040      	dc.l	$51CAFE9C, $60405348, $700041E8, $FFF4584F, $4CDF1C3C, $4E7540E7, $46FC2700, $36BC0100
              4E8 : 5348 7000 41E8 
              4EE : FFF4 584F 4CDF 
              4F4 : 1C3C 4E75 40E7 
              4FA : 46FC 2700 36BC 
              500 : 0100             
(1)  240/     502 : 0813 0000 66FA      	dc.l	$08130000, $66FA12C5, $12C512C5, $12C512C5, $12C512C5, $12C512C5, $36BC0000, $46DF41E8
              508 : 12C5 12C5 12C5 
              50E : 12C5 12C5 12C5 
              514 : 12C5 12C5 12C5 
              51A : 36BC 0000 46DF 
              520 : 41E8             
(1)  241/     522 : 000B 51CA FE5A      	dc.l	$000B51CA, $FE5A7001, $60C07002, $60BC7020, $60B87021, $60B47022, $60B07023, $60AC7024
              528 : 7001 60C0 7002 
              52E : 60BC 7020 60B8 
              534 : 7021 60B4 7022 
              53A : 60B0 7023 60AC 
              540 : 7024             
(1)  242/     542 : 60A8 7025 60A4      	dc.l	$60A87025, $60A47010, $60A033FC, $010000A1, $11000839, $000000A1, $110066F6, $13C000A0
              548 : 7010 60A0 33FC 
              54E : 0100 00A1 1100 
              554 : 0839 0000 00A1 
              55A : 1100 66F6 13C0 
              560 : 00A0             
(1)  243/     562 : 1FC2 33FC 0000      	dc.l	$1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100, $08390000, $00A11100, $66F613FC
              568 : 00A1 1100 4E75 
              56E : 33FC 0100 00A1 
              574 : 1100 0839 0000 
              57A : 00A1 1100 66F6 
              580 : 13FC             
(1)  244/     582 : 0002 00A0 1FC2      	dc.l	$000200A0, $1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100, $08390000, $00A11100
              588 : 33FC 0000 00A1 
              58E : 1100 4E75 33FC 
              594 : 0100 00A1 1100 
              59A : 0839 0000 00A1 
              5A0 : 1100             
(1)  245/     5A2 : 66F6 13FC 0000      	dc.l	$66F613FC, $000000A0, $1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100, $08390000
              5A8 : 00A0 1FC2 33FC 
              5AE : 0000 00A1 1100 
              5B4 : 4E75 33FC 0100 
              5BA : 00A1 1100 0839 
              5C0 : 0000             
(1)  246/     5C2 : 00A1 1100 66F6      	dc.l	$00A11100, $66F613FC, $000100A0, $1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100
              5C8 : 13FC 0001 00A0 
              5CE : 1FC2 33FC 0000 
              5D4 : 00A1 1100 4E75 
              5DA : 33FC 0100 00A1 
              5E0 : 1100             
(1)  247/     5E2 : 0839 0000 00A1      	dc.l	$08390000, $00A11100, $66F613C0, $00A01FC4, $33FC0000, $00A11100, $4E7533FC, $010000A1
              5E8 : 1100 66F6 13C0 
              5EE : 00A0 1FC4 33FC 
              5F4 : 0000 00A1 1100 
              5FA : 4E75 33FC 0100 
              600 : 00A1             
(1)  248/     602 : 1100 0839 0000      	dc.l	$11000839, $000000A1, $110066F6, $13C000A0, $1FC533FC, $000000A1, $11004E75, $33FC0100
              608 : 00A1 1100 66F6 
              60E : 13C0 00A0 1FC5 
              614 : 33FC 0000 00A1 
              61A : 1100 4E75 33FC 
              620 : 0100             
(1)  249/     622 : 00A1 1100 0839      	dc.l	$00A11100, $08390000, $00A11100, $66F613C0, $00A01FC6, $33FC0000, $00A11100, $4E7533FC
              628 : 0000 00A1 1100 
              62E : 66F6 13C0 00A0 
              634 : 1FC6 33FC 0000 
              63A : 00A1 1100 4E75 
              640 : 33FC             
(1)  250/     642 : 0100 00A1 1100      	dc.l	$010000A1, $11000839, $000000A1, $110066F6, $13C000A0, $1FC733FC, $000000A1, $11004E75
              648 : 0839 0000 00A1 
              64E : 1100 66F6 13C0 
              654 : 00A0 1FC7 33FC 
              65A : 0000 00A1 1100 
              660 : 4E75             
(1)  251/     662 : F3ED 56C3 D118      	dc.l	$F3ED56C3, $D1180000, $FEFFC210, $00C90000, $320900E5, $21006077, $0F770F77, $0F770F77
              668 : 0000 FEFF C210 
              66E : 00C9 0000 3209 
              674 : 00E5 2100 6077 
              67A : 0F77 0F77 0F77 
              680 : 0F77             
(1)  252/     682 : 0F77 0F77 0F77      	dc.l	$0F770F77, $0F7775E1, $C94D6567, $6150434D, $20762E32, $2E300000, $C33B00F5, $3E0232E8
              688 : 75E1 C94D 6567 
              68E : 6150 434D 2076 
              694 : 2E32 2E30 0000 
              69A : C33B 00F5 3E02 
              6A0 : 32E8             
(1)  253/     6A2 : 1FF1 C9F3 3E10      	dc.l	$1FF1C9F3, $3E1032DD, $1F214301, $223900ED, $73DE1FDD, $F933F1C1, $E1D131DD, $1FF508CB
              6A8 : 32DD 1F21 4301 
              6AE : 2239 00ED 73DE 
              6B4 : 1FDD F933 F1C1 
              6BA : E1D1 31DD 1FF5 
              6C0 : 08CB             
(1)  254/     6C2 : FCCB 85E5 7AE6      	dc.l	$FCCB85E5, $7AE67F57, $CB83B320, $03051680, $D578B920, $0BDA6919, $CBBCEBED, $52C38700
              6C8 : 7F57 CB83 B320 
              6CE : 0305 1680 D578 
              6D4 : B920 0BDA 6919 
              6DA : CBBC EBED 52C3 
              6E0 : 8700             
(1)  255/     6E2 : AF95 5F9C 8557      	dc.l	$AF955F9C, $8557EBE5, $C521C41F, $0830012C, $E5ED7BDE, $1FDD21D1, $1F3AD31F, $CFF32AD9
              6E8 : EBE5 C521 C41F 
              6EE : 0830 012C E5ED 
              6F4 : 7BDE 1FDD 21D1 
              6FA : 1F3A D31F CFF3 
              700 : 2AD9             
(1)  256/     702 : 1FED 4BD5 1F11      	dc.l	$1FED4BD5, $1F110003, $D908AF08, $ED4BD11F, $0AE60FC6, $04473ADC, $1FFD6F21, $00031101
              708 : 0003 D908 AF08 
              70E : ED4B D11F 0AE6 
              714 : 0FC6 0447 3ADC 
              71A : 1FFD 6F21 0003 
              720 : 1101             
(1)  257/     722 : 40D9 FB00 3E00      	dc.l	$40D9FB00, $3E00F3ED, $A0EDA016, $03E2EE00, $D94E0A12, $08FD8530, $012C087D, $D9FB9392
              728 : F3ED A0ED A016 
              72E : 03E2 EE00 D94E 
              734 : 0A12 08FD 8530 
              73A : 012C 087D D9FB 
              740 : 9392             
(1)  258/     742 : D2C6 00F5 3E00      	dc.l	$D2C600F5, $3E000000, $0000F1F3, $18E2FB3A, $0900DDBE, $032025F3, $7BD9BD28, $154E0A12
              748 : 0000 0000 F1F3 
              74E : 18E2 FB3A 0900 
              754 : DDBE 0320 25F3 
              75A : 7BD9 BD28 154E 
              760 : 0A12             
(1)  259/     762 : 08FD 8530 012C      	dc.l	$08FD8530, $012C08D9, $FBC50303, $030303C1, $18E5D9FB, $DDCB0A4E, $C29900C9, $3A09003C
              768 : 08D9 FBC5 0303 
              76E : 0303 03C1 18E5 
              774 : D9FB DDCB 0A4E 
              77A : C299 00C9 3A09 
              780 : 003C             
(1)  260/     782 : 2100 8044 DDBE      	dc.l	$21008044, $DDBE0320, $04ED4BD7, $1FD7C3C6, $0021E100, $36C42336, $00C9D900, $030B030B
              788 : 0320 04ED 4BD7 
              78E : 1FD7 C3C6 0021 
              794 : E100 36C4 2336 
              79A : 00C9 D900 030B 
              7A0 : 030B             
(1)  261/     7A2 : 0018 14F5 C506      	dc.l	$001814F5, $C5068E7B, $D9BD28EE, $4E0A1208, $FD853001, $2C08D93E, $FF32E21F, $E52329E1
              7A8 : 8E7B D9BD 28EE 
              7AE : 4E0A 1208 FD85 
              7B4 : 3001 2C08 D93E 
              7BA : FF32 E21F E523 
              7C0 : 29E1             
(1)  262/     7C2 : 10E5 7BD9 BD28      	dc.l	$10E57BD9, $BD280A4E, $0A1208FD, $8530012C, $08D9D9ED, $4BD11F0A, $E60FC604, $47D9007B
              7C8 : 0A4E 0A12 08FD 
              7CE : 8530 012C 08D9 
              7D4 : D9ED 4BD1 1F0A 
              7DA : E60F C604 47D9 
              7E0 : 007B             
(1)  263/     7E2 : D9BD 280A 4E0A      	dc.l	$D9BD280A, $4E0A1208, $FD853001, $2C08D93A, $DC1FFD6F, $3AC21FB7, $280EF2BF, $01DDCB0A
              7E8 : 1208 FD85 3001 
              7EE : 2C08 D93A DC1F 
              7F4 : FD6F 3AC2 1FB7 
              7FA : 280E F2BF 01DD 
              800 : CB0A             
(1)  264/     802 : 46CA F118 AF32      	dc.l	$46CAF118, $AF32C21F, $32E21F7B, $D9BD280A, $4E0A1208, $FD853001, $2C08D9C1, $F1FBC93D
              808 : C21F 32E2 1F7B 
              80E : D9BD 280A 4E0A 
              814 : 1208 FD85 3001 
              81A : 2C08 D9C1 F1FB 
              820 : C93D             
(1)  265/     822 : CA69 193D 2005      	dc.l	$CA69193D, $2005FD2E, $0018DD3E, $8032E81F, $18D2F33E, $1832DD1F, $21A00222, $3900ED73
              828 : FD2E 0018 DD3E 
              82E : 8032 E81F 18D2 
              834 : F33E 1832 DD1F 
              83A : 21A0 0222 3900 
              840 : ED73             
(1)  266/     842 : DE1F DDF9 33F1      	dc.l	$DE1FDDF9, $33F1C1E1, $D131DD1F, $F5CBFCCB, $85E57AE6, $7F57CB83, $B3200305, $1680D578
              848 : C1E1 D131 DD1F 
              84E : F5CB FCCB 85E5 
              854 : 7AE6 7F57 CB83 
              85A : B320 0305 1680 
              860 : D578             
(1)  267/     862 : B920 0BDA 6919      	dc.l	$B9200BDA, $6919CBBC, $EBED52C3, $1502AF95, $5F9C8557, $EBE5C5ED, $7BDE1FDD, $21D11F3A
              868 : CBBC EBED 52C3 
              86E : 1502 AF95 5F9C 
              874 : 8557 EBE5 C5ED 
              87A : 7BDE 1FDD 21D1 
              880 : 1F3A             
(1)  268/     882 : D31F CFF3 1100      	dc.l	$D31FCFF3, $1100032A, $D91FED4B, $D51FD921, $00031101, $40D93E00, $F3EDA0ED, $A01603E2
              888 : 032A D91F ED4B 
              88E : D51F D921 0003 
              894 : 1101 40D9 3E00 
              89A : F3ED A0ED A016 
              8A0 : 03E2             
(1)  269/     8A2 : 5602 D97E 122C      	dc.l	$5602D97E, $122C7DD9, $FB9392D2, $3802E523, $2309E1F3, $18ECFB3A, $0900DDBE, $03201DF3
              8A8 : 7DD9 FB93 92D2 
              8AE : 3802 E523 2309 
              8B4 : E1F3 18EC FB3A 
              8BA : 0900 DDBE 0320 
              8C0 : 1DF3             
(1)  270/     8C2 : 7BD9 BD28 0D7E      	dc.l	$7BD9BD28, $0D7E122C, $D9FBE5C5, $09C1E1C3, $5F02D9FB, $DDCB0A4E, $C21F02C9, $3A09003C
              8C8 : 122C D9FB E5C5 
              8CE : 09C1 E1C3 5F02 
              8D4 : D9FB DDCB 0A4E 
              8DA : C21F 02C9 3A09 
              8E0 : 003C             
(1)  271/     8E2 : 2100 8044 DDBE      	dc.l	$21008044, $DDBE0320, $04ED4BD7, $1FD7C338, $02214C02, $36362336, $02C9D93E, $00C3AD02
              8E8 : 0320 04ED 4BD7 
              8EE : 1FD7 C338 0221 
              8F4 : 4C02 3636 2336 
              8FA : 02C9 D93E 00C3 
              900 : AD02             
(1)  272/     902 : F5C5 06BF 7BD9      	dc.l	$F5C506BF, $7BD9BD28, $F17E122C, $D93EFF32, $E21F3E00, $C5010000, $C110E900, $7BD9BD28
              908 : BD28 F17E 122C 
              90E : D93E FF32 E21F 
              914 : 3E00 C501 0000 
              91A : C110 E900 7BD9 
              920 : BD28             
(1)  273/     922 : 037E 122C D93A      	dc.l	$037E122C, $D93AC21F, $B7280EF2, $E002DDCB, $0A46CAF1, $18AF32C2, $1F32E21F, $C1F1FBC9
              928 : C21F B728 0EF2 
              92E : E002 DDCB 0A46 
              934 : CAF1 18AF 32C2 
              93A : 1F32 E21F C1F1 
              940 : FBC9             
(1)  274/     942 : 3DCA 6919 3D20      	dc.l	$3DCA6919, $3D2006CD, $5C18AF18, $EC3E8032, $E81F18E1, $00000000, $00000000, $00000000
              948 : 06CD 5C18 AF18 
              94E : EC3E 8032 E81F 
              954 : 18E1 0000 0000 
              95A : 0000 0000 0000 
              960 : 0000             
(1)  275/     962 : 0000 0000 0000      	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
              968 : 0000 0000 0000 
              96E : 0000 0000 0000 
              974 : 0000 0000 0000 
              97A : 0000 0000 0000 
              980 : 0000             
(1)  276/     982 : 0000 0000 0000      	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
              988 : 0000 0000 0000 
              98E : 0000 0000 0000 
              994 : 0000 0000 0000 
              99A : 0000 0000 0000 
              9A0 : 0000             
(1)  277/     9A2 : 0000 0000 0000      	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
              9A8 : 0000 0000 0000 
              9AE : 0000 0000 0000 
              9B4 : 0000 0000 0000 
              9BA : 0000 0000 0000 
              9C0 : 0000             
(1)  278/     9C2 : 0000 0000 0000      	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
              9C8 : 0000 0000 0000 
              9CE : 0000 0000 0000 
              9D4 : 0000 0000 0000 
              9DA : 0000 0000 0000 
              9E0 : 0000             
(1)  279/     9E2 : 0000 0000 0000      	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
              9E8 : 0000 0000 0000 
              9EE : 0000 0000 0000 
              9F4 : 0000 0000 0000 
              9FA : 0000 0000 0000 
              A00 : 0000             
(1)  280/     A02 : 0000 0000 0000      	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
              A08 : 0000 0000 0000 
              A0E : 0000 0000 0000 
              A14 : 0000 0000 0000 
              A1A : 0000 0000 0000 
              A20 : 0000             
(1)  281/     A22 : 0000 0000 0000      	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
              A28 : 0000 0000 0000 
              A2E : 0000 0000 0000 
              A34 : 0000 0000 0000 
              A3A : 0000 0000 0000 
              A40 : 0000             
(1)  282/     A42 : 0000 0000 0000      	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
              A48 : 0000 0000 0000 
              A4E : 0000 0000 0000 
              A54 : 0000 0000 0000 
              A5A : 0000 0000 0000 
              A60 : 0000             
(1)  283/     A62 : 0001 0203 0405      	dc.l	$00010203, $04050607, $08090A0B, $0C0D0E0F, $10111213, $14151617, $18191A1B, $1C1D1E1F
              A68 : 0607 0809 0A0B 
              A6E : 0C0D 0E0F 1011 
              A74 : 1213 1415 1617 
              A7A : 1819 1A1B 1C1D 
              A80 : 1E1F             
(1)  284/     A82 : 2021 2223 2425      	dc.l	$20212223, $24252627, $28292A2B, $2C2D2E2F, $30313233, $34353637, $38393A3B, $3C3D3E3F
              A88 : 2627 2829 2A2B 
              A8E : 2C2D 2E2F 3031 
              A94 : 3233 3435 3637 
              A9A : 3839 3A3B 3C3D 
              AA0 : 3E3F             
(1)  285/     AA2 : 4041 4243 4445      	dc.l	$40414243, $44454647, $48494A4B, $4C4D4E4F, $50515253, $54555657, $58595A5B, $5C5D5E5F
              AA8 : 4647 4849 4A4B 
              AAE : 4C4D 4E4F 5051 
              AB4 : 5253 5455 5657 
              ABA : 5859 5A5B 5C5D 
              AC0 : 5E5F             
(1)  286/     AC2 : 6061 6263 6465      	dc.l	$60616263, $64656667, $68696A6B, $6C6D6E6F, $70717273, $74757677, $78797A7B, $7C7D7E7F
              AC8 : 6667 6869 6A6B 
              ACE : 6C6D 6E6F 7071 
              AD4 : 7273 7475 7677 
              ADA : 7879 7A7B 7C7D 
              AE0 : 7E7F             
(1)  287/     AE2 : 8081 8283 8485      	dc.l	$80818283, $84858687, $88898A8B, $8C8D8E8F, $90919293, $94959697, $98999A9B, $9C9D9E9F
              AE8 : 8687 8889 8A8B 
              AEE : 8C8D 8E8F 9091 
              AF4 : 9293 9495 9697 
              AFA : 9899 9A9B 9C9D 
              B00 : 9E9F             
(1)  288/     B02 : A0A1 A2A3 A4A5      	dc.l	$A0A1A2A3, $A4A5A6A7, $A8A9AAAB, $ACADAEAF, $B0B1B2B3, $B4B5B6B7, $B8B9BABB, $BCBDBEBF
              B08 : A6A7 A8A9 AAAB 
              B0E : ACAD AEAF B0B1 
              B14 : B2B3 B4B5 B6B7 
              B1A : B8B9 BABB BCBD 
              B20 : BEBF             
(1)  289/     B22 : C0C1 C2C3 C4C5      	dc.l	$C0C1C2C3, $C4C5C6C7, $C8C9CACB, $CCCDCECF, $D0D1D2D3, $D4D5D6D7, $D8D9DADB, $DCDDDEDF
              B28 : C6C7 C8C9 CACB 
              B2E : CCCD CECF D0D1 
              B34 : D2D3 D4D5 D6D7 
              B3A : D8D9 DADB DCDD 
              B40 : DEDF             
(1)  290/     B42 : E0E1 E2E3 E4E5      	dc.l	$E0E1E2E3, $E4E5E6E7, $E8E9EAEB, $ECEDEEEF, $F0F1F2F3, $F4F5F6F7, $F8F9FAFB, $FCFDFEFF
              B48 : E6E7 E8E9 EAEB 
              B4E : ECED EEEF F0F1 
              B54 : F2F3 F4F5 F6F7 
              B5A : F8F9 FAFB FCFD 
              B60 : FEFF             
(1)  291/     B62 : 0809 0A0B 0C0D      	dc.l	$08090A0B, $0C0D0E0F, $10101112, $13141516, $1718191A, $1B1C1D1E, $1E1F2021, $22232425
              B68 : 0E0F 1010 1112 
              B6E : 1314 1516 1718 
              B74 : 191A 1B1C 1D1E 
              B7A : 1E1F 2021 2223 
              B80 : 2425             
(1)  292/     B82 : 2627 2829 2A2B      	dc.l	$26272829, $2A2B2C2C, $2D2E2F30, $31323334, $35363738, $393A3A3B, $3C3D3E3F, $40414243
              B88 : 2C2C 2D2E 2F30 
              B8E : 3132 3334 3536 
              B94 : 3738 393A 3A3B 
              B9A : 3C3D 3E3F 4041 
              BA0 : 4243             
(1)  293/     BA2 : 4445 4647 4848      	dc.l	$44454647, $4848494A, $4B4C4D4E, $4F505152, $53545556, $56575859, $5A5B5C5D, $5E5F6061
              BA8 : 494A 4B4C 4D4E 
              BAE : 4F50 5152 5354 
              BB4 : 5556 5657 5859 
              BBA : 5A5B 5C5D 5E5F 
              BC0 : 6061             
(1)  294/     BC2 : 6263 6464 6566      	dc.l	$62636464, $65666768, $696A6B6C, $6D6E6F70, $71727273, $74757677, $78797A7B, $7C7D7E7F
              BC8 : 6768 696A 6B6C 
              BCE : 6D6E 6F70 7172 
              BD4 : 7273 7475 7677 
              BDA : 7879 7A7B 7C7D 
              BE0 : 7E7F             
(1)  295/     BE2 : 8080 8182 8384      	dc.l	$80808182, $83848586, $8788898A, $8B8C8D8E, $8E8F9091, $92939495, $96979899, $9A9B9C9C
              BE8 : 8586 8788 898A 
              BEE : 8B8C 8D8E 8E8F 
              BF4 : 9091 9293 9495 
              BFA : 9697 9899 9A9B 
              C00 : 9C9C             
(1)  296/     C02 : 9D9E 9FA0 A1A2      	dc.l	$9D9E9FA0, $A1A2A3A4, $A5A6A7A8, $A9AAAAAB, $ACADAEAF, $B0B1B2B3, $B4B5B6B7, $B8B8B9BA
              C08 : A3A4 A5A6 A7A8 
              C0E : A9AA AAAB ACAD 
              C14 : AEAF B0B1 B2B3 
              C1A : B4B5 B6B7 B8B8 
              C20 : B9BA             
(1)  297/     C22 : BBBC BDBE BFC0      	dc.l	$BBBCBDBE, $BFC0C1C2, $C3C4C5C6, $C6C7C8C9, $CACBCCCD, $CECFD0D1, $D2D3D4D4, $D5D6D7D8
              C28 : C1C2 C3C4 C5C6 
              C2E : C6C7 C8C9 CACB 
              C34 : CCCD CECF D0D1 
              C3A : D2D3 D4D4 D5D6 
              C40 : D7D8             
(1)  298/     C42 : D9DA DBDC DDDE      	dc.l	$D9DADBDC, $DDDEDFE0, $E1E2E2E3, $E4E5E6E7, $E8E9EAEB, $ECEDEEEF, $F0F0F1F2, $F3F4F5F6
              C48 : DFE0 E1E2 E2E3 
              C4E : E4E5 E6E7 E8E9 
              C54 : EAEB ECED EEEF 
              C5A : F0F0 F1F2 F3F4 
              C60 : F5F6             
(1)  299/     C62 : 1111 1213 1415      	dc.l	$11111213, $14151617, $1818191A, $1B1C1D1E, $1E1F2021, $22232425, $25262728, $292A2B2B
              C68 : 1617 1818 191A 
              C6E : 1B1C 1D1E 1E1F 
              C74 : 2021 2223 2425 
              C7A : 2526 2728 292A 
              C80 : 2B2B             
(1)  300/     C82 : 2C2D 2E2F 3031      	dc.l	$2C2D2E2F, $30313232, $33343536, $37383839, $3A3B3C3D, $3E3F3F40, $41424344, $45454647
              C88 : 3232 3334 3536 
              C8E : 3738 3839 3A3B 
              C94 : 3C3D 3E3F 3F40 
              C9A : 4142 4344 4545 
              CA0 : 4647             
(1)  301/     CA2 : 4849 4A4B 4C4C      	dc.l	$48494A4B, $4C4C4D4E, $4F505152, $52535455, $56575859, $595A5B5C, $5D5E5F5F, $60616263
              CA8 : 4D4E 4F50 5152 
              CAE : 5253 5455 5657 
              CB4 : 5859 595A 5B5C 
              CBA : 5D5E 5F5F 6061 
              CC0 : 6263             
(1)  302/     CC2 : 6465 6666 6768      	dc.l	$64656666, $6768696A, $6B6C6C6D, $6E6F7071, $72737374, $75767778, $79797A7B, $7C7D7E7F
              CC8 : 696A 6B6C 6C6D 
              CCE : 6E6F 7071 7273 
              CD4 : 7374 7576 7778 
              CDA : 7979 7A7B 7C7D 
              CE0 : 7E7F             
(1)  303/     CE2 : 8080 8182 8384      	dc.l	$80808182, $83848586, $86878889, $8A8B8C8D, $8D8E8F90, $91929393, $94959697, $98999A9A
              CE8 : 8586 8687 8889 
              CEE : 8A8B 8C8D 8D8E 
              CF4 : 8F90 9192 9393 
              CFA : 9495 9697 9899 
              D00 : 9A9A             
(1)  304/     D02 : 9B9C 9D9E 9FA0      	dc.l	$9B9C9D9E, $9FA0A0A1, $A2A3A4A5, $A6A7A7A8, $A9AAABAC, $ADADAEAF, $B0B1B2B3, $B4B4B5B6
              D08 : A0A1 A2A3 A4A5 
              D0E : A6A7 A7A8 A9AA 
              D14 : ABAC ADAD AEAF 
              D1A : B0B1 B2B3 B4B4 
              D20 : B5B6             
(1)  305/     D22 : B7B8 B9BA BABB      	dc.l	$B7B8B9BA, $BABBBCBD, $BEBFC0C1, $C1C2C3C4, $C5C6C7C7, $C8C9CACB, $CCCDCECE, $CFD0D1D2
              D28 : BCBD BEBF C0C1 
              D2E : C1C2 C3C4 C5C6 
              D34 : C7C7 C8C9 CACB 
              D3A : CCCD CECE CFD0 
              D40 : D1D2             
(1)  306/     D42 : D3D4 D4D5 D6D7      	dc.l	$D3D4D4D5, $D6D7D8D9, $DADBDBDC, $DDDEDFE0, $E1E1E2E3, $E4E5E6E7, $E8E8E9EA, $EBECEDEE
              D48 : D8D9 DADB DBDC 
              D4E : DDDE DFE0 E1E1 
              D54 : E2E3 E4E5 E6E7 
              D5A : E8E8 E9EA EBEC 
              D60 : EDEE             
(1)  307/     D62 : 191A 1B1C 1C1D      	dc.l	$191A1B1C, $1C1D1E1F, $20202122, $23242425, $26272828, $292A2B2C, $2C2D2E2F, $30303132
              D68 : 1E1F 2020 2122 
              D6E : 2324 2425 2627 
              D74 : 2828 292A 2B2C 
              D7A : 2C2D 2E2F 3030 
              D80 : 3132             
(1)  308/     D82 : 3334 3435 3637      	dc.l	$33343435, $36373838, $393A3B3C, $3C3D3E3F, $40404142, $43444445, $46474848, $494A4B4C
              D88 : 3838 393A 3B3C 
              D8E : 3C3D 3E3F 4040 
              D94 : 4142 4344 4445 
              D9A : 4647 4848 494A 
              DA0 : 4B4C             
(1)  309/     DA2 : 4C4D 4E4F 5050      	dc.l	$4C4D4E4F, $50505152, $53545455, $56575858, $595A5B5C, $5C5D5E5F, $60606162, $63646465
              DA8 : 5152 5354 5455 
              DAE : 5657 5858 595A 
              DB4 : 5B5C 5C5D 5E5F 
              DBA : 6060 6162 6364 
              DC0 : 6465             
(1)  310/     DC2 : 6667 6868 696A      	dc.l	$66676868, $696A6B6C, $6C6D6E6F, $70707172, $73747475, $76777878, $797A7B7C, $7C7D7E7F
              DC8 : 6B6C 6C6D 6E6F 
              DCE : 7070 7172 7374 
              DD4 : 7475 7677 7878 
              DDA : 797A 7B7C 7C7D 
              DE0 : 7E7F             
(1)  311/     DE2 : 8080 8182 8384      	dc.l	$80808182, $83848485, $86878888, $898A8B8C, $8C8D8E8F, $90909192, $93949495, $96979898
              DE8 : 8485 8687 8888 
              DEE : 898A 8B8C 8C8D 
              DF4 : 8E8F 9090 9192 
              DFA : 9394 9495 9697 
              E00 : 9898             
(1)  312/     E02 : 999A 9B9C 9C9D      	dc.l	$999A9B9C, $9C9D9E9F, $A0A0A1A2, $A3A4A4A5, $A6A7A8A8, $A9AAABAC, $ACADAEAF, $B0B0B1B2
              E08 : 9E9F A0A0 A1A2 
              E0E : A3A4 A4A5 A6A7 
              E14 : A8A8 A9AA ABAC 
              E1A : ACAD AEAF B0B0 
              E20 : B1B2             
(1)  313/     E22 : B3B4 B4B5 B6B7      	dc.l	$B3B4B4B5, $B6B7B8B8, $B9BABBBC, $BCBDBEBF, $C0C0C1C2, $C3C4C4C5, $C6C7C8C8, $C9CACBCC
              E28 : B8B8 B9BA BBBC 
              E2E : BCBD BEBF C0C0 
              E34 : C1C2 C3C4 C4C5 
              E3A : C6C7 C8C8 C9CA 
              E40 : CBCC             
(1)  314/     E42 : CCCD CECF D0D0      	dc.l	$CCCDCECF, $D0D0D1D2, $D3D4D4D5, $D6D7D8D8, $D9DADBDC, $DCDDDEDF, $E0E0E1E2, $E3E4E4E5
              E48 : D1D2 D3D4 D4D5 
              E4E : D6D7 D8D8 D9DA 
              E54 : DBDC DCDD DEDF 
              E5A : E0E0 E1E2 E3E4 
              E60 : E4E5             
(1)  315/     E62 : 2222 2324 2525      	dc.l	$22222324, $25252627, $2828292A, $2A2B2C2D, $2D2E2F30, $30313233, $33343535, $36373838
              E68 : 2627 2828 292A 
              E6E : 2A2B 2C2D 2D2E 
              E74 : 2F30 3031 3233 
              E7A : 3334 3535 3637 
              E80 : 3838             
(1)  316/     E82 : 393A 3B3B 3C3D      	dc.l	$393A3B3B, $3C3D3E3E, $3F404041, $42434344, $45464647, $4849494A, $4B4B4C4D, $4E4E4F50
              E88 : 3E3E 3F40 4041 
              E8E : 4243 4344 4546 
              E94 : 4647 4849 494A 
              E9A : 4B4B 4C4D 4E4E 
              EA0 : 4F50             
(1)  317/     EA2 : 5151 5253 5454      	dc.l	$51515253, $54545556, $56575859, $595A5B5C, $5C5D5E5F, $5F606161, $62636464, $65666767
              EA8 : 5556 5657 5859 
              EAE : 595A 5B5C 5C5D 
              EB4 : 5E5F 5F60 6161 
              EBA : 6263 6464 6566 
              EC0 : 6767             
(1)  318/     EC2 : 6869 6A6A 6B6C      	dc.l	$68696A6A, $6B6C6C6D, $6E6F6F70, $71727273, $74757576, $77777879, $7A7A7B7C, $7D7D7E7F
              EC8 : 6C6D 6E6F 6F70 
              ECE : 7172 7273 7475 
              ED4 : 7576 7777 7879 
              EDA : 7A7A 7B7C 7D7D 
              EE0 : 7E7F             
(1)  319/     EE2 : 8080 8182 8283      	dc.l	$80808182, $82838485, $85868788, $88898A8B, $8B8C8D8D, $8E8F9090, $91929393, $94959696
              EE8 : 8485 8586 8788 
              EEE : 8889 8A8B 8B8C 
              EF4 : 8D8D 8E8F 9090 
              EFA : 9192 9393 9495 
              F00 : 9696             
(1)  320/     F02 : 9798 9899 9A9B      	dc.l	$97989899, $9A9B9B9C, $9D9E9E9F, $A0A1A1A2, $A3A3A4A5, $A6A6A7A8, $A9A9AAAB, $ACACADAE
              F08 : 9B9C 9D9E 9E9F 
              F0E : A0A1 A1A2 A3A3 
              F14 : A4A5 A6A6 A7A8 
              F1A : A9A9 AAAB ACAC 
              F20 : ADAE             
(1)  321/     F22 : AEAF B0B1 B1B2      	dc.l	$AEAFB0B1, $B1B2B3B4, $B4B5B6B7, $B7B8B9B9, $BABBBCBC, $BDBEBFBF, $C0C1C2C2, $C3C4C4C5
              F28 : B3B4 B4B5 B6B7 
              F2E : B7B8 B9B9 BABB 
              F34 : BCBC BDBE BFBF 
              F3A : C0C1 C2C2 C3C4 
              F40 : C4C5             
(1)  322/     F42 : C6C7 C7C8 C9CA      	dc.l	$C6C7C7C8, $C9CACACB, $CCCDCDCE, $CFCFD0D1, $D2D2D3D4, $D5D5D6D7, $D8D8D9DA, $DADBDCDD
              F48 : CACB CCCD CDCE 
              F4E : CFCF D0D1 D2D2 
              F54 : D3D4 D5D5 D6D7 
              F5A : D8D8 D9DA DADB 
              F60 : DCDD             
(1)  323/     F62 : 2A2B 2C2C 2D2E      	dc.l	$2A2B2C2C, $2D2E2E2F, $30303132, $32333434, $35363637, $3838393A, $3A3B3C3C, $3D3E3E3F
              F68 : 2E2F 3030 3132 
              F6E : 3233 3434 3536 
              F74 : 3637 3838 393A 
              F7A : 3A3B 3C3C 3D3E 
              F80 : 3E3F             
(1)  324/     F82 : 4040 4142 4243      	dc.l	$40404142, $42434444, $45464647, $4848494A, $4A4B4C4C, $4D4E4E4F, $50505152, $52535454
              F88 : 4444 4546 4647 
              F8E : 4848 494A 4A4B 
              F94 : 4C4C 4D4E 4E4F 
              F9A : 5050 5152 5253 
              FA0 : 5454             
(1)  325/     FA2 : 5556 5657 5858      	dc.l	$55565657, $5858595A, $5A5B5C5C, $5D5E5E5F, $60606162, $62636464, $65666667, $6868696A
              FA8 : 595A 5A5B 5C5C 
              FAE : 5D5E 5E5F 6060 
              FB4 : 6162 6263 6464 
              FBA : 6566 6667 6868 
              FC0 : 696A             
(1)  326/     FC2 : 6A6B 6C6C 6D6E      	dc.l	$6A6B6C6C, $6D6E6E6F, $70707172, $72737474, $75767677, $7878797A, $7A7B7C7C, $7D7E7E7F
              FC8 : 6E6F 7070 7172 
              FCE : 7273 7474 7576 
              FD4 : 7677 7878 797A 
              FDA : 7A7B 7C7C 7D7E 
              FE0 : 7E7F             
(1)  327/     FE2 : 8080 8182 8283      	dc.l	$80808182, $82838484, $85868687, $8888898A, $8A8B8C8C, $8D8E8E8F, $90909192, $92939494
              FE8 : 8484 8586 8687 
              FEE : 8888 898A 8A8B 
              FF4 : 8C8C 8D8E 8E8F 
              FFA : 9090 9192 9293 
             1000 : 9494             
(1)  328/    1002 : 9596 9697 9898      	dc.l	$95969697, $9898999A, $9A9B9C9C, $9D9E9E9F, $A0A0A1A2, $A2A3A4A4, $A5A6A6A7, $A8A8A9AA
             1008 : 999A 9A9B 9C9C 
             100E : 9D9E 9E9F A0A0 
             1014 : A1A2 A2A3 A4A4 
             101A : A5A6 A6A7 A8A8 
             1020 : A9AA             
(1)  329/    1022 : AAAB ACAC ADAE      	dc.l	$AAABACAC, $ADAEAEAF, $B0B0B1B2, $B2B3B4B4, $B5B6B6B7, $B8B8B9BA, $BABBBCBC, $BDBEBEBF
             1028 : AEAF B0B0 B1B2 
             102E : B2B3 B4B4 B5B6 
             1034 : B6B7 B8B8 B9BA 
             103A : BABB BCBC BDBE 
             1040 : BEBF             
(1)  330/    1042 : C0C0 C1C2 C2C3      	dc.l	$C0C0C1C2, $C2C3C4C4, $C5C6C6C7, $C8C8C9CA, $CACBCCCC, $CDCECECF, $D0D0D1D2, $D2D3D4D4
             1048 : C4C4 C5C6 C6C7 
             104E : C8C8 C9CA CACB 
             1054 : CCCC CDCE CECF 
             105A : D0D0 D1D2 D2D3 
             1060 : D4D4             
(1)  331/    1062 : 3333 3435 3536      	dc.l	$33333435, $35363637, $38383939, $3A3B3B3C, $3C3D3E3E, $3F3F4041, $41424243, $44444545
             1068 : 3637 3838 3939 
             106E : 3A3B 3B3C 3C3D 
             1074 : 3E3E 3F3F 4041 
             107A : 4142 4243 4444 
             1080 : 4545             
(1)  332/    1082 : 4647 4748 4849      	dc.l	$46474748, $48494A4A, $4B4B4C4D, $4D4E4E4F, $50505151, $52535354, $54555656, $57575859
             1088 : 4A4A 4B4B 4C4D 
             108E : 4D4E 4E4F 5050 
             1094 : 5151 5253 5354 
             109A : 5455 5656 5757 
             10A0 : 5859             
(1)  333/    10A2 : 595A 5A5B 5C5C      	dc.l	$595A5A5B, $5C5C5D5D, $5E5F5F60, $60616262, $63636465, $65666667, $68686969, $6A6B6B6C
             10A8 : 5D5D 5E5F 5F60 
             10AE : 6061 6262 6363 
             10B4 : 6465 6566 6667 
             10BA : 6868 6969 6A6B 
             10C0 : 6B6C             
(1)  334/    10C2 : 6C6D 6E6E 6F6F      	dc.l	$6C6D6E6E, $6F6F7071, $71727273, $74747575, $76777778, $78797A7A, $7B7B7C7D, $7D7E7E7F
             10C8 : 7071 7172 7273 
             10CE : 7474 7575 7677 
             10D4 : 7778 7879 7A7A 
             10DA : 7B7B 7C7D 7D7E 
             10E0 : 7E7F             
(1)  335/    10E2 : 8080 8181 8283      	dc.l	$80808181, $82838384, $84858686, $87878889, $898A8A8B, $8C8C8D8D, $8E8F8F90, $90919292
             10E8 : 8384 8485 8686 
             10EE : 8787 8889 898A 
             10F4 : 8A8B 8C8C 8D8D 
             10FA : 8E8F 8F90 9091 
             1100 : 9292             
(1)  336/    1102 : 9393 9495 9596      	dc.l	$93939495, $95969697, $98989999, $9A9B9B9C, $9C9D9E9E, $9F9FA0A1, $A1A2A2A3, $A4A4A5A5
             1108 : 9697 9898 9999 
             110E : 9A9B 9B9C 9C9D 
             1114 : 9E9E 9F9F A0A1 
             111A : A1A2 A2A3 A4A4 
             1120 : A5A5             
(1)  337/    1122 : A6A7 A7A8 A8A9      	dc.l	$A6A7A7A8, $A8A9AAAA, $ABABACAD, $ADAEAEAF, $B0B0B1B1, $B2B3B3B4, $B4B5B6B6, $B7B7B8B9
             1128 : AAAA ABAB ACAD 
             112E : ADAE AEAF B0B0 
             1134 : B1B1 B2B3 B3B4 
             113A : B4B5 B6B6 B7B7 
             1140 : B8B9             
(1)  338/    1142 : B9BA BABB BCBC      	dc.l	$B9BABABB, $BCBCBDBD, $BEBFBFC0, $C0C1C2C2, $C3C3C4C5, $C5C6C6C7, $C8C8C9C9, $CACBCBCC
             1148 : BDBD BEBF BFC0 
             114E : C0C1 C2C2 C3C3 
             1154 : C4C5 C5C6 C6C7 
             115A : C8C8 C9C9 CACB 
             1160 : CBCC             
(1)  339/    1162 : 3B3C 3C3D 3D3E      	dc.l	$3B3C3C3D, $3D3E3E3F, $40404141, $42424343, $44444545, $46464748, $4849494A, $4A4B4B4C
             1168 : 3E3F 4040 4141 
             116E : 4242 4343 4444 
             1174 : 4545 4646 4748 
             117A : 4849 494A 4A4B 
             1180 : 4B4C             
(1)  340/    1182 : 4C4D 4D4E 4E4F      	dc.l	$4C4D4D4E, $4E4F5050, $51515252, $53535454, $55555656, $57585859, $595A5A5B, $5B5C5C5D
             1188 : 5050 5151 5252 
             118E : 5353 5454 5555 
             1194 : 5656 5758 5859 
             119A : 595A 5A5B 5B5C 
             11A0 : 5C5D             
(1)  341/    11A2 : 5D5E 5E5F 6060      	dc.l	$5D5E5E5F, $60606161, $62626363, $64646565, $66666768, $6869696A, $6A6B6B6C, $6C6D6D6E
             11A8 : 6161 6262 6363 
             11AE : 6464 6565 6666 
             11B4 : 6768 6869 696A 
             11BA : 6A6B 6B6C 6C6D 
             11C0 : 6D6E             
(1)  342/    11C2 : 6E6F 7070 7171      	dc.l	$6E6F7070, $71717272, $73737474, $75757676, $77787879, $797A7A7B, $7B7C7C7D, $7D7E7E7F
             11C8 : 7272 7373 7474 
             11CE : 7575 7676 7778 
             11D4 : 7879 797A 7A7B 
             11DA : 7B7C 7C7D 7D7E 
             11E0 : 7E7F             
(1)  343/    11E2 : 8080 8181 8282      	dc.l	$80808181, $82828383, $84848585, $86868788, $8889898A, $8A8B8B8C, $8C8D8D8E, $8E8F9090
             11E8 : 8383 8484 8585 
             11EE : 8686 8788 8889 
             11F4 : 898A 8A8B 8B8C 
             11FA : 8C8D 8D8E 8E8F 
             1200 : 9090             
(1)  344/    1202 : 9191 9292 9393      	dc.l	$91919292, $93939494, $95959696, $97989899, $999A9A9B, $9B9C9C9D, $9D9E9E9F, $A0A0A1A1
             1208 : 9494 9595 9696 
             120E : 9798 9899 999A 
             1214 : 9A9B 9B9C 9C9D 
             121A : 9D9E 9E9F A0A0 
             1220 : A1A1             
(1)  345/    1222 : A2A2 A3A3 A4A4      	dc.l	$A2A2A3A3, $A4A4A5A5, $A6A6A7A8, $A8A9A9AA, $AAABABAC, $ACADADAE, $AEAFB0B0, $B1B1B2B2
             1228 : A5A5 A6A6 A7A8 
             122E : A8A9 A9AA AAAB 
             1234 : ABAC ACAD ADAE 
             123A : AEAF B0B0 B1B1 
             1240 : B2B2             
(1)  346/    1242 : B3B3 B4B4 B5B5      	dc.l	$B3B3B4B4, $B5B5B6B6, $B7B8B8B9, $B9BABABB, $BBBCBCBD, $BDBEBEBF, $C0C0C1C1, $C2C2C3C3
             1248 : B6B6 B7B8 B8B9 
             124E : B9BA BABB BBBC 
             1254 : BCBD BDBE BEBF 
             125A : C0C0 C1C1 C2C2 
             1260 : C3C3             
(1)  347/    1262 : 4444 4545 4646      	dc.l	$44444545, $46464747, $48484849, $494A4A4B, $4B4C4C4D, $4D4E4E4F, $4F4F5050, $51515252
             1268 : 4747 4848 4849 
             126E : 494A 4A4B 4B4C 
             1274 : 4C4D 4D4E 4E4F 
             127A : 4F4F 5050 5151 
             1280 : 5252             
(1)  348/    1282 : 5353 5454 5555      	dc.l	$53535454, $55555656, $56575758, $5859595A, $5A5B5B5C, $5C5D5D5D, $5E5E5F5F, $60606161
             1288 : 5656 5657 5758 
             128E : 5859 595A 5A5B 
             1294 : 5B5C 5C5D 5D5D 
             129A : 5E5E 5F5F 6060 
             12A0 : 6161             
(1)  349/    12A2 : 6262 6363 6464      	dc.l	$62626363, $64646465, $65666667, $67686869, $696A6A6B, $6B6B6C6C, $6D6D6E6E, $6F6F7070
             12A8 : 6465 6566 6667 
             12AE : 6768 6869 696A 
             12B4 : 6A6B 6B6B 6C6C 
             12BA : 6D6D 6E6E 6F6F 
             12C0 : 7070             
(1)  350/    12C2 : 7171 7272 7273      	dc.l	$71717272, $72737374, $74757576, $76777778, $78797979, $7A7A7B7B, $7C7C7D7D, $7E7E7F7F
             12C8 : 7374 7475 7576 
             12CE : 7677 7778 7879 
             12D4 : 7979 7A7A 7B7B 
             12DA : 7C7C 7D7D 7E7E 
             12E0 : 7F7F             
(1)  351/    12E2 : 8080 8081 8182      	dc.l	$80808081, $81828283, $83848485, $85868687, $87878888, $89898A8A, $8B8B8C8C, $8D8D8E8E
             12E8 : 8283 8384 8485 
             12EE : 8586 8687 8787 
             12F4 : 8888 8989 8A8A 
             12FA : 8B8B 8C8C 8D8D 
             1300 : 8E8E             
(1)  352/    1302 : 8E8F 8F90 9091      	dc.l	$8E8F8F90, $90919192, $92939394, $94959595, $96969797, $98989999, $9A9A9B9B, $9C9C9C9D
             1308 : 9192 9293 9394 
             130E : 9495 9595 9696 
             1314 : 9797 9898 9999 
             131A : 9A9A 9B9B 9C9C 
             1320 : 9C9D             
(1)  353/    1322 : 9D9E 9E9F 9FA0      	dc.l	$9D9E9E9F, $9FA0A0A1, $A1A2A2A3, $A3A3A4A4, $A5A5A6A6, $A7A7A8A8, $A9A9AAAA, $AAABABAC
             1328 : A0A1 A1A2 A2A3 
             132E : A3A3 A4A4 A5A5 
             1334 : A6A6 A7A7 A8A8 
             133A : A9A9 AAAA AAAB 
             1340 : ABAC             
(1)  354/    1342 : ACAD ADAE AEAF      	dc.l	$ACADADAE, $AEAFAFB0, $B0B1B1B1, $B2B2B3B3, $B4B4B5B5, $B6B6B7B7, $B8B8B8B9, $B9BABABB
             1348 : AFB0 B0B1 B1B1 
             134E : B2B2 B3B3 B4B4 
             1354 : B5B5 B6B6 B7B7 
             135A : B8B8 B8B9 B9BA 
             1360 : BABB             
(1)  355/    1362 : 4C4D 4D4E 4E4E      	dc.l	$4C4D4D4E, $4E4E4F4F, $50505051, $51525252, $53535454, $54555556, $56565757, $58585859
             1368 : 4F4F 5050 5051 
             136E : 5152 5252 5353 
             1374 : 5454 5455 5556 
             137A : 5656 5757 5858 
             1380 : 5859             
(1)  356/    1382 : 595A 5A5A 5B5B      	dc.l	$595A5A5A, $5B5B5C5C, $5C5D5D5E, $5E5E5F5F, $60606061, $61626262, $63636464, $64656566
             1388 : 5C5C 5C5D 5D5E 
             138E : 5E5E 5F5F 6060 
             1394 : 6061 6162 6262 
             139A : 6363 6464 6465 
             13A0 : 6566             
(1)  357/    13A2 : 6666 6767 6868      	dc.l	$66666767, $68686869, $696A6A6A, $6B6B6C6C, $6C6D6D6E, $6E6E6F6F, $70707071, $71727272
             13A8 : 6869 696A 6A6A 
             13AE : 6B6B 6C6C 6C6D 
             13B4 : 6D6E 6E6E 6F6F 
             13BA : 7070 7071 7172 
             13C0 : 7272             
(1)  358/    13C2 : 7373 7474 7475      	dc.l	$73737474, $74757576, $76767777, $78787879, $797A7A7A, $7B7B7C7C, $7C7D7D7E, $7E7E7F7F
             13C8 : 7576 7676 7777 
             13CE : 7878 7879 797A 
             13D4 : 7A7A 7B7B 7C7C 
             13DA : 7C7D 7D7E 7E7E 
             13E0 : 7F7F             
(1)  359/    13E2 : 8080 8081 8182      	dc.l	$80808081, $81828282, $83838484, $84858586, $86868787, $88888889, $898A8A8A, $8B8B8C8C
             13E8 : 8282 8383 8484 
             13EE : 8485 8586 8686 
             13F4 : 8787 8888 8889 
             13FA : 898A 8A8A 8B8B 
             1400 : 8C8C             
(1)  360/    1402 : 8C8D 8D8E 8E8E      	dc.l	$8C8D8D8E, $8E8E8F8F, $90909091, $91929292, $93939494, $94959596, $96969797, $98989899
             1408 : 8F8F 9090 9091 
             140E : 9192 9292 9393 
             1414 : 9494 9495 9596 
             141A : 9696 9797 9898 
             1420 : 9899             
(1)  361/    1422 : 999A 9A9A 9B9B      	dc.l	$999A9A9A, $9B9B9C9C, $9C9D9D9E, $9E9E9F9F, $A0A0A0A1, $A1A2A2A2, $A3A3A4A4, $A4A5A5A6
             1428 : 9C9C 9C9D 9D9E 
             142E : 9E9E 9F9F A0A0 
             1434 : A0A1 A1A2 A2A2 
             143A : A3A3 A4A4 A4A5 
             1440 : A5A6             
(1)  362/    1442 : A6A6 A7A7 A8A8      	dc.l	$A6A6A7A7, $A8A8A8A9, $A9AAAAAA, $ABABACAC, $ACADADAE, $AEAEAFAF, $B0B0B0B1, $B1B2B2B2
             1448 : A8A9 A9AA AAAA 
             144E : ABAB ACAC ACAD 
             1454 : ADAE AEAE AFAF 
             145A : B0B0 B0B1 B1B2 
             1460 : B2B2             
(1)  363/    1462 : 5555 5656 5657      	dc.l	$55555656, $56575757, $58585859, $59595A5A, $5A5B5B5B, $5C5C5C5D, $5D5D5E5E, $5E5F5F5F
             1468 : 5757 5858 5859 
             146E : 5959 5A5A 5A5B 
             1474 : 5B5B 5C5C 5C5D 
             147A : 5D5D 5E5E 5E5F 
             1480 : 5F5F             
(1)  364/    1482 : 6060 6061 6161      	dc.l	$60606061, $61616262, $62636363, $64646465, $65656666, $66676767, $68686869, $69696A6A
             1488 : 6262 6263 6363 
             148E : 6464 6465 6565 
             1494 : 6666 6667 6767 
             149A : 6868 6869 6969 
             14A0 : 6A6A             
(1)  365/    14A2 : 6A6B 6B6B 6C6C      	dc.l	$6A6B6B6B, $6C6C6C6D, $6D6D6E6E, $6E6F6F6F, $70707071, $71717272, $72737373, $74747475
             14A8 : 6C6D 6D6D 6E6E 
             14AE : 6E6F 6F6F 7070 
             14B4 : 7071 7171 7272 
             14BA : 7273 7373 7474 
             14C0 : 7475             
(1)  366/    14C2 : 7575 7676 7677      	dc.l	$75757676, $76777777, $78787879, $79797A7A, $7A7B7B7B, $7C7C7C7D, $7D7D7E7E, $7E7F7F7F
             14C8 : 7777 7878 7879 
             14CE : 7979 7A7A 7A7B 
             14D4 : 7B7B 7C7C 7C7D 
             14DA : 7D7D 7E7E 7E7F 
             14E0 : 7F7F             
(1)  367/    14E2 : 8080 8081 8181      	dc.l	$80808081, $81818282, $82838383, $84848485, $85858686, $86878787, $88888889, $89898A8A
             14E8 : 8282 8283 8383 
             14EE : 8484 8485 8585 
             14F4 : 8686 8687 8787 
             14FA : 8888 8889 8989 
             1500 : 8A8A             
(1)  368/    1502 : 8A8B 8B8B 8C8C      	dc.l	$8A8B8B8B, $8C8C8C8D, $8D8D8E8E, $8E8F8F8F, $90909091, $91919292, $92939393, $94949495
             1508 : 8C8D 8D8D 8E8E 
             150E : 8E8F 8F8F 9090 
             1514 : 9091 9191 9292 
             151A : 9293 9393 9494 
             1520 : 9495             
(1)  369/    1522 : 9595 9696 9697      	dc.l	$95959696, $96979797, $98989899, $99999A9A, $9A9B9B9B, $9C9C9C9D, $9D9D9E9E, $9E9F9F9F
             1528 : 9797 9898 9899 
             152E : 9999 9A9A 9A9B 
             1534 : 9B9B 9C9C 9C9D 
             153A : 9D9D 9E9E 9E9F 
             1540 : 9F9F             
(1)  370/    1542 : A0A0 A0A1 A1A1      	dc.l	$A0A0A0A1, $A1A1A2A2, $A2A3A3A3, $A4A4A4A5, $A5A5A6A6, $A6A7A7A7, $A8A8A8A9, $A9A9AAAA
             1548 : A2A2 A2A3 A3A3 
             154E : A4A4 A4A5 A5A5 
             1554 : A6A6 A6A7 A7A7 
             155A : A8A8 A8A9 A9A9 
             1560 : AAAA             
(1)  371/    1562 : 5D5E 5E5E 5E5F      	dc.l	$5D5E5E5E, $5E5F5F5F, $60606060, $61616161, $62626262, $63636364, $64646465, $65656566
             1568 : 5F5F 6060 6060 
             156E : 6161 6161 6262 
             1574 : 6262 6363 6364 
             157A : 6464 6465 6565 
             1580 : 6566             
(1)  372/    1582 : 6666 6667 6767      	dc.l	$66666667, $67676868, $68686969, $69696A6A, $6A6A6B6B, $6B6C6C6C, $6C6D6D6D, $6D6E6E6E
             1588 : 6868 6868 6969 
             158E : 6969 6A6A 6A6A 
             1594 : 6B6B 6B6C 6C6C 
             159A : 6C6D 6D6D 6D6E 
             15A0 : 6E6E             
(1)  373/    15A2 : 6E6F 6F6F 7070      	dc.l	$6E6F6F6F, $70707070, $71717171, $72727272, $73737374, $74747475, $75757576, $76767677
             15A8 : 7070 7171 7171 
             15AE : 7272 7272 7373 
             15B4 : 7374 7474 7475 
             15BA : 7575 7576 7676 
             15C0 : 7677             
(1)  374/    15C2 : 7777 7878 7878      	dc.l	$77777878, $78787979, $79797A7A, $7A7A7B7B, $7B7C7C7C, $7C7D7D7D, $7D7E7E7E, $7E7F7F7F
             15C8 : 7979 7979 7A7A 
             15CE : 7A7A 7B7B 7B7C 
             15D4 : 7C7C 7C7D 7D7D 
             15DA : 7D7E 7E7E 7E7F 
             15E0 : 7F7F             
(1)  375/    15E2 : 8080 8080 8181      	dc.l	$80808080, $81818181, $82828282, $83838384, $84848485, $85858586, $86868687, $87878888
             15E8 : 8181 8282 8282 
             15EE : 8383 8384 8484 
             15F4 : 8485 8585 8586 
             15FA : 8686 8687 8787 
             1600 : 8888             
(1)  376/    1602 : 8888 8989 8989      	dc.l	$88888989, $89898A8A, $8A8A8B8B, $8B8C8C8C, $8C8D8D8D, $8D8E8E8E, $8E8F8F8F, $90909090
             1608 : 8A8A 8A8A 8B8B 
             160E : 8B8C 8C8C 8C8D 
             1614 : 8D8D 8D8E 8E8E 
             161A : 8E8F 8F8F 9090 
             1620 : 9090             
(1)  377/    1622 : 9191 9191 9292      	dc.l	$91919191, $92929292, $93939394, $94949495, $95959596, $96969697, $97979898, $98989999
             1628 : 9292 9393 9394 
             162E : 9494 9495 9595 
             1634 : 9596 9696 9697 
             163A : 9797 9898 9898 
             1640 : 9999             
(1)  378/    1642 : 9999 9A9A 9A9A      	dc.l	$99999A9A, $9A9A9B9B, $9B9C9C9C, $9C9D9D9D, $9D9E9E9E, $9E9F9F9F, $A0A0A0A0, $A1A1A1A1
             1648 : 9B9B 9B9C 9C9C 
             164E : 9C9D 9D9D 9D9E 
             1654 : 9E9E 9E9F 9F9F 
             165A : A0A0 A0A0 A1A1 
             1660 : A1A1             
(1)  379/    1662 : 6666 6667 6767      	dc.l	$66666667, $67676767, $68686868, $68696969, $69696A6A, $6A6A6A6B, $6B6B6B6B, $6C6C6C6C
             1668 : 6767 6868 6868 
             166E : 6869 6969 6969 
             1674 : 6A6A 6A6A 6A6B 
             167A : 6B6B 6B6B 6C6C 
             1680 : 6C6C             
(1)  380/    1682 : 6C6D 6D6D 6D6D      	dc.l	$6C6D6D6D, $6D6D6E6E, $6E6E6E6F, $6F6F6F6F, $70707070, $70717171, $71717272, $72727273
             1688 : 6E6E 6E6E 6E6F 
             168E : 6F6F 6F6F 7070 
             1694 : 7070 7071 7171 
             169A : 7171 7272 7272 
             16A0 : 7273             
(1)  381/    16A2 : 7373 7373 7474      	dc.l	$73737373, $74747474, $74757575, $75757676, $76767677, $77777777, $78787878, $78797979
             16A8 : 7474 7475 7575 
             16AE : 7575 7676 7676 
             16B4 : 7677 7777 7777 
             16BA : 7878 7878 7879 
             16C0 : 7979             
(1)  382/    16C2 : 7979 7A7A 7A7A      	dc.l	$79797A7A, $7A7A7A7B, $7B7B7B7B, $7C7C7C7C, $7C7D7D7D, $7D7D7E7E, $7E7E7E7F, $7F7F7F7F
             16C8 : 7A7B 7B7B 7B7B 
             16CE : 7C7C 7C7C 7C7D 
             16D4 : 7D7D 7D7D 7E7E 
             16DA : 7E7E 7E7F 7F7F 
             16E0 : 7F7F             
(1)  383/    16E2 : 8080 8080 8081      	dc.l	$80808080, $80818181, $81818282, $82828283, $83838383, $84848484, $84858585, $85858686
             16E8 : 8181 8181 8282 
             16EE : 8282 8283 8383 
             16F4 : 8383 8484 8484 
             16FA : 8485 8585 8585 
             1700 : 8686             
(1)  384/    1702 : 8686 8687 8787      	dc.l	$86868687, $87878787, $88888888, $88898989, $89898A8A, $8A8A8A8B, $8B8B8B8B, $8C8C8C8C
             1708 : 8787 8888 8888 
             170E : 8889 8989 8989 
             1714 : 8A8A 8A8A 8A8B 
             171A : 8B8B 8B8B 8C8C 
             1720 : 8C8C             
(1)  385/    1722 : 8C8D 8D8D 8D8D      	dc.l	$8C8D8D8D, $8D8D8E8E, $8E8E8E8F, $8F8F8F8F, $90909090, $90919191, $91919292, $92929293
             1728 : 8E8E 8E8E 8E8F 
             172E : 8F8F 8F8F 9090 
             1734 : 9090 9091 9191 
             173A : 9191 9292 9292 
             1740 : 9293             
(1)  386/    1742 : 9393 9393 9494      	dc.l	$93939393, $94949494, $94959595, $95959696, $96969697, $97979797, $98989898, $98999999
             1748 : 9494 9495 9595 
             174E : 9595 9696 9696 
             1754 : 9697 9797 9797 
             175A : 9898 9898 9899 
             1760 : 9999             
(1)  387/    1762 : 6E6F 6F6F 6F6F      	dc.l	$6E6F6F6F, $6F6F6F6F, $70707070, $70707070, $71717171, $71717172, $72727272, $72727273
             1768 : 6F6F 7070 7070 
             176E : 7070 7070 7171 
             1774 : 7171 7171 7172 
             177A : 7272 7272 7272 
             1780 : 7273             
(1)  388/    1782 : 7373 7373 7373      	dc.l	$73737373, $73737474, $74747474, $74747575, $75757575, $75767676, $76767676, $76777777
             1788 : 7474 7474 7474 
             178E : 7474 7575 7575 
             1794 : 7575 7576 7676 
             179A : 7676 7676 7677 
             17A0 : 7777             
(1)  389/    17A2 : 7777 7777 7878      	dc.l	$77777777, $78787878, $78787878, $79797979, $7979797A, $7A7A7A7A, $7A7A7A7B, $7B7B7B7B
             17A8 : 7878 7878 7878 
             17AE : 7979 7979 7979 
             17B4 : 797A 7A7A 7A7A 
             17BA : 7A7A 7A7B 7B7B 
             17C0 : 7B7B             
(1)  390/    17C2 : 7B7B 7C7C 7C7C      	dc.l	$7B7B7C7C, $7C7C7C7C, $7C7C7D7D, $7D7D7D7D, $7D7E7E7E, $7E7E7E7E, $7E7F7F7F, $7F7F7F7F
             17C8 : 7C7C 7C7C 7D7D 
             17CE : 7D7D 7D7D 7D7E 
             17D4 : 7E7E 7E7E 7E7E 
             17DA : 7E7F 7F7F 7F7F 
             17E0 : 7F7F             
(1)  391/    17E2 : 8080 8080 8080      	dc.l	$80808080, $80808080, $81818181, $81818182, $82828282, $82828283, $83838383, $83838484
             17E8 : 8080 8181 8181 
             17EE : 8181 8182 8282 
             17F4 : 8282 8282 8283 
             17FA : 8383 8383 8383 
             1800 : 8484             
(1)  392/    1802 : 8484 8484 8484      	dc.l	$84848484, $84848585, $85858585, $85868686, $86868686, $86878787, $87878787, $88888888
             1808 : 8585 8585 8585 
             180E : 8586 8686 8686 
             1814 : 8686 8687 8787 
             181A : 8787 8787 8888 
             1820 : 8888             
(1)  393/    1822 : 8888 8888 8989      	dc.l	$88888888, $89898989, $8989898A, $8A8A8A8A, $8A8A8A8B, $8B8B8B8B, $8B8B8C8C, $8C8C8C8C
             1828 : 8989 8989 898A 
             182E : 8A8A 8A8A 8A8A 
             1834 : 8A8B 8B8B 8B8B 
             183A : 8B8B 8C8C 8C8C 
             1840 : 8C8C             
(1)  394/    1842 : 8C8C 8D8D 8D8D      	dc.l	$8C8C8D8D, $8D8D8D8D, $8D8E8E8E, $8E8E8E8E, $8E8F8F8F, $8F8F8F8F, $90909090, $90909090
             1848 : 8D8D 8D8E 8E8E 
             184E : 8E8E 8E8E 8E8F 
             1854 : 8F8F 8F8F 8F8F 
             185A : 9090 9090 9090 
             1860 : 9090             
(1)  395/    1862 : 7777 7777 7777      	dc.l	$77777777, $77777777, $78787878, $78787878, $78787878, $78787879, $79797979, $79797979
             1868 : 7777 7878 7878 
             186E : 7878 7878 7878 
             1874 : 7878 7878 7879 
             187A : 7979 7979 7979 
             1880 : 7979             
(1)  396/    1882 : 7979 7979 7979      	dc.l	$79797979, $79797A7A, $7A7A7A7A, $7A7A7A7A, $7A7A7A7A, $7A7B7B7B, $7B7B7B7B, $7B7B7B7B
             1888 : 7A7A 7A7A 7A7A 
             188E : 7A7A 7A7A 7A7A 
             1894 : 7A7A 7A7B 7B7B 
             189A : 7B7B 7B7B 7B7B 
             18A0 : 7B7B             
(1)  397/    18A2 : 7B7B 7B7B 7C7C      	dc.l	$7B7B7B7B, $7C7C7C7C, $7C7C7C7C, $7C7C7C7C, $7C7C7C7D, $7D7D7D7D, $7D7D7D7D, $7D7D7D7D
             18A8 : 7C7C 7C7C 7C7C 
             18AE : 7C7C 7C7C 7C7C 
             18B4 : 7C7D 7D7D 7D7D 
             18BA : 7D7D 7D7D 7D7D 
             18C0 : 7D7D             
(1)  398/    18C2 : 7D7D 7E7E 7E7E      	dc.l	$7D7D7E7E, $7E7E7E7E, $7E7E7E7E, $7E7E7E7E, $7E7F7F7F, $7F7F7F7F, $7F7F7F7F, $7F7F7F7F
             18C8 : 7E7E 7E7E 7E7E 
             18CE : 7E7E 7E7E 7E7F 
             18D4 : 7F7F 7F7F 7F7F 
             18DA : 7F7F 7F7F 7F7F 
             18E0 : 7F7F             
(1)  399/    18E2 : 8080 8080 8080      	dc.l	$80808080, $80808080, $80808080, $80808081, $81818181, $81818181, $81818181, $81818282
             18E8 : 8080 8080 8080 
             18EE : 8080 8081 8181 
             18F4 : 8181 8181 8181 
             18FA : 8181 8181 8181 
             1900 : 8282             
(1)  400/    1902 : 8282 8282 8282      	dc.l	$82828282, $82828282, $82828282, $82838383, $83838383, $83838383, $83838383, $84848484
             1908 : 8282 8282 8282 
             190E : 8283 8383 8383 
             1914 : 8383 8383 8383 
             191A : 8383 8383 8484 
             1920 : 8484             
(1)  401/    1922 : 8484 8484 8484      	dc.l	$84848484, $84848484, $84848485, $85858585, $85858585, $85858585, $85858686, $86868686
             1928 : 8484 8484 8485 
             192E : 8585 8585 8585 
             1934 : 8585 8585 8585 
             193A : 8585 8686 8686 
             1940 : 8686             
(1)  402/    1942 : 8686 8686 8686      	dc.l	$86868686, $86868686, $86878787, $87878787, $87878787, $87878787, $88888888, $88888888
             1948 : 8686 8687 8787 
             194E : 8787 8787 8787 
             1954 : 8787 8787 8787 
             195A : 8888 8888 8888 
             1960 : 8888             
(1)  403/    1962 : 8080 8080 8080      	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
             1968 : 8080 8080 8080 
             196E : 8080 8080 8080 
             1974 : 8080 8080 8080 
             197A : 8080 8080 8080 
             1980 : 8080             
(1)  404/    1982 : 8080 8080 8080      	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
             1988 : 8080 8080 8080 
             198E : 8080 8080 8080 
             1994 : 8080 8080 8080 
             199A : 8080 8080 8080 
             19A0 : 8080             
(1)  405/    19A2 : 8080 8080 8080      	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
             19A8 : 8080 8080 8080 
             19AE : 8080 8080 8080 
             19B4 : 8080 8080 8080 
             19BA : 8080 8080 8080 
             19C0 : 8080             
(1)  406/    19C2 : 8080 8080 8080      	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
             19C8 : 8080 8080 8080 
             19CE : 8080 8080 8080 
             19D4 : 8080 8080 8080 
             19DA : 8080 8080 8080 
             19E0 : 8080             
(1)  407/    19E2 : 8080 8080 8080      	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
             19E8 : 8080 8080 8080 
             19EE : 8080 8080 8080 
             19F4 : 8080 8080 8080 
             19FA : 8080 8080 8080 
             1A00 : 8080             
(1)  408/    1A02 : 8080 8080 8080      	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
             1A08 : 8080 8080 8080 
             1A0E : 8080 8080 8080 
             1A14 : 8080 8080 8080 
             1A1A : 8080 8080 8080 
             1A20 : 8080             
(1)  409/    1A22 : 8080 8080 8080      	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
             1A28 : 8080 8080 8080 
             1A2E : 8080 8080 8080 
             1A34 : 8080 8080 8080 
             1A3A : 8080 8080 8080 
             1A40 : 8080             
(1)  410/    1A42 : 8080 8080 8080      	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
             1A48 : 8080 8080 8080 
             1A4E : 8080 8080 8080 
             1A54 : 8080 8080 8080 
             1A5A : 8080 8080 8080 
             1A60 : 8080             
(1)  411/    1A62 : 0000 0000 0000      	dc.l	$00000000, $00000000, $00000000, $00000000, $01010101, $01010101, $01010101, $01010101
             1A68 : 0000 0000 0000 
             1A6E : 0000 0000 0101 
             1A74 : 0101 0101 0101 
             1A7A : 0101 0101 0101 
             1A80 : 0101             
(1)  412/    1A82 : 0202 0202 0202      	dc.l	$02020202, $02020202, $02020202, $02020202, $04040404, $04040404, $04040404, $04040404
             1A88 : 0202 0202 0202 
             1A8E : 0202 0202 0404 
             1A94 : 0404 0404 0404 
             1A9A : 0404 0404 0404 
             1AA0 : 0404             
(1)  413/    1AA2 : 0808 0808 0808      	dc.l	$08080808, $08080808, $08080808, $08080808, $10101010, $10101010, $10101010, $10101010
             1AA8 : 0808 0808 0808 
             1AAE : 0808 0808 1010 
             1AB4 : 1010 1010 1010 
             1ABA : 1010 1010 1010 
             1AC0 : 1010             
(1)  414/    1AC2 : 2020 2020 2020      	dc.l	$20202020, $20202020, $20202020, $20202020, $40404040, $40404040, $40404040, $40404040
             1AC8 : 2020 2020 2020 
             1ACE : 2020 2020 4040 
             1AD4 : 4040 4040 4040 
             1ADA : 4040 4040 4040 
             1AE0 : 4040             
(1)  415/    1AE2 : 8080 8080 8080      	dc.l	$80808080, $80808080, $80808080, $80808080, $FFFFFFFF, $FFFFFFFF, $FFFFFFFF, $FFFFFFFF
             1AE8 : 8080 8080 8080 
             1AEE : 8080 8080 FFFF 
             1AF4 : FFFF FFFF FFFF 
             1AFA : FFFF FFFF FFFF 
             1B00 : FFFF             
(1)  416/    1B02 : FEFE FEFE FEFE      	dc.l	$FEFEFEFE, $FEFEFEFE, $FEFEFEFE, $FEFEFEFE, $FCFCFCFC, $FCFCFCFC, $FCFCFCFC, $FCFCFCFC
             1B08 : FEFE FEFE FEFE 
             1B0E : FEFE FEFE FCFC 
             1B14 : FCFC FCFC FCFC 
             1B1A : FCFC FCFC FCFC 
             1B20 : FCFC             
(1)  417/    1B22 : F8F8 F8F8 F8F8      	dc.l	$F8F8F8F8, $F8F8F8F8, $F8F8F8F8, $F8F8F8F8, $F0F0F0F0, $F0F0F0F0, $F0F0F0F0, $F0F0F0F0
             1B28 : F8F8 F8F8 F8F8 
             1B2E : F8F8 F8F8 F0F0 
             1B34 : F0F0 F0F0 F0F0 
             1B3A : F0F0 F0F0 F0F0 
             1B40 : F0F0             
(1)  418/    1B42 : E0E0 E0E0 E0E0      	dc.l	$E0E0E0E0, $E0E0E0E0, $E0E0E0E0, $E0E0E0E0, $C0C0C0C0, $C0C0C0C0, $C0C0C0C0, $C0C0C0C0
             1B48 : E0E0 E0E0 E0E0 
             1B4E : E0E0 E0E0 C0C0 
             1B54 : C0C0 C0C0 C0C0 
             1B5A : C0C0 C0C0 C0C0 
             1B60 : C0C0             
(1)  419/    1B62 : 0001 0204 0810      	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
             1B68 : 2040 80FF FEFC 
             1B6E : F8F0 E0C0 0001 
             1B74 : 0204 0810 2040 
             1B7A : 80FF FEFC F8F0 
             1B80 : E0C0             
(1)  420/    1B82 : 0001 0204 0810      	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
             1B88 : 2040 80FF FEFC 
             1B8E : F8F0 E0C0 0001 
             1B94 : 0204 0810 2040 
             1B9A : 80FF FEFC F8F0 
             1BA0 : E0C0             
(1)  421/    1BA2 : 0001 0204 0810      	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
             1BA8 : 2040 80FF FEFC 
             1BAE : F8F0 E0C0 0001 
             1BB4 : 0204 0810 2040 
             1BBA : 80FF FEFC F8F0 
             1BC0 : E0C0             
(1)  422/    1BC2 : 0001 0204 0810      	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
             1BC8 : 2040 80FF FEFC 
             1BCE : F8F0 E0C0 0001 
             1BD4 : 0204 0810 2040 
             1BDA : 80FF FEFC F8F0 
             1BE0 : E0C0             
(1)  423/    1BE2 : 0001 0204 0810      	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
             1BE8 : 2040 80FF FEFC 
             1BEE : F8F0 E0C0 0001 
             1BF4 : 0204 0810 2040 
             1BFA : 80FF FEFC F8F0 
             1C00 : E0C0             
(1)  424/    1C02 : 0001 0204 0810      	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
             1C08 : 2040 80FF FEFC 
             1C0E : F8F0 E0C0 0001 
             1C14 : 0204 0810 2040 
             1C1A : 80FF FEFC F8F0 
             1C20 : E0C0             
(1)  425/    1C22 : 0001 0204 0810      	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
             1C28 : 2040 80FF FEFC 
             1C2E : F8F0 E0C0 0001 
             1C34 : 0204 0810 2040 
             1C3A : 80FF FEFC F8F0 
             1C40 : E0C0             
(1)  426/    1C42 : 0001 0204 0810      	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
             1C48 : 2040 80FF FEFC 
             1C4E : F8F0 E0C0 0001 
             1C54 : 0204 0810 2040 
             1C5A : 80FF FEFC F8F0 
             1C60 : E0C0             
(1)  427/    1C62 : 0000 0000 0000      	dc.l	$00000000, $000000D1, $C9D511A0, $00B7ED52, $112000ED, $52280FD2, $13167DED, $440F0FE6
             1C68 : 00D1 C9D5 11A0 
             1C6E : 00B7 ED52 1120 
             1C74 : 00ED 5228 0FD2 
             1C7A : 1316 7DED 440F 
             1C80 : 0FE6             
(1)  428/    1C82 : 0721 0016 6FE9      	dc.l	$07210016, $6FE9D1D5, $132918D4, $F33E2032, $DD1F2140, $17223900, $ED73DE1F, $DDF933F1
             1C88 : D1D5 1329 18D4 
             1C8E : F33E 2032 DD1F 
             1C94 : 2140 1722 3900 
             1C9A : ED73 DE1F DDF9 
             1CA0 : 33F1             
(1)  429/    1CA2 : C1E1 D131 DD1F      	dc.l	$C1E1D131, $DD1FF508, $CBFCE5CB, $BA1B7AA3, $3C200305, $167F141C, $D5151D78, $B9200BDA
             1CA8 : F508 CBFC E5CB 
             1CAE : BA1B 7AA3 3C20 
             1CB4 : 0305 167F 141C 
             1CBA : D515 1D78 B920 
             1CC0 : 0BDA             
(1)  430/    1CC2 : 6919 CBBC EBED      	dc.l	$6919CBBC, $EBED52C3, $7216AF95, $5F9C8557, $EB2B242C, $E5C521C4, $1F083001, $2CE5ED7B
             1CC8 : 52C3 7216 AF95 
             1CCE : 5F9C 8557 EB2B 
             1CD4 : 242C E5C5 21C4 
             1CDA : 1F08 3001 2CE5 
             1CE0 : ED7B             
(1)  431/    1CE2 : DE1F 3AD3 1FCF      	dc.l	$DE1F3AD3, $1FCFF301, $00032614, $ED5BD91F, $DD2AD51F, $D908AF08, $ED4BD11F, $0AE60FC6
             1CE8 : F301 0003 2614 
             1CEE : ED5B D91F DD2A 
             1CF4 : D51F D908 AF08 
             1CFA : ED4B D11F 0AE6 
             1D00 : 0FC6             
(1)  432/    1D02 : 0447 3ADC 1FFD      	dc.l	$04473ADC, $1FFD6F21, $00031101, $40D9FB0D, $3E800200, $1A136F0A, $0C8624F3, $020C8625
             1D08 : 6F21 0003 1101 
             1D0E : 40D9 FB0D 3E80 
             1D14 : 0200 1A13 6F0A 
             1D1A : 0C86 24F3 020C 
             1D20 : 8625             
(1)  433/    1D22 : 02DD 2D28 1DD9      	dc.l	$02DD2D28, $1DD94E0A, $1208FD85, $30012C08, $7DD9FB91, $90D2B416, $F5F1F5F1, $E509E1F3
             1D28 : 4E0A 1208 FD85 
             1D2E : 3001 2C08 7DD9 
             1D34 : FB91 90D2 B416 
             1D3A : F5F1 F5F1 E509 
             1D40 : E1F3             
(1)  434/    1D42 : 18E3 DD25 C2C5      	dc.l	$18E3DD25, $C2C516FB, $3A090021, $D41FBE20, $28F379D9, $BD28174E, $0A1208FD, $8530012C
             1D48 : 16FB 3A09 0021 
             1D4E : D41F BE20 28F3 
             1D54 : 79D9 BD28 174E 
             1D5A : 0A12 08FD 8530 
             1D60 : 012C             
(1)  435/    1D62 : 08D9 FBF5 F1F5      	dc.l	$08D9FBF5, $F1F5F1E5, $232323E1, $18E3D9FB, $3ADB1FE6, $02C28216, $C93C1100, $80DD2100
             1D68 : F1E5 2323 23E1 
             1D6E : 18E3 D9FB 3ADB 
             1D74 : 1FE6 02C2 8216 
             1D7A : C93C 1100 80DD 
             1D80 : 2100             
(1)  436/    1D82 : 80BE 2004 DD2A      	dc.l	$80BE2004, $DD2AD71F, $2614D7C3, $B41621D6, $1636B323, $3616C9D9, $00030B03, $0B001814
             1D88 : D71F 2614 D7C3 
             1D8E : B416 21D6 1636 
             1D94 : B323 3616 C9D9 
             1D9A : 0003 0B03 0B00 
             1DA0 : 1814             
(1)  437/    1DA2 : F5C5 0672 79D9      	dc.l	$F5C50672, $79D9BD28, $EE4E0A12, $08FD8530, $012C08D9, $3EFF32E2, $1FC5C1E5, $2929E100
             1DA8 : BD28 EE4E 0A12 
             1DAE : 08FD 8530 012C 
             1DB4 : 08D9 3EFF 32E2 
             1DBA : 1FC5 C1E5 2929 
             1DC0 : E100             
(1)  438/    1DC2 : 10E2 79D9 BD28      	dc.l	$10E279D9, $BD280A4E, $0A1208FD, $8530012C, $08D9D9ED, $4BD11F0A, $E60FC604, $47D93ADC
             1DC8 : 0A4E 0A12 08FD 
             1DCE : 8530 012C 08D9 
             1DD4 : D9ED 4BD1 1F0A 
             1DDA : E60F C604 47D9 
             1DE0 : 3ADC             
(1)  439/    1DE2 : 1FFD 6F3A C21F      	dc.l	$1FFD6F3A, $C21FB728, $0DF2AE17, $3ADB1F0F, $3028AF32, $C21F79D9, $BD280A4E, $0A1208FD
             1DE8 : B728 0DF2 AE17 
             1DEE : 3ADB 1F0F 3028 
             1DF4 : AF32 C21F 79D9 
             1DFA : BD28 0A4E 0A12 
             1E00 : 08FD             
(1)  440/    1E02 : 8530 012C 08D9      	dc.l	$8530012C, $08D9AF32, $E21FC1F1, $FBC93DCA, $69193D20, $0BFD2E00, $18DC3AC2, $1FC3F118
             1E08 : AF32 E21F C1F1 
             1E0E : FBC9 3DCA 6919 
             1E14 : 3D20 0BFD 2E00 
             1E1A : 18DC 3AC2 1FC3 
             1E20 : F118             
(1)  441/    1E22 : 3E80 32E8 1F18      	dc.l	$3E8032E8, $1F18CBF3, $3E8032DD, $1F21DC17, $223900D9, $0E00D9FB, $000018FC, $D921834D
             1E28 : CBF3 3E80 32DD 
             1E2E : 1F21 DC17 2239 
             1E34 : 00D9 0E00 D9FB 
             1E3A : 0000 18FC D921 
             1E40 : 834D             
(1)  442/    1E42 : CD09 1621 F517      	dc.l	$CD091621, $F517790C, $D1E60387, $16005F19, $5E2356EB, $E9FB170B, $181B18D9, $010000ED
             1E48 : 790C D1E6 0387 
             1E4E : 1600 5F19 5E23 
             1E54 : 56EB E9FB 170B 
             1E5A : 181B 18D9 0100 
             1E60 : 00ED             
(1)  443/    1E62 : 43E4 1F11 0080      	dc.l	$43E41F11, $0080214B, $18FBE9D9, $ED43E41F, $01000011, $0000214B, $18FBE9D9, $ED43E61F
             1E68 : 214B 18FB E9D9 
             1E6E : ED43 E41F 0100 
             1E74 : 0011 0000 214B 
             1E7A : 18FB E9D9 ED43 
             1E80 : E61F             
(1)  444/    1E82 : 6069 ED5B E41F      	dc.l	$6069ED5B, $E41FAFED, $52FA3C18, $7BCB2A1F, $CB2A1FCB, $2A1F5FAF, $ED52300E, $CD3101CD
             1E88 : AFED 52FA 3C18 
             1E8E : 7BCB 2A1F CB2A 
             1E94 : 1FCB 2A1F 5FAF 
             1E9A : ED52 300E CD31 
             1EA0 : 01CD             
(1)  445/    1EA2 : 9102 CD2E 173E      	dc.l	$9102CD2E, $173E0132, $E31FC91A, $031A031A, $031A031A, $031A031A, $031A03E9, $F33E0232
             1EA8 : 0132 E31F C91A 
             1EAE : 031A 031A 031A 
             1EB4 : 031A 031A 031A 
             1EBA : 031A 03E9 F33E 
             1EC0 : 0232             
(1)  446/    1EC2 : DD1F E52A 3900      	dc.l	$DD1FE52A, $390022E0, $1F217518, $223900E1, $FB000018, $FCE52172, $4DCD0916, $E13AC21F
             1EC8 : 22E0 1F21 7518 
             1ECE : 2239 00E1 FB00 
             1ED4 : 0018 FCE5 2172 
             1EDA : 4DCD 0916 E13A 
             1EE0 : C21F             
(1)  447/    1EE2 : B728 23F2 9818      	dc.l	$B72823F2, $98183ADB, $1F0F3006, $AF32C21F, $FBC93AC2, $1FC3F118, $3DCA6919, $3D28F13E
             1EE8 : 3ADB 1F0F 3006 
             1EEE : AF32 C21F FBC9 
             1EF4 : 3AC2 1FC3 F118 
             1EFA : 3DCA 6919 3D28 
             1F00 : F13E             
(1)  448/    1F02 : 8032 E81F 18E6      	dc.l	$8032E81F, $18E6E52A, $E01F2239, $00E13333, $C9F33E01, $32DD1F21, $C2182239, $00FB0000
             1F08 : E52A E01F 2239 
             1F0E : 00E1 3333 C9F3 
             1F14 : 3E01 32DD 1F21 
             1F1A : C218 2239 00FB 
             1F20 : 0000             
(1)  449/    1F22 : 18FC 2187 4DCD      	dc.l	$18FC2187, $4DCD0916, $3AC21FB7, $FAF118FB, $C931EA1F, $21000006, $15E510FD, $31C01FCD
             1F28 : 0916 3AC2 1FB7 
             1F2E : FAF1 18FB C931 
             1F34 : EA1F 2100 0006 
             1F3A : 15E5 10FD 31C0 
             1F40 : 1FCD             
(1)  450/    1F42 : C717 21C6 1F3E      	dc.l	$C71721C6, $1F3EC077, $2C773E52, $32C31F18, $C031C01F, $21C21F36, $00CDFF18, $C3B118D6
             1F48 : C077 2C77 3E52 
             1F4E : 32C3 1F18 C031 
             1F54 : C01F 21C2 1F36 
             1F5A : 00CD FF18 C3B1 
             1F60 : 18D6             
(1)  451/    1F62 : 8028 134F 0600      	dc.l	$8028134F, $06008760, $6F292909, $DD216D19, $EBDD19C3, $1A19DD21, $C81F21C6, $1FDDCB01
             1F68 : 8760 6F29 2909 
             1F6E : DD21 6D19 EBDD 
             1F74 : 19C3 1A19 DD21 
             1F7A : C81F 21C6 1FDD 
             1F80 : CB01             
(1)  452/    1F82 : 4628 012C 4E21      	dc.l	$4628012C, $4E21C31F, $11004043, $3E5270EB, $362B2C36, $802C36B6, $2C716836, $2A12CD52
             1F88 : C31F 1100 4043 
             1F8E : 3E52 70EB 362B 
             1F94 : 2C36 802C 36B6 
             1F9A : 2C71 6836 2A12 
             1FA0 : CD52             
(1)  453/    1FA2 : 1921 C31F 1100      	dc.l	$1921C31F, $1100403E, $5273EB36, $2B2C3600, $12C9DD7E, $00FE50CA, $4300FE54, $CAD201FE
             1FA8 : 403E 5273 EB36 
             1FAE : 2B2C 3600 12C9 
             1FB4 : DD7E 00FE 50CA 
             1FBA : 4300 FE54 CAD2 
             1FC0 : 01FE             
(1)  454/    1FC2 : 44CA 2C16 3E01      	dc.l	$44CA2C16, $3E0132E8, $1FAF32C2, $1F31C01F, $CD4119C3
             1FC8 : 32E8 1FAF 32C2 
             1FCE : 1F31 C01F CD41 
             1FD4 : 19C3             
(1)  455/    1FD6 : B118                	dc.w	$B118
(1)  456/    1FD8 :                     
(1)  457/    1FD8 :                     ; ------------------------------------------------------------------------------
(1)  458/    1FD8 :                     ; Exported symbols
(1)  459/    1FD8 :                     ; ------------------------------------------------------------------------------
(1)  460/    1FD8 :                     
(1)  461/    1FD8 : =$302                MegaPCM_LoadDriver:	equ	MegaPCMLibraryBlob+$0
(1)  462/    1FD8 : =$36C                MegaPCM_LoadSampleTable:	equ	MegaPCMLibraryBlob+$6A
(1)  463/    1FD8 : =$54C                MegaPCM_PlaySample:	equ	MegaPCMLibraryBlob+$24A
(1)  464/    1FD8 : =$56E                MegaPCM_PausePlayback:	equ	MegaPCMLibraryBlob+$26C
(1)  465/    1FD8 : =$592                MegaPCM_UnpausePlayback:	equ	MegaPCMLibraryBlob+$290
(1)  466/    1FD8 : =$5B6                MegaPCM_StopPlayback:	equ	MegaPCMLibraryBlob+$2B4
(1)  467/    1FD8 : =$5DA                MegaPCM_SetVolume:	equ	MegaPCMLibraryBlob+$2D8
(1)  468/    1FD8 : =$5FC                MegaPCM_SetSFXVolume:	equ	MegaPCMLibraryBlob+$2FA
(1)  469/    1FD8 : =$61E                MegaPCM_SetPan:	equ	MegaPCMLibraryBlob+$31C
(1)  470/    1FD8 : =$640                MegaPCM_SetSFXPan:	equ	MegaPCMLibraryBlob+$33E
(1)  471/    1FD8 : =$662                MegaPCM:	equ	MegaPCMLibraryBlob+$360
(1)  472/    1FD8 : =$1FD8               MegaPCM_End:	equ	MegaPCMLibraryBlob+$1CD6
(1)  473/    1FD8 :                     
(1)  554/    1FD8 :                     
(1)  555/    1FD8 :                     ; ------------------------------------------------------------------------------
(1)  556/    1FD8 :                     ; MIT License
(1)  557/    1FD8 :                     ;
(1)  558/    1FD8 :                     ; Copyright (c) 2012-2024 Vladikcomper
(1)  559/    1FD8 :                     ; 
(1)  560/    1FD8 :                     ; Permission is hereby granted, free of charge, to any person obtaining a copy
(1)  561/    1FD8 :                     ; of this software and associated documentation files (the "Software"), to deal
(1)  562/    1FD8 :                     ; in the Software without restriction, including without limitation the rights
(1)  563/    1FD8 :                     ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
(1)  564/    1FD8 :                     ; copies of the Software, and to permit persons to whom the Software is
(1)  565/    1FD8 :                     ; furnished to do so, subject to the following conditions:
(1)  566/    1FD8 :                     ; 
(1)  567/    1FD8 :                     ; The above copyright notice and this permission notice shall be included in all
(1)  568/    1FD8 :                     ; copies or substantial portions of the Software.
(1)  569/    1FD8 :                     ; 
(1)  570/    1FD8 :                     ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
(1)  571/    1FD8 :                     ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
(1)  572/    1FD8 :                     ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
(1)  573/    1FD8 :                     ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
(1)  574/    1FD8 :                     ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
(1)  575/    1FD8 :                     ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
(1)  576/    1FD8 :                     ; SOFTWARE.
(1)  577/    1FD8 :                     ; ------------------------------------------------------------------------------
(1)  578/    1FD8 :                     
     156/    1FD8 :                     		include	"sound/SampleTable.asm"
(1)    1/    1FD8 :                     
(1)    2/    1FD8 :                     ; ---------------------------------------------------------------
(1)    3/    1FD8 :                     SampleTable:
(1)    4/    1FD8 :                     	;			type			pointer		Hz
(1)    5/    1FD8 : (MACRO)              	dcSample	TYPE_PCM, 		mssound, 	22025		; $81
(1)    5/    1FD8 :                     
(1)    5/    1FD8 : 50                          dc.b    TYPE_PCM                                      ; $00   - type
(1)    5/    1FD9 :                     
(1)    5/    1FD9 : 00                                  dc.b    +0                                                   ; $01   - flags (optional)
(1)    5/    1FDA : DF                                  dc.b    (22025+0)*256/TYPE_PCM_BASE_RATE   ; $02   - pitch (optional for .WAV files)
(1)    5/    1FDB : 00                                  dc.b    0                                                                               ; $03   - <RESERVED>
(1)    5/    1FDC : 0000 1FFE                           dc.l    mssound                                                               ; $04   - start offset
(1)    5/    1FE0 : 0002 2878                           dc.l    mssound_End                                                   ; $08   - end offset
(1)    5/    1FE4 :                     
(1)    6/    1FE4 : (MACRO)              	dcSample	TYPE_PCM, 		tada, 		22025		; $82
(1)    6/    1FE4 :                     
(1)    6/    1FE4 : 50                          dc.b    TYPE_PCM                                      ; $00   - type
(1)    6/    1FE5 :                     
(1)    6/    1FE5 : 00                                  dc.b    +0                                                   ; $01   - flags (optional)
(1)    6/    1FE6 : DF                                  dc.b    (22025+0)*256/TYPE_PCM_BASE_RATE   ; $02   - pitch (optional for .WAV files)
(1)    6/    1FE7 : 00                                  dc.b    0                                                                               ; $03   - <RESERVED>
(1)    6/    1FE8 : 0002 2878                           dc.l    tada                                                               ; $04   - start offset
(1)    6/    1FEC : 0002 9228                           dc.l    tada_End                                                   ; $08   - end offset
(1)    6/    1FF0 :                     
(1)    7/    1FF0 : (MACRO)              	dcSample	TYPE_PCM, 		chimes, 	22025		; $83
(1)    7/    1FF0 :                     
(1)    7/    1FF0 : 50                          dc.b    TYPE_PCM                                      ; $00   - type
(1)    7/    1FF1 :                     
(1)    7/    1FF1 : 00                                  dc.b    +0                                                   ; $01   - flags (optional)
(1)    7/    1FF2 : DF                                  dc.b    (22025+0)*256/TYPE_PCM_BASE_RATE   ; $02   - pitch (optional for .WAV files)
(1)    7/    1FF3 : 00                                  dc.b    0                                                                               ; $03   - <RESERVED>
(1)    7/    1FF4 : 0002 9228                           dc.l    chimes                                                               ; $04   - start offset
(1)    7/    1FF8 : 0002 CD2D                           dc.l    chimes_End                                                   ; $08   - end offset
(1)    7/    1FFC :                     
(1)    8/    1FFC : FFFF                	dc.w	-1	; end marker
(1)    9/    1FFE :                     
(1)   10/    1FFE :                     ; ---------------------------------------------------------------
(1)   11/    1FFE : (MACRO)              	incdac	mssound, "pcm/mssound.pcm"
(1)   11/    1FFE :  (MACRO-2)                           even
(1)   11/    1FFE : =$1FFE                       mssound:   label *
(1)   11/    1FFE :                                     binclude        "pcm/mssound.pcm"
(1)   11/   22878 : =$22878                      mssound_End:       label *
(1)   12/   22878 : (MACRO)              	incdac	tada, "pcm/tada.pcm"
(1)   12/   22878 :  (MACRO-2)                           even
(1)   12/   22878 : =$22878                      tada:   label *
(1)   12/   22878 :                                     binclude        "pcm/tada.pcm"
(1)   12/   29228 : =$29228                      tada_End:       label *
(1)   13/   29228 : (MACRO)              	incdac	chimes, "pcm/chimes.pcm"
(1)   13/   29228 :  (MACRO-2)                           even
(1)   13/   29228 : =$29228                      chimes:   label *
(1)   13/   29228 :                                     binclude        "pcm/chimes.pcm"
(1)   13/   2CD2D : =$2CD2D                      chimes_End:       label *
(1)   14/   2CD2D : (MACRO)              	even
(1)   14/   2CD2D : 00                                          dc.b 0                          ;ds.b 1 
(1)   15/   2CD2E :                     
     157/   2CD2E :                     		
     158/   2CD2E :                     ; ==============================================================
     159/   2CD2E :                     ; --------------------------------------------------------------
     160/   2CD2E :                     ; Debugging modules
     161/   2CD2E :                     ; --------------------------------------------------------------
     162/   2CD2E :                     
     163/   2CD2E : (MACRO)              		even
     164/   2CD2E :                     		include	"errorhandler/ErrorHandler.asm"
(1)    1/   2CD2E :                     
(1)    2/   2CD2E :                     ; ===============================================================
(1)    3/   2CD2E :                     ; ---------------------------------------------------------------
(1)    4/   2CD2E :                     ; Error handling and debugging modules
(1)    5/   2CD2E :                     ;
(1)    6/   2CD2E :                     ; (c) 2016-2023, Vladikcomper
(1)    7/   2CD2E :                     ; ---------------------------------------------------------------
(1)    8/   2CD2E :                     ; Error handler functions and calls
(1)    9/   2CD2E :                     ; ---------------------------------------------------------------
(1)   10/   2CD2E :                     
(1)   11/   2CD2E :                     ; ---------------------------------------------------------------
(1)   12/   2CD2E :                     ; Error handler control flags
(1)   13/   2CD2E :                     ; ---------------------------------------------------------------
(1)   14/   2CD2E :                     
(1)   15/   2CD2E :                     ; Screen appearence flags
(1)   16/   2CD2E : =$1                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
(1)   17/   2CD2E : =$2                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
(1)   18/   2CD2E :                     
(1)   19/   2CD2E :                     ; Advanced execution flags
(1)   20/   2CD2E :                     ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
(1)   21/   2CD2E : =$20                 _eh_return			equ	$20
(1)   22/   2CD2E : =$40                 _eh_enter_console	equ	$40
(1)   23/   2CD2E : =$80                 _eh_align_offset	equ	$80
(1)   24/   2CD2E :                     
(1)   25/   2CD2E :                     ; ---------------------------------------------------------------
(1)   26/   2CD2E :                     ; Errors vector table
(1)   27/   2CD2E :                     ; ---------------------------------------------------------------
(1)   28/   2CD2E :                     
(1)   29/   2CD2E :                     ; Default screen configuration
(1)   30/   2CD2E : =$0                  _eh_default			equ	0 ;_eh_show_sr_usp
(1)   31/   2CD2E :                     
(1)   32/   2CD2E :                     ; ---------------------------------------------------------------
(1)   33/   2CD2E :                     
(1)   34/   2CD2E :                     BusError:
(1)   35/   2CD2E : (MACRO)              	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error
(1)   35/   2CD2E :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "BUS ERROR"
(1)   35/   2CD2E :                     
(1)   35/   2CD2E : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("BUS ERROR","%<")             ; token position
(1)   35/   2CD2E : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   35/   2CD2E : ="BUS ERROR"                 .__str: set             "BUS ERROR"
(1)   35/   2CD2E :                     
(1)   35/   2CD2E :                             ; Parse "BUS ERROR" itself
(1)   35/   2CD2E :                             while (.__pos>=0)
(1)   35/   2CD2E :                     
(1)   35/   2CD2E :                             ; Find the last occurance "%<" in the "BUS ERROR"
(1)   35/   2CD2E :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   35/   2CD2E :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   35/   2CD2E :                                     endm
(1)   35/   2CD2E :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   35/   2CD2E :                     
(1)   35/   2CD2E :                                     ; Retrive expression in brackets following % char
(1)   35/   2CD2E :                             .__endpos:      set             strstr(.__substr,">")
(1)   35/   2CD2E :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "BUS ERROR"
(1)   35/   2CD2E :                                             .__endpos:      set             strlen(.__substr)-1
(1)   35/   2CD2E :                                     endif
(1)   35/   2CD2E :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   35/   2CD2E :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   35/   2CD2E :                                             .__midpos:      set             .__endpos
(1)   35/   2CD2E :                                     else
(1)   35/   2CD2E :                                             .__midpos:      set             .__midpos+5
(1)   35/   2CD2E :                             endif
(1)   35/   2CD2E :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   35/   2CD2E :                     
(1)   35/   2CD2E :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   35/   2CD2E :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   35/   2CD2E :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   35/   2CD2E :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   35/   2CD2E :                     
(1)   35/   2CD2E :                                             if (.__type==".b")
(1)   35/   2CD2E :                                                     subq.w  #2, sp
(1)   35/   2CD2E :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   35/   2CD2E :                                                     .__sp:  set             .__sp+2
(1)   35/   2CD2E :                     
(1)   35/   2CD2E :                                             elseif (.__type==".w")
(1)   35/   2CD2E :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   35/   2CD2E :                                                     .__sp:  set             .__sp+2
(1)   35/   2CD2E :                     
(1)   35/   2CD2E :                                             elseif (.__type==".l")
(1)   35/   2CD2E :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   35/   2CD2E :                                                     .__sp:  set             .__sp+4
(1)   35/   2CD2E :                     
(1)   35/   2CD2E :                                             else
(1)   35/   2CD2E :                                                     error "Unrecognized type in "BUS ERROR" operand: \{.__type}"
(1)   35/   2CD2E :                                             endif
(1)   35/   2CD2E :                     
(1)   35/   2CD2E :                                     endif
(1)   35/   2CD2E :                     
(1)   35/   2CD2E :                                     ; Cut "BUS ERROR"
(1)   35/   2CD2E :                                     if (.__pos>0)
(1)   35/   2CD2E :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   35/   2CD2E :                                             .__pos: set             strstr(.__str,"%<")
(1)   35/   2CD2E :                                     else
(1)   35/   2CD2E :                                             .__pos: set             -1
(1)   35/   2CD2E :                                     endif
(1)   35/   2CD2E :                     
(1)   35/   2CD2E :                             endm
(1)   35/   2CD2E :                     
(1)   35/   2CD2E : 4EB9 0002 D140                      jsr             __global__ErrorHandler
(1)   35/   2CD34 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "BUS ERROR"
(1)   35/   2CD34 :                     
(1)   35/   2CD34 : =$0                          .__lpos:        set             0               ; start position
(1)   35/   2CD34 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("BUS ERROR", "%<")
(1)   35/   2CD34 :                     
(1)   35/   2CD34 :                             while (.__pos>=0)
(1)   35/   2CD34 :                     
(1)   35/   2CD34 :                                     ; Write part of "BUS ERROR" before % token
(1)   35/   2CD34 :                                     if (.__pos-.__lpos>0)
(1)   35/   2CD34 :                                             dc.b    substr("BUS ERROR", .__lpos, .__pos-.__lpos)
(1)   35/   2CD34 :                                     endif
(1)   35/   2CD34 :                     
(1)   35/   2CD34 :                                     ; Retrive expression in brakets following % char
(1)   35/   2CD34 :                             .__endpos:      set             strstr(substr("BUS ERROR",.__pos+1,0),">")+.__pos+1 
(1)   35/   2CD34 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "BUS ERROR"
(1)   35/   2CD34 :                                             .__endpos:      set             strlen("BUS ERROR")-1
(1)   35/   2CD34 :                                     endif
(1)   35/   2CD34 :                             .__midpos:      set             strstr(substr("BUS ERROR",.__pos+5,0)," ")+.__pos+5
(1)   35/   2CD34 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   35/   2CD34 :                                             .__midpos:      set             .__endpos
(1)   35/   2CD34 :                             endif
(1)   35/   2CD34 :                                     .__type:                set             substr("BUS ERROR",.__pos+1+1,2)             ; .type
(1)   35/   2CD34 :                     
(1)   35/   2CD34 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   35/   2CD34 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   35/   2CD34 :                                             .__param:       set             substr("BUS ERROR",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   35/   2CD34 :                     
(1)   35/   2CD34 :                                             ; Validate format setting ("param")
(1)   35/   2CD34 :                                             if (strlen(.__param)<1)
(1)   35/   2CD34 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   35/   2CD34 :                                             elseif (.__param=="signed")
(1)   35/   2CD34 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   35/   2CD34 :                                             endif
(1)   35/   2CD34 :                     
(1)   35/   2CD34 :                                             if (val(.__param) < $80)
(1)   35/   2CD34 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   35/   2CD34 :                                             endif
(1)   35/   2CD34 :                     
(1)   35/   2CD34 :                                             if (.__type==".b")
(1)   35/   2CD34 :                                                     dc.b    val(.__param)
(1)   35/   2CD34 :                                             elseif (.__type==".w")
(1)   35/   2CD34 :                                                     dc.b    val(.__param)|1
(1)   35/   2CD34 :                                             else
(1)   35/   2CD34 :                                                     dc.b    val(.__param)|3
(1)   35/   2CD34 :                                             endif
(1)   35/   2CD34 :                     
(1)   35/   2CD34 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   35/   2CD34 :                                     else
(1)   35/   2CD34 :                                             dc.b    val(substr("BUS ERROR",.__pos+1+1,.__endpos-.__pos-2))
(1)   35/   2CD34 :                                     endif
(1)   35/   2CD34 :                     
(1)   35/   2CD34 :                                     .__lpos:        set             .__endpos+1
(1)   35/   2CD34 :                                     if (strstr(substr("BUS ERROR",.__pos+1,0),"%<")>=0)
(1)   35/   2CD34 :                                             .__pos: set             strstr(substr("BUS ERROR",.__pos+1,0), "%<")+.__pos+1
(1)   35/   2CD34 :                                     else
(1)   35/   2CD34 :                                             .__pos: set             -1
(1)   35/   2CD34 :                                     endif
(1)   35/   2CD34 :                     
(1)   35/   2CD34 :                             endm
(1)   35/   2CD34 :                     
(1)   35/   2CD34 :                             ; Write part of "BUS ERROR" before the end
(1)   35/   2CD34 : 4255 5320 4552              dc.b    substr("BUS ERROR", .__lpos, 0), 0
            2CD3A : 524F 5200          
(1)   35/   2CD3E :                     
(1)   35/   2CD3E :                     
(1)   35/   2CD3E : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   35/   2CD3E : A1                                          dc.b    (_eh_default|_eh_address_error)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   35/   2CD3F :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   35/   2CD40 : 4EF9 0002 D09A                              jmp             __global__ErrorHandler_PagesController  ; ... extensions controller
(1)   36/   2CD46 :                     
(1)   37/   2CD46 :                     AddressError:
(1)   38/   2CD46 : (MACRO)              	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error
(1)   38/   2CD46 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "ADDRESS ERROR"
(1)   38/   2CD46 :                     
(1)   38/   2CD46 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("ADDRESS ERROR","%<")             ; token position
(1)   38/   2CD46 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   38/   2CD46 : ="ADDRESS ERROR"             .__str: set             "ADDRESS ERROR"
(1)   38/   2CD46 :                     
(1)   38/   2CD46 :                             ; Parse "ADDRESS ERROR" itself
(1)   38/   2CD46 :                             while (.__pos>=0)
(1)   38/   2CD46 :                     
(1)   38/   2CD46 :                             ; Find the last occurance "%<" in the "ADDRESS ERROR"
(1)   38/   2CD46 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   38/   2CD46 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   38/   2CD46 :                                     endm
(1)   38/   2CD46 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   38/   2CD46 :                     
(1)   38/   2CD46 :                                     ; Retrive expression in brackets following % char
(1)   38/   2CD46 :                             .__endpos:      set             strstr(.__substr,">")
(1)   38/   2CD46 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ADDRESS ERROR"
(1)   38/   2CD46 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   38/   2CD46 :                                     endif
(1)   38/   2CD46 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   38/   2CD46 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   38/   2CD46 :                                             .__midpos:      set             .__endpos
(1)   38/   2CD46 :                                     else
(1)   38/   2CD46 :                                             .__midpos:      set             .__midpos+5
(1)   38/   2CD46 :                             endif
(1)   38/   2CD46 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   38/   2CD46 :                     
(1)   38/   2CD46 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   38/   2CD46 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   38/   2CD46 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   38/   2CD46 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   38/   2CD46 :                     
(1)   38/   2CD46 :                                             if (.__type==".b")
(1)   38/   2CD46 :                                                     subq.w  #2, sp
(1)   38/   2CD46 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   38/   2CD46 :                                                     .__sp:  set             .__sp+2
(1)   38/   2CD46 :                     
(1)   38/   2CD46 :                                             elseif (.__type==".w")
(1)   38/   2CD46 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   38/   2CD46 :                                                     .__sp:  set             .__sp+2
(1)   38/   2CD46 :                     
(1)   38/   2CD46 :                                             elseif (.__type==".l")
(1)   38/   2CD46 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   38/   2CD46 :                                                     .__sp:  set             .__sp+4
(1)   38/   2CD46 :                     
(1)   38/   2CD46 :                                             else
(1)   38/   2CD46 :                                                     error "Unrecognized type in "ADDRESS ERROR" operand: \{.__type}"
(1)   38/   2CD46 :                                             endif
(1)   38/   2CD46 :                     
(1)   38/   2CD46 :                                     endif
(1)   38/   2CD46 :                     
(1)   38/   2CD46 :                                     ; Cut "ADDRESS ERROR"
(1)   38/   2CD46 :                                     if (.__pos>0)
(1)   38/   2CD46 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   38/   2CD46 :                                             .__pos: set             strstr(.__str,"%<")
(1)   38/   2CD46 :                                     else
(1)   38/   2CD46 :                                             .__pos: set             -1
(1)   38/   2CD46 :                                     endif
(1)   38/   2CD46 :                     
(1)   38/   2CD46 :                             endm
(1)   38/   2CD46 :                     
(1)   38/   2CD46 : 4EB9 0002 D140                      jsr             __global__ErrorHandler
(1)   38/   2CD4C :  (MACRO-2)                           __FSTRING_GenerateDecodedString "ADDRESS ERROR"
(1)   38/   2CD4C :                     
(1)   38/   2CD4C : =$0                          .__lpos:        set             0               ; start position
(1)   38/   2CD4C : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("ADDRESS ERROR", "%<")
(1)   38/   2CD4C :                     
(1)   38/   2CD4C :                             while (.__pos>=0)
(1)   38/   2CD4C :                     
(1)   38/   2CD4C :                                     ; Write part of "ADDRESS ERROR" before % token
(1)   38/   2CD4C :                                     if (.__pos-.__lpos>0)
(1)   38/   2CD4C :                                             dc.b    substr("ADDRESS ERROR", .__lpos, .__pos-.__lpos)
(1)   38/   2CD4C :                                     endif
(1)   38/   2CD4C :                     
(1)   38/   2CD4C :                                     ; Retrive expression in brakets following % char
(1)   38/   2CD4C :                             .__endpos:      set             strstr(substr("ADDRESS ERROR",.__pos+1,0),">")+.__pos+1 
(1)   38/   2CD4C :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ADDRESS ERROR"
(1)   38/   2CD4C :                                             .__endpos:      set             strlen("ADDRESS ERROR")-1
(1)   38/   2CD4C :                                     endif
(1)   38/   2CD4C :                             .__midpos:      set             strstr(substr("ADDRESS ERROR",.__pos+5,0)," ")+.__pos+5
(1)   38/   2CD4C :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   38/   2CD4C :                                             .__midpos:      set             .__endpos
(1)   38/   2CD4C :                             endif
(1)   38/   2CD4C :                                     .__type:                set             substr("ADDRESS ERROR",.__pos+1+1,2)             ; .type
(1)   38/   2CD4C :                     
(1)   38/   2CD4C :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   38/   2CD4C :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   38/   2CD4C :                                             .__param:       set             substr("ADDRESS ERROR",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   38/   2CD4C :                     
(1)   38/   2CD4C :                                             ; Validate format setting ("param")
(1)   38/   2CD4C :                                             if (strlen(.__param)<1)
(1)   38/   2CD4C :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   38/   2CD4C :                                             elseif (.__param=="signed")
(1)   38/   2CD4C :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   38/   2CD4C :                                             endif
(1)   38/   2CD4C :                     
(1)   38/   2CD4C :                                             if (val(.__param) < $80)
(1)   38/   2CD4C :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   38/   2CD4C :                                             endif
(1)   38/   2CD4C :                     
(1)   38/   2CD4C :                                             if (.__type==".b")
(1)   38/   2CD4C :                                                     dc.b    val(.__param)
(1)   38/   2CD4C :                                             elseif (.__type==".w")
(1)   38/   2CD4C :                                                     dc.b    val(.__param)|1
(1)   38/   2CD4C :                                             else
(1)   38/   2CD4C :                                                     dc.b    val(.__param)|3
(1)   38/   2CD4C :                                             endif
(1)   38/   2CD4C :                     
(1)   38/   2CD4C :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   38/   2CD4C :                                     else
(1)   38/   2CD4C :                                             dc.b    val(substr("ADDRESS ERROR",.__pos+1+1,.__endpos-.__pos-2))
(1)   38/   2CD4C :                                     endif
(1)   38/   2CD4C :                     
(1)   38/   2CD4C :                                     .__lpos:        set             .__endpos+1
(1)   38/   2CD4C :                                     if (strstr(substr("ADDRESS ERROR",.__pos+1,0),"%<")>=0)
(1)   38/   2CD4C :                                             .__pos: set             strstr(substr("ADDRESS ERROR",.__pos+1,0), "%<")+.__pos+1
(1)   38/   2CD4C :                                     else
(1)   38/   2CD4C :                                             .__pos: set             -1
(1)   38/   2CD4C :                                     endif
(1)   38/   2CD4C :                     
(1)   38/   2CD4C :                             endm
(1)   38/   2CD4C :                     
(1)   38/   2CD4C :                             ; Write part of "ADDRESS ERROR" before the end
(1)   38/   2CD4C : 4144 4452 4553              dc.b    substr("ADDRESS ERROR", .__lpos, 0), 0
            2CD52 : 5320 4552 524F 
            2CD58 : 5200             
(1)   38/   2CD5A :                     
(1)   38/   2CD5A :                     
(1)   38/   2CD5A : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   38/   2CD5A : A1                                          dc.b    (_eh_default|_eh_address_error)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   38/   2CD5B :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   38/   2CD5C : 4EF9 0002 D09A                              jmp             __global__ErrorHandler_PagesController  ; ... extensions controller
(1)   39/   2CD62 :                     
(1)   40/   2CD62 :                     IllegalInstr:
(1)   41/   2CD62 : (MACRO)              	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default
(1)   41/   2CD62 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "ILLEGAL INSTRUCTION"
(1)   41/   2CD62 :                     
(1)   41/   2CD62 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("ILLEGAL INSTRUCTION","%<")             ; token position
(1)   41/   2CD62 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   41/   2CD62 : ="ILLEGAL INSTRU..           .__str: set             "ILLEGAL INSTRUCTION"
(1)   41/   2CD62 :                     
(1)   41/   2CD62 :                             ; Parse "ILLEGAL INSTRUCTION" itself
(1)   41/   2CD62 :                             while (.__pos>=0)
(1)   41/   2CD62 :                     
(1)   41/   2CD62 :                             ; Find the last occurance "%<" in the "ILLEGAL INSTRUCTION"
(1)   41/   2CD62 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   41/   2CD62 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   41/   2CD62 :                                     endm
(1)   41/   2CD62 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   41/   2CD62 :                     
(1)   41/   2CD62 :                                     ; Retrive expression in brackets following % char
(1)   41/   2CD62 :                             .__endpos:      set             strstr(.__substr,">")
(1)   41/   2CD62 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ILLEGAL INSTRUCTION"
(1)   41/   2CD62 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   41/   2CD62 :                                     endif
(1)   41/   2CD62 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   41/   2CD62 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   41/   2CD62 :                                             .__midpos:      set             .__endpos
(1)   41/   2CD62 :                                     else
(1)   41/   2CD62 :                                             .__midpos:      set             .__midpos+5
(1)   41/   2CD62 :                             endif
(1)   41/   2CD62 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   41/   2CD62 :                     
(1)   41/   2CD62 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   41/   2CD62 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   41/   2CD62 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   41/   2CD62 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   41/   2CD62 :                     
(1)   41/   2CD62 :                                             if (.__type==".b")
(1)   41/   2CD62 :                                                     subq.w  #2, sp
(1)   41/   2CD62 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   41/   2CD62 :                                                     .__sp:  set             .__sp+2
(1)   41/   2CD62 :                     
(1)   41/   2CD62 :                                             elseif (.__type==".w")
(1)   41/   2CD62 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   41/   2CD62 :                                                     .__sp:  set             .__sp+2
(1)   41/   2CD62 :                     
(1)   41/   2CD62 :                                             elseif (.__type==".l")
(1)   41/   2CD62 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   41/   2CD62 :                                                     .__sp:  set             .__sp+4
(1)   41/   2CD62 :                     
(1)   41/   2CD62 :                                             else
(1)   41/   2CD62 :                                                     error "Unrecognized type in "ILLEGAL INSTRUCTION" operand: \{.__type}"
(1)   41/   2CD62 :                                             endif
(1)   41/   2CD62 :                     
(1)   41/   2CD62 :                                     endif
(1)   41/   2CD62 :                     
(1)   41/   2CD62 :                                     ; Cut "ILLEGAL INSTRUCTION"
(1)   41/   2CD62 :                                     if (.__pos>0)
(1)   41/   2CD62 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   41/   2CD62 :                                             .__pos: set             strstr(.__str,"%<")
(1)   41/   2CD62 :                                     else
(1)   41/   2CD62 :                                             .__pos: set             -1
(1)   41/   2CD62 :                                     endif
(1)   41/   2CD62 :                     
(1)   41/   2CD62 :                             endm
(1)   41/   2CD62 :                     
(1)   41/   2CD62 : 4EB9 0002 D140                      jsr             __global__ErrorHandler
(1)   41/   2CD68 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "ILLEGAL INSTRUCTION"
(1)   41/   2CD68 :                     
(1)   41/   2CD68 : =$0                          .__lpos:        set             0               ; start position
(1)   41/   2CD68 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("ILLEGAL INSTRUCTION", "%<")
(1)   41/   2CD68 :                     
(1)   41/   2CD68 :                             while (.__pos>=0)
(1)   41/   2CD68 :                     
(1)   41/   2CD68 :                                     ; Write part of "ILLEGAL INSTRUCTION" before % token
(1)   41/   2CD68 :                                     if (.__pos-.__lpos>0)
(1)   41/   2CD68 :                                             dc.b    substr("ILLEGAL INSTRUCTION", .__lpos, .__pos-.__lpos)
(1)   41/   2CD68 :                                     endif
(1)   41/   2CD68 :                     
(1)   41/   2CD68 :                                     ; Retrive expression in brakets following % char
(1)   41/   2CD68 :                             .__endpos:      set             strstr(substr("ILLEGAL INSTRUCTION",.__pos+1,0),">")+.__pos+1 
(1)   41/   2CD68 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ILLEGAL INSTRUCTION"
(1)   41/   2CD68 :                                             .__endpos:      set             strlen("ILLEGAL INSTRUCTION")-1
(1)   41/   2CD68 :                                     endif
(1)   41/   2CD68 :                             .__midpos:      set             strstr(substr("ILLEGAL INSTRUCTION",.__pos+5,0)," ")+.__pos+5
(1)   41/   2CD68 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   41/   2CD68 :                                             .__midpos:      set             .__endpos
(1)   41/   2CD68 :                             endif
(1)   41/   2CD68 :                                     .__type:                set             substr("ILLEGAL INSTRUCTION",.__pos+1+1,2)             ; .type
(1)   41/   2CD68 :                     
(1)   41/   2CD68 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   41/   2CD68 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   41/   2CD68 :                                             .__param:       set             substr("ILLEGAL INSTRUCTION",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   41/   2CD68 :                     
(1)   41/   2CD68 :                                             ; Validate format setting ("param")
(1)   41/   2CD68 :                                             if (strlen(.__param)<1)
(1)   41/   2CD68 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   41/   2CD68 :                                             elseif (.__param=="signed")
(1)   41/   2CD68 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   41/   2CD68 :                                             endif
(1)   41/   2CD68 :                     
(1)   41/   2CD68 :                                             if (val(.__param) < $80)
(1)   41/   2CD68 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   41/   2CD68 :                                             endif
(1)   41/   2CD68 :                     
(1)   41/   2CD68 :                                             if (.__type==".b")
(1)   41/   2CD68 :                                                     dc.b    val(.__param)
(1)   41/   2CD68 :                                             elseif (.__type==".w")
(1)   41/   2CD68 :                                                     dc.b    val(.__param)|1
(1)   41/   2CD68 :                                             else
(1)   41/   2CD68 :                                                     dc.b    val(.__param)|3
(1)   41/   2CD68 :                                             endif
(1)   41/   2CD68 :                     
(1)   41/   2CD68 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   41/   2CD68 :                                     else
(1)   41/   2CD68 :                                             dc.b    val(substr("ILLEGAL INSTRUCTION",.__pos+1+1,.__endpos-.__pos-2))
(1)   41/   2CD68 :                                     endif
(1)   41/   2CD68 :                     
(1)   41/   2CD68 :                                     .__lpos:        set             .__endpos+1
(1)   41/   2CD68 :                                     if (strstr(substr("ILLEGAL INSTRUCTION",.__pos+1,0),"%<")>=0)
(1)   41/   2CD68 :                                             .__pos: set             strstr(substr("ILLEGAL INSTRUCTION",.__pos+1,0), "%<")+.__pos+1
(1)   41/   2CD68 :                                     else
(1)   41/   2CD68 :                                             .__pos: set             -1
(1)   41/   2CD68 :                                     endif
(1)   41/   2CD68 :                     
(1)   41/   2CD68 :                             endm
(1)   41/   2CD68 :                     
(1)   41/   2CD68 :                             ; Write part of "ILLEGAL INSTRUCTION" before the end
(1)   41/   2CD68 : 494C 4C45 4741              dc.b    substr("ILLEGAL INSTRUCTION", .__lpos, 0), 0
            2CD6E : 4C20 494E 5354 
            2CD74 : 5255 4354 494F 
            2CD7A : 4E00             
(1)   41/   2CD7C :                     
(1)   41/   2CD7C :                     
(1)   41/   2CD7C : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   41/   2CD7C : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   41/   2CD7D :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   41/   2CD7E : 4EF9 0002 D09A                              jmp             __global__ErrorHandler_PagesController  ; ... extensions controller
(1)   42/   2CD84 :                     
(1)   43/   2CD84 :                     ZeroDivide:
(1)   44/   2CD84 : (MACRO)              	__ErrorMessage "ZERO DIVIDE", _eh_default
(1)   44/   2CD84 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "ZERO DIVIDE"
(1)   44/   2CD84 :                     
(1)   44/   2CD84 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("ZERO DIVIDE","%<")             ; token position
(1)   44/   2CD84 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   44/   2CD84 : ="ZERO DIVIDE"               .__str: set             "ZERO DIVIDE"
(1)   44/   2CD84 :                     
(1)   44/   2CD84 :                             ; Parse "ZERO DIVIDE" itself
(1)   44/   2CD84 :                             while (.__pos>=0)
(1)   44/   2CD84 :                     
(1)   44/   2CD84 :                             ; Find the last occurance "%<" in the "ZERO DIVIDE"
(1)   44/   2CD84 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   44/   2CD84 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   44/   2CD84 :                                     endm
(1)   44/   2CD84 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   44/   2CD84 :                     
(1)   44/   2CD84 :                                     ; Retrive expression in brackets following % char
(1)   44/   2CD84 :                             .__endpos:      set             strstr(.__substr,">")
(1)   44/   2CD84 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ZERO DIVIDE"
(1)   44/   2CD84 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   44/   2CD84 :                                     endif
(1)   44/   2CD84 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   44/   2CD84 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   44/   2CD84 :                                             .__midpos:      set             .__endpos
(1)   44/   2CD84 :                                     else
(1)   44/   2CD84 :                                             .__midpos:      set             .__midpos+5
(1)   44/   2CD84 :                             endif
(1)   44/   2CD84 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   44/   2CD84 :                     
(1)   44/   2CD84 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   44/   2CD84 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   44/   2CD84 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   44/   2CD84 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   44/   2CD84 :                     
(1)   44/   2CD84 :                                             if (.__type==".b")
(1)   44/   2CD84 :                                                     subq.w  #2, sp
(1)   44/   2CD84 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   44/   2CD84 :                                                     .__sp:  set             .__sp+2
(1)   44/   2CD84 :                     
(1)   44/   2CD84 :                                             elseif (.__type==".w")
(1)   44/   2CD84 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   44/   2CD84 :                                                     .__sp:  set             .__sp+2
(1)   44/   2CD84 :                     
(1)   44/   2CD84 :                                             elseif (.__type==".l")
(1)   44/   2CD84 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   44/   2CD84 :                                                     .__sp:  set             .__sp+4
(1)   44/   2CD84 :                     
(1)   44/   2CD84 :                                             else
(1)   44/   2CD84 :                                                     error "Unrecognized type in "ZERO DIVIDE" operand: \{.__type}"
(1)   44/   2CD84 :                                             endif
(1)   44/   2CD84 :                     
(1)   44/   2CD84 :                                     endif
(1)   44/   2CD84 :                     
(1)   44/   2CD84 :                                     ; Cut "ZERO DIVIDE"
(1)   44/   2CD84 :                                     if (.__pos>0)
(1)   44/   2CD84 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   44/   2CD84 :                                             .__pos: set             strstr(.__str,"%<")
(1)   44/   2CD84 :                                     else
(1)   44/   2CD84 :                                             .__pos: set             -1
(1)   44/   2CD84 :                                     endif
(1)   44/   2CD84 :                     
(1)   44/   2CD84 :                             endm
(1)   44/   2CD84 :                     
(1)   44/   2CD84 : 4EB9 0002 D140                      jsr             __global__ErrorHandler
(1)   44/   2CD8A :  (MACRO-2)                           __FSTRING_GenerateDecodedString "ZERO DIVIDE"
(1)   44/   2CD8A :                     
(1)   44/   2CD8A : =$0                          .__lpos:        set             0               ; start position
(1)   44/   2CD8A : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("ZERO DIVIDE", "%<")
(1)   44/   2CD8A :                     
(1)   44/   2CD8A :                             while (.__pos>=0)
(1)   44/   2CD8A :                     
(1)   44/   2CD8A :                                     ; Write part of "ZERO DIVIDE" before % token
(1)   44/   2CD8A :                                     if (.__pos-.__lpos>0)
(1)   44/   2CD8A :                                             dc.b    substr("ZERO DIVIDE", .__lpos, .__pos-.__lpos)
(1)   44/   2CD8A :                                     endif
(1)   44/   2CD8A :                     
(1)   44/   2CD8A :                                     ; Retrive expression in brakets following % char
(1)   44/   2CD8A :                             .__endpos:      set             strstr(substr("ZERO DIVIDE",.__pos+1,0),">")+.__pos+1 
(1)   44/   2CD8A :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ZERO DIVIDE"
(1)   44/   2CD8A :                                             .__endpos:      set             strlen("ZERO DIVIDE")-1
(1)   44/   2CD8A :                                     endif
(1)   44/   2CD8A :                             .__midpos:      set             strstr(substr("ZERO DIVIDE",.__pos+5,0)," ")+.__pos+5
(1)   44/   2CD8A :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   44/   2CD8A :                                             .__midpos:      set             .__endpos
(1)   44/   2CD8A :                             endif
(1)   44/   2CD8A :                                     .__type:                set             substr("ZERO DIVIDE",.__pos+1+1,2)             ; .type
(1)   44/   2CD8A :                     
(1)   44/   2CD8A :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   44/   2CD8A :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   44/   2CD8A :                                             .__param:       set             substr("ZERO DIVIDE",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   44/   2CD8A :                     
(1)   44/   2CD8A :                                             ; Validate format setting ("param")
(1)   44/   2CD8A :                                             if (strlen(.__param)<1)
(1)   44/   2CD8A :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   44/   2CD8A :                                             elseif (.__param=="signed")
(1)   44/   2CD8A :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   44/   2CD8A :                                             endif
(1)   44/   2CD8A :                     
(1)   44/   2CD8A :                                             if (val(.__param) < $80)
(1)   44/   2CD8A :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   44/   2CD8A :                                             endif
(1)   44/   2CD8A :                     
(1)   44/   2CD8A :                                             if (.__type==".b")
(1)   44/   2CD8A :                                                     dc.b    val(.__param)
(1)   44/   2CD8A :                                             elseif (.__type==".w")
(1)   44/   2CD8A :                                                     dc.b    val(.__param)|1
(1)   44/   2CD8A :                                             else
(1)   44/   2CD8A :                                                     dc.b    val(.__param)|3
(1)   44/   2CD8A :                                             endif
(1)   44/   2CD8A :                     
(1)   44/   2CD8A :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   44/   2CD8A :                                     else
(1)   44/   2CD8A :                                             dc.b    val(substr("ZERO DIVIDE",.__pos+1+1,.__endpos-.__pos-2))
(1)   44/   2CD8A :                                     endif
(1)   44/   2CD8A :                     
(1)   44/   2CD8A :                                     .__lpos:        set             .__endpos+1
(1)   44/   2CD8A :                                     if (strstr(substr("ZERO DIVIDE",.__pos+1,0),"%<")>=0)
(1)   44/   2CD8A :                                             .__pos: set             strstr(substr("ZERO DIVIDE",.__pos+1,0), "%<")+.__pos+1
(1)   44/   2CD8A :                                     else
(1)   44/   2CD8A :                                             .__pos: set             -1
(1)   44/   2CD8A :                                     endif
(1)   44/   2CD8A :                     
(1)   44/   2CD8A :                             endm
(1)   44/   2CD8A :                     
(1)   44/   2CD8A :                             ; Write part of "ZERO DIVIDE" before the end
(1)   44/   2CD8A : 5A45 524F 2044              dc.b    substr("ZERO DIVIDE", .__lpos, 0), 0
            2CD90 : 4956 4944 4500    
(1)   44/   2CD96 :                     
(1)   44/   2CD96 :                     
(1)   44/   2CD96 : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   44/   2CD96 : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   44/   2CD97 :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   44/   2CD98 : 4EF9 0002 D09A                              jmp             __global__ErrorHandler_PagesController  ; ... extensions controller
(1)   45/   2CD9E :                     
(1)   46/   2CD9E :                     ChkInstr:
(1)   47/   2CD9E : (MACRO)              	__ErrorMessage "CHK INSTRUCTION", _eh_default
(1)   47/   2CD9E :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "CHK INSTRUCTION"
(1)   47/   2CD9E :                     
(1)   47/   2CD9E : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("CHK INSTRUCTION","%<")             ; token position
(1)   47/   2CD9E : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   47/   2CD9E : ="CHK INSTRUCTION"           .__str: set             "CHK INSTRUCTION"
(1)   47/   2CD9E :                     
(1)   47/   2CD9E :                             ; Parse "CHK INSTRUCTION" itself
(1)   47/   2CD9E :                             while (.__pos>=0)
(1)   47/   2CD9E :                     
(1)   47/   2CD9E :                             ; Find the last occurance "%<" in the "CHK INSTRUCTION"
(1)   47/   2CD9E :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   47/   2CD9E :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   47/   2CD9E :                                     endm
(1)   47/   2CD9E :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   47/   2CD9E :                     
(1)   47/   2CD9E :                                     ; Retrive expression in brackets following % char
(1)   47/   2CD9E :                             .__endpos:      set             strstr(.__substr,">")
(1)   47/   2CD9E :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "CHK INSTRUCTION"
(1)   47/   2CD9E :                                             .__endpos:      set             strlen(.__substr)-1
(1)   47/   2CD9E :                                     endif
(1)   47/   2CD9E :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   47/   2CD9E :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   47/   2CD9E :                                             .__midpos:      set             .__endpos
(1)   47/   2CD9E :                                     else
(1)   47/   2CD9E :                                             .__midpos:      set             .__midpos+5
(1)   47/   2CD9E :                             endif
(1)   47/   2CD9E :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   47/   2CD9E :                     
(1)   47/   2CD9E :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   47/   2CD9E :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   47/   2CD9E :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   47/   2CD9E :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   47/   2CD9E :                     
(1)   47/   2CD9E :                                             if (.__type==".b")
(1)   47/   2CD9E :                                                     subq.w  #2, sp
(1)   47/   2CD9E :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   47/   2CD9E :                                                     .__sp:  set             .__sp+2
(1)   47/   2CD9E :                     
(1)   47/   2CD9E :                                             elseif (.__type==".w")
(1)   47/   2CD9E :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   47/   2CD9E :                                                     .__sp:  set             .__sp+2
(1)   47/   2CD9E :                     
(1)   47/   2CD9E :                                             elseif (.__type==".l")
(1)   47/   2CD9E :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   47/   2CD9E :                                                     .__sp:  set             .__sp+4
(1)   47/   2CD9E :                     
(1)   47/   2CD9E :                                             else
(1)   47/   2CD9E :                                                     error "Unrecognized type in "CHK INSTRUCTION" operand: \{.__type}"
(1)   47/   2CD9E :                                             endif
(1)   47/   2CD9E :                     
(1)   47/   2CD9E :                                     endif
(1)   47/   2CD9E :                     
(1)   47/   2CD9E :                                     ; Cut "CHK INSTRUCTION"
(1)   47/   2CD9E :                                     if (.__pos>0)
(1)   47/   2CD9E :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   47/   2CD9E :                                             .__pos: set             strstr(.__str,"%<")
(1)   47/   2CD9E :                                     else
(1)   47/   2CD9E :                                             .__pos: set             -1
(1)   47/   2CD9E :                                     endif
(1)   47/   2CD9E :                     
(1)   47/   2CD9E :                             endm
(1)   47/   2CD9E :                     
(1)   47/   2CD9E : 4EB9 0002 D140                      jsr             __global__ErrorHandler
(1)   47/   2CDA4 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "CHK INSTRUCTION"
(1)   47/   2CDA4 :                     
(1)   47/   2CDA4 : =$0                          .__lpos:        set             0               ; start position
(1)   47/   2CDA4 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("CHK INSTRUCTION", "%<")
(1)   47/   2CDA4 :                     
(1)   47/   2CDA4 :                             while (.__pos>=0)
(1)   47/   2CDA4 :                     
(1)   47/   2CDA4 :                                     ; Write part of "CHK INSTRUCTION" before % token
(1)   47/   2CDA4 :                                     if (.__pos-.__lpos>0)
(1)   47/   2CDA4 :                                             dc.b    substr("CHK INSTRUCTION", .__lpos, .__pos-.__lpos)
(1)   47/   2CDA4 :                                     endif
(1)   47/   2CDA4 :                     
(1)   47/   2CDA4 :                                     ; Retrive expression in brakets following % char
(1)   47/   2CDA4 :                             .__endpos:      set             strstr(substr("CHK INSTRUCTION",.__pos+1,0),">")+.__pos+1 
(1)   47/   2CDA4 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "CHK INSTRUCTION"
(1)   47/   2CDA4 :                                             .__endpos:      set             strlen("CHK INSTRUCTION")-1
(1)   47/   2CDA4 :                                     endif
(1)   47/   2CDA4 :                             .__midpos:      set             strstr(substr("CHK INSTRUCTION",.__pos+5,0)," ")+.__pos+5
(1)   47/   2CDA4 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   47/   2CDA4 :                                             .__midpos:      set             .__endpos
(1)   47/   2CDA4 :                             endif
(1)   47/   2CDA4 :                                     .__type:                set             substr("CHK INSTRUCTION",.__pos+1+1,2)             ; .type
(1)   47/   2CDA4 :                     
(1)   47/   2CDA4 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   47/   2CDA4 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   47/   2CDA4 :                                             .__param:       set             substr("CHK INSTRUCTION",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   47/   2CDA4 :                     
(1)   47/   2CDA4 :                                             ; Validate format setting ("param")
(1)   47/   2CDA4 :                                             if (strlen(.__param)<1)
(1)   47/   2CDA4 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   47/   2CDA4 :                                             elseif (.__param=="signed")
(1)   47/   2CDA4 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   47/   2CDA4 :                                             endif
(1)   47/   2CDA4 :                     
(1)   47/   2CDA4 :                                             if (val(.__param) < $80)
(1)   47/   2CDA4 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   47/   2CDA4 :                                             endif
(1)   47/   2CDA4 :                     
(1)   47/   2CDA4 :                                             if (.__type==".b")
(1)   47/   2CDA4 :                                                     dc.b    val(.__param)
(1)   47/   2CDA4 :                                             elseif (.__type==".w")
(1)   47/   2CDA4 :                                                     dc.b    val(.__param)|1
(1)   47/   2CDA4 :                                             else
(1)   47/   2CDA4 :                                                     dc.b    val(.__param)|3
(1)   47/   2CDA4 :                                             endif
(1)   47/   2CDA4 :                     
(1)   47/   2CDA4 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   47/   2CDA4 :                                     else
(1)   47/   2CDA4 :                                             dc.b    val(substr("CHK INSTRUCTION",.__pos+1+1,.__endpos-.__pos-2))
(1)   47/   2CDA4 :                                     endif
(1)   47/   2CDA4 :                     
(1)   47/   2CDA4 :                                     .__lpos:        set             .__endpos+1
(1)   47/   2CDA4 :                                     if (strstr(substr("CHK INSTRUCTION",.__pos+1,0),"%<")>=0)
(1)   47/   2CDA4 :                                             .__pos: set             strstr(substr("CHK INSTRUCTION",.__pos+1,0), "%<")+.__pos+1
(1)   47/   2CDA4 :                                     else
(1)   47/   2CDA4 :                                             .__pos: set             -1
(1)   47/   2CDA4 :                                     endif
(1)   47/   2CDA4 :                     
(1)   47/   2CDA4 :                             endm
(1)   47/   2CDA4 :                     
(1)   47/   2CDA4 :                             ; Write part of "CHK INSTRUCTION" before the end
(1)   47/   2CDA4 : 4348 4B20 494E              dc.b    substr("CHK INSTRUCTION", .__lpos, 0), 0
            2CDAA : 5354 5255 4354 
            2CDB0 : 494F 4E00          
(1)   47/   2CDB4 :                     
(1)   47/   2CDB4 :                     
(1)   47/   2CDB4 : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   47/   2CDB4 : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   47/   2CDB5 :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   47/   2CDB6 : 4EF9 0002 D09A                              jmp             __global__ErrorHandler_PagesController  ; ... extensions controller
(1)   48/   2CDBC :                     
(1)   49/   2CDBC :                     TrapvInstr:
(1)   50/   2CDBC : (MACRO)              	__ErrorMessage "TRAPV INSTRUCTION", _eh_default
(1)   50/   2CDBC :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "TRAPV INSTRUCTION"
(1)   50/   2CDBC :                     
(1)   50/   2CDBC : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("TRAPV INSTRUCTION","%<")             ; token position
(1)   50/   2CDBC : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   50/   2CDBC : ="TRAPV INSTRUCT..           .__str: set             "TRAPV INSTRUCTION"
(1)   50/   2CDBC :                     
(1)   50/   2CDBC :                             ; Parse "TRAPV INSTRUCTION" itself
(1)   50/   2CDBC :                             while (.__pos>=0)
(1)   50/   2CDBC :                     
(1)   50/   2CDBC :                             ; Find the last occurance "%<" in the "TRAPV INSTRUCTION"
(1)   50/   2CDBC :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   50/   2CDBC :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   50/   2CDBC :                                     endm
(1)   50/   2CDBC :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   50/   2CDBC :                     
(1)   50/   2CDBC :                                     ; Retrive expression in brackets following % char
(1)   50/   2CDBC :                             .__endpos:      set             strstr(.__substr,">")
(1)   50/   2CDBC :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "TRAPV INSTRUCTION"
(1)   50/   2CDBC :                                             .__endpos:      set             strlen(.__substr)-1
(1)   50/   2CDBC :                                     endif
(1)   50/   2CDBC :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   50/   2CDBC :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   50/   2CDBC :                                             .__midpos:      set             .__endpos
(1)   50/   2CDBC :                                     else
(1)   50/   2CDBC :                                             .__midpos:      set             .__midpos+5
(1)   50/   2CDBC :                             endif
(1)   50/   2CDBC :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   50/   2CDBC :                     
(1)   50/   2CDBC :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   50/   2CDBC :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   50/   2CDBC :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   50/   2CDBC :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   50/   2CDBC :                     
(1)   50/   2CDBC :                                             if (.__type==".b")
(1)   50/   2CDBC :                                                     subq.w  #2, sp
(1)   50/   2CDBC :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   50/   2CDBC :                                                     .__sp:  set             .__sp+2
(1)   50/   2CDBC :                     
(1)   50/   2CDBC :                                             elseif (.__type==".w")
(1)   50/   2CDBC :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   50/   2CDBC :                                                     .__sp:  set             .__sp+2
(1)   50/   2CDBC :                     
(1)   50/   2CDBC :                                             elseif (.__type==".l")
(1)   50/   2CDBC :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   50/   2CDBC :                                                     .__sp:  set             .__sp+4
(1)   50/   2CDBC :                     
(1)   50/   2CDBC :                                             else
(1)   50/   2CDBC :                                                     error "Unrecognized type in "TRAPV INSTRUCTION" operand: \{.__type}"
(1)   50/   2CDBC :                                             endif
(1)   50/   2CDBC :                     
(1)   50/   2CDBC :                                     endif
(1)   50/   2CDBC :                     
(1)   50/   2CDBC :                                     ; Cut "TRAPV INSTRUCTION"
(1)   50/   2CDBC :                                     if (.__pos>0)
(1)   50/   2CDBC :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   50/   2CDBC :                                             .__pos: set             strstr(.__str,"%<")
(1)   50/   2CDBC :                                     else
(1)   50/   2CDBC :                                             .__pos: set             -1
(1)   50/   2CDBC :                                     endif
(1)   50/   2CDBC :                     
(1)   50/   2CDBC :                             endm
(1)   50/   2CDBC :                     
(1)   50/   2CDBC : 4EB9 0002 D140                      jsr             __global__ErrorHandler
(1)   50/   2CDC2 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "TRAPV INSTRUCTION"
(1)   50/   2CDC2 :                     
(1)   50/   2CDC2 : =$0                          .__lpos:        set             0               ; start position
(1)   50/   2CDC2 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("TRAPV INSTRUCTION", "%<")
(1)   50/   2CDC2 :                     
(1)   50/   2CDC2 :                             while (.__pos>=0)
(1)   50/   2CDC2 :                     
(1)   50/   2CDC2 :                                     ; Write part of "TRAPV INSTRUCTION" before % token
(1)   50/   2CDC2 :                                     if (.__pos-.__lpos>0)
(1)   50/   2CDC2 :                                             dc.b    substr("TRAPV INSTRUCTION", .__lpos, .__pos-.__lpos)
(1)   50/   2CDC2 :                                     endif
(1)   50/   2CDC2 :                     
(1)   50/   2CDC2 :                                     ; Retrive expression in brakets following % char
(1)   50/   2CDC2 :                             .__endpos:      set             strstr(substr("TRAPV INSTRUCTION",.__pos+1,0),">")+.__pos+1 
(1)   50/   2CDC2 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "TRAPV INSTRUCTION"
(1)   50/   2CDC2 :                                             .__endpos:      set             strlen("TRAPV INSTRUCTION")-1
(1)   50/   2CDC2 :                                     endif
(1)   50/   2CDC2 :                             .__midpos:      set             strstr(substr("TRAPV INSTRUCTION",.__pos+5,0)," ")+.__pos+5
(1)   50/   2CDC2 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   50/   2CDC2 :                                             .__midpos:      set             .__endpos
(1)   50/   2CDC2 :                             endif
(1)   50/   2CDC2 :                                     .__type:                set             substr("TRAPV INSTRUCTION",.__pos+1+1,2)             ; .type
(1)   50/   2CDC2 :                     
(1)   50/   2CDC2 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   50/   2CDC2 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   50/   2CDC2 :                                             .__param:       set             substr("TRAPV INSTRUCTION",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   50/   2CDC2 :                     
(1)   50/   2CDC2 :                                             ; Validate format setting ("param")
(1)   50/   2CDC2 :                                             if (strlen(.__param)<1)
(1)   50/   2CDC2 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   50/   2CDC2 :                                             elseif (.__param=="signed")
(1)   50/   2CDC2 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   50/   2CDC2 :                                             endif
(1)   50/   2CDC2 :                     
(1)   50/   2CDC2 :                                             if (val(.__param) < $80)
(1)   50/   2CDC2 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   50/   2CDC2 :                                             endif
(1)   50/   2CDC2 :                     
(1)   50/   2CDC2 :                                             if (.__type==".b")
(1)   50/   2CDC2 :                                                     dc.b    val(.__param)
(1)   50/   2CDC2 :                                             elseif (.__type==".w")
(1)   50/   2CDC2 :                                                     dc.b    val(.__param)|1
(1)   50/   2CDC2 :                                             else
(1)   50/   2CDC2 :                                                     dc.b    val(.__param)|3
(1)   50/   2CDC2 :                                             endif
(1)   50/   2CDC2 :                     
(1)   50/   2CDC2 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   50/   2CDC2 :                                     else
(1)   50/   2CDC2 :                                             dc.b    val(substr("TRAPV INSTRUCTION",.__pos+1+1,.__endpos-.__pos-2))
(1)   50/   2CDC2 :                                     endif
(1)   50/   2CDC2 :                     
(1)   50/   2CDC2 :                                     .__lpos:        set             .__endpos+1
(1)   50/   2CDC2 :                                     if (strstr(substr("TRAPV INSTRUCTION",.__pos+1,0),"%<")>=0)
(1)   50/   2CDC2 :                                             .__pos: set             strstr(substr("TRAPV INSTRUCTION",.__pos+1,0), "%<")+.__pos+1
(1)   50/   2CDC2 :                                     else
(1)   50/   2CDC2 :                                             .__pos: set             -1
(1)   50/   2CDC2 :                                     endif
(1)   50/   2CDC2 :                     
(1)   50/   2CDC2 :                             endm
(1)   50/   2CDC2 :                     
(1)   50/   2CDC2 :                             ; Write part of "TRAPV INSTRUCTION" before the end
(1)   50/   2CDC2 : 5452 4150 5620              dc.b    substr("TRAPV INSTRUCTION", .__lpos, 0), 0
            2CDC8 : 494E 5354 5255 
            2CDCE : 4354 494F 4E00    
(1)   50/   2CDD4 :                     
(1)   50/   2CDD4 :                     
(1)   50/   2CDD4 : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   50/   2CDD4 : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   50/   2CDD5 :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   50/   2CDD6 : 4EF9 0002 D09A                              jmp             __global__ErrorHandler_PagesController  ; ... extensions controller
(1)   51/   2CDDC :                     
(1)   52/   2CDDC :                     PrivilegeViol:
(1)   53/   2CDDC : (MACRO)              	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default
(1)   53/   2CDDC :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "PRIVILEGE VIOLATION"
(1)   53/   2CDDC :                     
(1)   53/   2CDDC : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("PRIVILEGE VIOLATION","%<")             ; token position
(1)   53/   2CDDC : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   53/   2CDDC : ="PRIVILEGE VIOL..           .__str: set             "PRIVILEGE VIOLATION"
(1)   53/   2CDDC :                     
(1)   53/   2CDDC :                             ; Parse "PRIVILEGE VIOLATION" itself
(1)   53/   2CDDC :                             while (.__pos>=0)
(1)   53/   2CDDC :                     
(1)   53/   2CDDC :                             ; Find the last occurance "%<" in the "PRIVILEGE VIOLATION"
(1)   53/   2CDDC :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   53/   2CDDC :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   53/   2CDDC :                                     endm
(1)   53/   2CDDC :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   53/   2CDDC :                     
(1)   53/   2CDDC :                                     ; Retrive expression in brackets following % char
(1)   53/   2CDDC :                             .__endpos:      set             strstr(.__substr,">")
(1)   53/   2CDDC :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "PRIVILEGE VIOLATION"
(1)   53/   2CDDC :                                             .__endpos:      set             strlen(.__substr)-1
(1)   53/   2CDDC :                                     endif
(1)   53/   2CDDC :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   53/   2CDDC :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   53/   2CDDC :                                             .__midpos:      set             .__endpos
(1)   53/   2CDDC :                                     else
(1)   53/   2CDDC :                                             .__midpos:      set             .__midpos+5
(1)   53/   2CDDC :                             endif
(1)   53/   2CDDC :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   53/   2CDDC :                     
(1)   53/   2CDDC :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   53/   2CDDC :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   53/   2CDDC :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   53/   2CDDC :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   53/   2CDDC :                     
(1)   53/   2CDDC :                                             if (.__type==".b")
(1)   53/   2CDDC :                                                     subq.w  #2, sp
(1)   53/   2CDDC :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   53/   2CDDC :                                                     .__sp:  set             .__sp+2
(1)   53/   2CDDC :                     
(1)   53/   2CDDC :                                             elseif (.__type==".w")
(1)   53/   2CDDC :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   53/   2CDDC :                                                     .__sp:  set             .__sp+2
(1)   53/   2CDDC :                     
(1)   53/   2CDDC :                                             elseif (.__type==".l")
(1)   53/   2CDDC :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   53/   2CDDC :                                                     .__sp:  set             .__sp+4
(1)   53/   2CDDC :                     
(1)   53/   2CDDC :                                             else
(1)   53/   2CDDC :                                                     error "Unrecognized type in "PRIVILEGE VIOLATION" operand: \{.__type}"
(1)   53/   2CDDC :                                             endif
(1)   53/   2CDDC :                     
(1)   53/   2CDDC :                                     endif
(1)   53/   2CDDC :                     
(1)   53/   2CDDC :                                     ; Cut "PRIVILEGE VIOLATION"
(1)   53/   2CDDC :                                     if (.__pos>0)
(1)   53/   2CDDC :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   53/   2CDDC :                                             .__pos: set             strstr(.__str,"%<")
(1)   53/   2CDDC :                                     else
(1)   53/   2CDDC :                                             .__pos: set             -1
(1)   53/   2CDDC :                                     endif
(1)   53/   2CDDC :                     
(1)   53/   2CDDC :                             endm
(1)   53/   2CDDC :                     
(1)   53/   2CDDC : 4EB9 0002 D140                      jsr             __global__ErrorHandler
(1)   53/   2CDE2 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "PRIVILEGE VIOLATION"
(1)   53/   2CDE2 :                     
(1)   53/   2CDE2 : =$0                          .__lpos:        set             0               ; start position
(1)   53/   2CDE2 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("PRIVILEGE VIOLATION", "%<")
(1)   53/   2CDE2 :                     
(1)   53/   2CDE2 :                             while (.__pos>=0)
(1)   53/   2CDE2 :                     
(1)   53/   2CDE2 :                                     ; Write part of "PRIVILEGE VIOLATION" before % token
(1)   53/   2CDE2 :                                     if (.__pos-.__lpos>0)
(1)   53/   2CDE2 :                                             dc.b    substr("PRIVILEGE VIOLATION", .__lpos, .__pos-.__lpos)
(1)   53/   2CDE2 :                                     endif
(1)   53/   2CDE2 :                     
(1)   53/   2CDE2 :                                     ; Retrive expression in brakets following % char
(1)   53/   2CDE2 :                             .__endpos:      set             strstr(substr("PRIVILEGE VIOLATION",.__pos+1,0),">")+.__pos+1 
(1)   53/   2CDE2 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "PRIVILEGE VIOLATION"
(1)   53/   2CDE2 :                                             .__endpos:      set             strlen("PRIVILEGE VIOLATION")-1
(1)   53/   2CDE2 :                                     endif
(1)   53/   2CDE2 :                             .__midpos:      set             strstr(substr("PRIVILEGE VIOLATION",.__pos+5,0)," ")+.__pos+5
(1)   53/   2CDE2 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   53/   2CDE2 :                                             .__midpos:      set             .__endpos
(1)   53/   2CDE2 :                             endif
(1)   53/   2CDE2 :                                     .__type:                set             substr("PRIVILEGE VIOLATION",.__pos+1+1,2)             ; .type
(1)   53/   2CDE2 :                     
(1)   53/   2CDE2 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   53/   2CDE2 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   53/   2CDE2 :                                             .__param:       set             substr("PRIVILEGE VIOLATION",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   53/   2CDE2 :                     
(1)   53/   2CDE2 :                                             ; Validate format setting ("param")
(1)   53/   2CDE2 :                                             if (strlen(.__param)<1)
(1)   53/   2CDE2 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   53/   2CDE2 :                                             elseif (.__param=="signed")
(1)   53/   2CDE2 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   53/   2CDE2 :                                             endif
(1)   53/   2CDE2 :                     
(1)   53/   2CDE2 :                                             if (val(.__param) < $80)
(1)   53/   2CDE2 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   53/   2CDE2 :                                             endif
(1)   53/   2CDE2 :                     
(1)   53/   2CDE2 :                                             if (.__type==".b")
(1)   53/   2CDE2 :                                                     dc.b    val(.__param)
(1)   53/   2CDE2 :                                             elseif (.__type==".w")
(1)   53/   2CDE2 :                                                     dc.b    val(.__param)|1
(1)   53/   2CDE2 :                                             else
(1)   53/   2CDE2 :                                                     dc.b    val(.__param)|3
(1)   53/   2CDE2 :                                             endif
(1)   53/   2CDE2 :                     
(1)   53/   2CDE2 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   53/   2CDE2 :                                     else
(1)   53/   2CDE2 :                                             dc.b    val(substr("PRIVILEGE VIOLATION",.__pos+1+1,.__endpos-.__pos-2))
(1)   53/   2CDE2 :                                     endif
(1)   53/   2CDE2 :                     
(1)   53/   2CDE2 :                                     .__lpos:        set             .__endpos+1
(1)   53/   2CDE2 :                                     if (strstr(substr("PRIVILEGE VIOLATION",.__pos+1,0),"%<")>=0)
(1)   53/   2CDE2 :                                             .__pos: set             strstr(substr("PRIVILEGE VIOLATION",.__pos+1,0), "%<")+.__pos+1
(1)   53/   2CDE2 :                                     else
(1)   53/   2CDE2 :                                             .__pos: set             -1
(1)   53/   2CDE2 :                                     endif
(1)   53/   2CDE2 :                     
(1)   53/   2CDE2 :                             endm
(1)   53/   2CDE2 :                     
(1)   53/   2CDE2 :                             ; Write part of "PRIVILEGE VIOLATION" before the end
(1)   53/   2CDE2 : 5052 4956 494C              dc.b    substr("PRIVILEGE VIOLATION", .__lpos, 0), 0
            2CDE8 : 4547 4520 5649 
            2CDEE : 4F4C 4154 494F 
            2CDF4 : 4E00             
(1)   53/   2CDF6 :                     
(1)   53/   2CDF6 :                     
(1)   53/   2CDF6 : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   53/   2CDF6 : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   53/   2CDF7 :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   53/   2CDF8 : 4EF9 0002 D09A                              jmp             __global__ErrorHandler_PagesController  ; ... extensions controller
(1)   54/   2CDFE :                     
(1)   55/   2CDFE :                     Trace:
(1)   56/   2CDFE : (MACRO)              	__ErrorMessage "TRACE", _eh_default
(1)   56/   2CDFE :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "TRACE"
(1)   56/   2CDFE :                     
(1)   56/   2CDFE : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("TRACE","%<")             ; token position
(1)   56/   2CDFE : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   56/   2CDFE : ="TRACE"                     .__str: set             "TRACE"
(1)   56/   2CDFE :                     
(1)   56/   2CDFE :                             ; Parse "TRACE" itself
(1)   56/   2CDFE :                             while (.__pos>=0)
(1)   56/   2CDFE :                     
(1)   56/   2CDFE :                             ; Find the last occurance "%<" in the "TRACE"
(1)   56/   2CDFE :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   56/   2CDFE :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   56/   2CDFE :                                     endm
(1)   56/   2CDFE :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   56/   2CDFE :                     
(1)   56/   2CDFE :                                     ; Retrive expression in brackets following % char
(1)   56/   2CDFE :                             .__endpos:      set             strstr(.__substr,">")
(1)   56/   2CDFE :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "TRACE"
(1)   56/   2CDFE :                                             .__endpos:      set             strlen(.__substr)-1
(1)   56/   2CDFE :                                     endif
(1)   56/   2CDFE :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   56/   2CDFE :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   56/   2CDFE :                                             .__midpos:      set             .__endpos
(1)   56/   2CDFE :                                     else
(1)   56/   2CDFE :                                             .__midpos:      set             .__midpos+5
(1)   56/   2CDFE :                             endif
(1)   56/   2CDFE :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   56/   2CDFE :                     
(1)   56/   2CDFE :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   56/   2CDFE :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   56/   2CDFE :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   56/   2CDFE :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   56/   2CDFE :                     
(1)   56/   2CDFE :                                             if (.__type==".b")
(1)   56/   2CDFE :                                                     subq.w  #2, sp
(1)   56/   2CDFE :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   56/   2CDFE :                                                     .__sp:  set             .__sp+2
(1)   56/   2CDFE :                     
(1)   56/   2CDFE :                                             elseif (.__type==".w")
(1)   56/   2CDFE :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   56/   2CDFE :                                                     .__sp:  set             .__sp+2
(1)   56/   2CDFE :                     
(1)   56/   2CDFE :                                             elseif (.__type==".l")
(1)   56/   2CDFE :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   56/   2CDFE :                                                     .__sp:  set             .__sp+4
(1)   56/   2CDFE :                     
(1)   56/   2CDFE :                                             else
(1)   56/   2CDFE :                                                     error "Unrecognized type in "TRACE" operand: \{.__type}"
(1)   56/   2CDFE :                                             endif
(1)   56/   2CDFE :                     
(1)   56/   2CDFE :                                     endif
(1)   56/   2CDFE :                     
(1)   56/   2CDFE :                                     ; Cut "TRACE"
(1)   56/   2CDFE :                                     if (.__pos>0)
(1)   56/   2CDFE :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   56/   2CDFE :                                             .__pos: set             strstr(.__str,"%<")
(1)   56/   2CDFE :                                     else
(1)   56/   2CDFE :                                             .__pos: set             -1
(1)   56/   2CDFE :                                     endif
(1)   56/   2CDFE :                     
(1)   56/   2CDFE :                             endm
(1)   56/   2CDFE :                     
(1)   56/   2CDFE : 4EB9 0002 D140                      jsr             __global__ErrorHandler
(1)   56/   2CE04 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "TRACE"
(1)   56/   2CE04 :                     
(1)   56/   2CE04 : =$0                          .__lpos:        set             0               ; start position
(1)   56/   2CE04 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("TRACE", "%<")
(1)   56/   2CE04 :                     
(1)   56/   2CE04 :                             while (.__pos>=0)
(1)   56/   2CE04 :                     
(1)   56/   2CE04 :                                     ; Write part of "TRACE" before % token
(1)   56/   2CE04 :                                     if (.__pos-.__lpos>0)
(1)   56/   2CE04 :                                             dc.b    substr("TRACE", .__lpos, .__pos-.__lpos)
(1)   56/   2CE04 :                                     endif
(1)   56/   2CE04 :                     
(1)   56/   2CE04 :                                     ; Retrive expression in brakets following % char
(1)   56/   2CE04 :                             .__endpos:      set             strstr(substr("TRACE",.__pos+1,0),">")+.__pos+1 
(1)   56/   2CE04 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "TRACE"
(1)   56/   2CE04 :                                             .__endpos:      set             strlen("TRACE")-1
(1)   56/   2CE04 :                                     endif
(1)   56/   2CE04 :                             .__midpos:      set             strstr(substr("TRACE",.__pos+5,0)," ")+.__pos+5
(1)   56/   2CE04 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   56/   2CE04 :                                             .__midpos:      set             .__endpos
(1)   56/   2CE04 :                             endif
(1)   56/   2CE04 :                                     .__type:                set             substr("TRACE",.__pos+1+1,2)             ; .type
(1)   56/   2CE04 :                     
(1)   56/   2CE04 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   56/   2CE04 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   56/   2CE04 :                                             .__param:       set             substr("TRACE",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   56/   2CE04 :                     
(1)   56/   2CE04 :                                             ; Validate format setting ("param")
(1)   56/   2CE04 :                                             if (strlen(.__param)<1)
(1)   56/   2CE04 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   56/   2CE04 :                                             elseif (.__param=="signed")
(1)   56/   2CE04 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   56/   2CE04 :                                             endif
(1)   56/   2CE04 :                     
(1)   56/   2CE04 :                                             if (val(.__param) < $80)
(1)   56/   2CE04 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   56/   2CE04 :                                             endif
(1)   56/   2CE04 :                     
(1)   56/   2CE04 :                                             if (.__type==".b")
(1)   56/   2CE04 :                                                     dc.b    val(.__param)
(1)   56/   2CE04 :                                             elseif (.__type==".w")
(1)   56/   2CE04 :                                                     dc.b    val(.__param)|1
(1)   56/   2CE04 :                                             else
(1)   56/   2CE04 :                                                     dc.b    val(.__param)|3
(1)   56/   2CE04 :                                             endif
(1)   56/   2CE04 :                     
(1)   56/   2CE04 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   56/   2CE04 :                                     else
(1)   56/   2CE04 :                                             dc.b    val(substr("TRACE",.__pos+1+1,.__endpos-.__pos-2))
(1)   56/   2CE04 :                                     endif
(1)   56/   2CE04 :                     
(1)   56/   2CE04 :                                     .__lpos:        set             .__endpos+1
(1)   56/   2CE04 :                                     if (strstr(substr("TRACE",.__pos+1,0),"%<")>=0)
(1)   56/   2CE04 :                                             .__pos: set             strstr(substr("TRACE",.__pos+1,0), "%<")+.__pos+1
(1)   56/   2CE04 :                                     else
(1)   56/   2CE04 :                                             .__pos: set             -1
(1)   56/   2CE04 :                                     endif
(1)   56/   2CE04 :                     
(1)   56/   2CE04 :                             endm
(1)   56/   2CE04 :                     
(1)   56/   2CE04 :                             ; Write part of "TRACE" before the end
(1)   56/   2CE04 : 5452 4143 4500              dc.b    substr("TRACE", .__lpos, 0), 0
(1)   56/   2CE0A :                     
(1)   56/   2CE0A :                     
(1)   56/   2CE0A : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   56/   2CE0A : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   56/   2CE0B :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   56/   2CE0C : 4EF9 0002 D09A                              jmp             __global__ErrorHandler_PagesController  ; ... extensions controller
(1)   57/   2CE12 :                     
(1)   58/   2CE12 :                     Line1010Emu:
(1)   59/   2CE12 : (MACRO)              	__ErrorMessage "LINE 1010 EMULATOR", _eh_default
(1)   59/   2CE12 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "LINE 1010 EMULATOR"
(1)   59/   2CE12 :                     
(1)   59/   2CE12 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("LINE 1010 EMULATOR","%<")             ; token position
(1)   59/   2CE12 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   59/   2CE12 : ="LINE 1010 EMUL..           .__str: set             "LINE 1010 EMULATOR"
(1)   59/   2CE12 :                     
(1)   59/   2CE12 :                             ; Parse "LINE 1010 EMULATOR" itself
(1)   59/   2CE12 :                             while (.__pos>=0)
(1)   59/   2CE12 :                     
(1)   59/   2CE12 :                             ; Find the last occurance "%<" in the "LINE 1010 EMULATOR"
(1)   59/   2CE12 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   59/   2CE12 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   59/   2CE12 :                                     endm
(1)   59/   2CE12 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   59/   2CE12 :                     
(1)   59/   2CE12 :                                     ; Retrive expression in brackets following % char
(1)   59/   2CE12 :                             .__endpos:      set             strstr(.__substr,">")
(1)   59/   2CE12 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "LINE 1010 EMULATOR"
(1)   59/   2CE12 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   59/   2CE12 :                                     endif
(1)   59/   2CE12 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   59/   2CE12 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   59/   2CE12 :                                             .__midpos:      set             .__endpos
(1)   59/   2CE12 :                                     else
(1)   59/   2CE12 :                                             .__midpos:      set             .__midpos+5
(1)   59/   2CE12 :                             endif
(1)   59/   2CE12 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   59/   2CE12 :                     
(1)   59/   2CE12 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   59/   2CE12 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   59/   2CE12 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   59/   2CE12 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   59/   2CE12 :                     
(1)   59/   2CE12 :                                             if (.__type==".b")
(1)   59/   2CE12 :                                                     subq.w  #2, sp
(1)   59/   2CE12 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   59/   2CE12 :                                                     .__sp:  set             .__sp+2
(1)   59/   2CE12 :                     
(1)   59/   2CE12 :                                             elseif (.__type==".w")
(1)   59/   2CE12 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   59/   2CE12 :                                                     .__sp:  set             .__sp+2
(1)   59/   2CE12 :                     
(1)   59/   2CE12 :                                             elseif (.__type==".l")
(1)   59/   2CE12 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   59/   2CE12 :                                                     .__sp:  set             .__sp+4
(1)   59/   2CE12 :                     
(1)   59/   2CE12 :                                             else
(1)   59/   2CE12 :                                                     error "Unrecognized type in "LINE 1010 EMULATOR" operand: \{.__type}"
(1)   59/   2CE12 :                                             endif
(1)   59/   2CE12 :                     
(1)   59/   2CE12 :                                     endif
(1)   59/   2CE12 :                     
(1)   59/   2CE12 :                                     ; Cut "LINE 1010 EMULATOR"
(1)   59/   2CE12 :                                     if (.__pos>0)
(1)   59/   2CE12 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   59/   2CE12 :                                             .__pos: set             strstr(.__str,"%<")
(1)   59/   2CE12 :                                     else
(1)   59/   2CE12 :                                             .__pos: set             -1
(1)   59/   2CE12 :                                     endif
(1)   59/   2CE12 :                     
(1)   59/   2CE12 :                             endm
(1)   59/   2CE12 :                     
(1)   59/   2CE12 : 4EB9 0002 D140                      jsr             __global__ErrorHandler
(1)   59/   2CE18 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "LINE 1010 EMULATOR"
(1)   59/   2CE18 :                     
(1)   59/   2CE18 : =$0                          .__lpos:        set             0               ; start position
(1)   59/   2CE18 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("LINE 1010 EMULATOR", "%<")
(1)   59/   2CE18 :                     
(1)   59/   2CE18 :                             while (.__pos>=0)
(1)   59/   2CE18 :                     
(1)   59/   2CE18 :                                     ; Write part of "LINE 1010 EMULATOR" before % token
(1)   59/   2CE18 :                                     if (.__pos-.__lpos>0)
(1)   59/   2CE18 :                                             dc.b    substr("LINE 1010 EMULATOR", .__lpos, .__pos-.__lpos)
(1)   59/   2CE18 :                                     endif
(1)   59/   2CE18 :                     
(1)   59/   2CE18 :                                     ; Retrive expression in brakets following % char
(1)   59/   2CE18 :                             .__endpos:      set             strstr(substr("LINE 1010 EMULATOR",.__pos+1,0),">")+.__pos+1 
(1)   59/   2CE18 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "LINE 1010 EMULATOR"
(1)   59/   2CE18 :                                             .__endpos:      set             strlen("LINE 1010 EMULATOR")-1
(1)   59/   2CE18 :                                     endif
(1)   59/   2CE18 :                             .__midpos:      set             strstr(substr("LINE 1010 EMULATOR",.__pos+5,0)," ")+.__pos+5
(1)   59/   2CE18 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   59/   2CE18 :                                             .__midpos:      set             .__endpos
(1)   59/   2CE18 :                             endif
(1)   59/   2CE18 :                                     .__type:                set             substr("LINE 1010 EMULATOR",.__pos+1+1,2)             ; .type
(1)   59/   2CE18 :                     
(1)   59/   2CE18 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   59/   2CE18 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   59/   2CE18 :                                             .__param:       set             substr("LINE 1010 EMULATOR",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   59/   2CE18 :                     
(1)   59/   2CE18 :                                             ; Validate format setting ("param")
(1)   59/   2CE18 :                                             if (strlen(.__param)<1)
(1)   59/   2CE18 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   59/   2CE18 :                                             elseif (.__param=="signed")
(1)   59/   2CE18 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   59/   2CE18 :                                             endif
(1)   59/   2CE18 :                     
(1)   59/   2CE18 :                                             if (val(.__param) < $80)
(1)   59/   2CE18 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   59/   2CE18 :                                             endif
(1)   59/   2CE18 :                     
(1)   59/   2CE18 :                                             if (.__type==".b")
(1)   59/   2CE18 :                                                     dc.b    val(.__param)
(1)   59/   2CE18 :                                             elseif (.__type==".w")
(1)   59/   2CE18 :                                                     dc.b    val(.__param)|1
(1)   59/   2CE18 :                                             else
(1)   59/   2CE18 :                                                     dc.b    val(.__param)|3
(1)   59/   2CE18 :                                             endif
(1)   59/   2CE18 :                     
(1)   59/   2CE18 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   59/   2CE18 :                                     else
(1)   59/   2CE18 :                                             dc.b    val(substr("LINE 1010 EMULATOR",.__pos+1+1,.__endpos-.__pos-2))
(1)   59/   2CE18 :                                     endif
(1)   59/   2CE18 :                     
(1)   59/   2CE18 :                                     .__lpos:        set             .__endpos+1
(1)   59/   2CE18 :                                     if (strstr(substr("LINE 1010 EMULATOR",.__pos+1,0),"%<")>=0)
(1)   59/   2CE18 :                                             .__pos: set             strstr(substr("LINE 1010 EMULATOR",.__pos+1,0), "%<")+.__pos+1
(1)   59/   2CE18 :                                     else
(1)   59/   2CE18 :                                             .__pos: set             -1
(1)   59/   2CE18 :                                     endif
(1)   59/   2CE18 :                     
(1)   59/   2CE18 :                             endm
(1)   59/   2CE18 :                     
(1)   59/   2CE18 :                             ; Write part of "LINE 1010 EMULATOR" before the end
(1)   59/   2CE18 : 4C49 4E45 2031              dc.b    substr("LINE 1010 EMULATOR", .__lpos, 0), 0
            2CE1E : 3031 3020 454D 
            2CE24 : 554C 4154 4F52 00 
(1)   59/   2CE2B :                     
(1)   59/   2CE2B :                     
(1)   59/   2CE2B : =$0                                  .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   59/   2CE2B : 20                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   59/   2CE2C :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   59/   2CE2C : 4EF9 0002 D09A                              jmp             __global__ErrorHandler_PagesController  ; ... extensions controller
(1)   60/   2CE32 :                     
(1)   61/   2CE32 :                     Line1111Emu:
(1)   62/   2CE32 : (MACRO)              	__ErrorMessage "LINE 1111 EMULATOR", _eh_default
(1)   62/   2CE32 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "LINE 1111 EMULATOR"
(1)   62/   2CE32 :                     
(1)   62/   2CE32 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("LINE 1111 EMULATOR","%<")             ; token position
(1)   62/   2CE32 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   62/   2CE32 : ="LINE 1111 EMUL..           .__str: set             "LINE 1111 EMULATOR"
(1)   62/   2CE32 :                     
(1)   62/   2CE32 :                             ; Parse "LINE 1111 EMULATOR" itself
(1)   62/   2CE32 :                             while (.__pos>=0)
(1)   62/   2CE32 :                     
(1)   62/   2CE32 :                             ; Find the last occurance "%<" in the "LINE 1111 EMULATOR"
(1)   62/   2CE32 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   62/   2CE32 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   62/   2CE32 :                                     endm
(1)   62/   2CE32 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   62/   2CE32 :                     
(1)   62/   2CE32 :                                     ; Retrive expression in brackets following % char
(1)   62/   2CE32 :                             .__endpos:      set             strstr(.__substr,">")
(1)   62/   2CE32 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "LINE 1111 EMULATOR"
(1)   62/   2CE32 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   62/   2CE32 :                                     endif
(1)   62/   2CE32 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   62/   2CE32 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   62/   2CE32 :                                             .__midpos:      set             .__endpos
(1)   62/   2CE32 :                                     else
(1)   62/   2CE32 :                                             .__midpos:      set             .__midpos+5
(1)   62/   2CE32 :                             endif
(1)   62/   2CE32 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   62/   2CE32 :                     
(1)   62/   2CE32 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   62/   2CE32 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   62/   2CE32 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   62/   2CE32 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   62/   2CE32 :                     
(1)   62/   2CE32 :                                             if (.__type==".b")
(1)   62/   2CE32 :                                                     subq.w  #2, sp
(1)   62/   2CE32 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   62/   2CE32 :                                                     .__sp:  set             .__sp+2
(1)   62/   2CE32 :                     
(1)   62/   2CE32 :                                             elseif (.__type==".w")
(1)   62/   2CE32 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   62/   2CE32 :                                                     .__sp:  set             .__sp+2
(1)   62/   2CE32 :                     
(1)   62/   2CE32 :                                             elseif (.__type==".l")
(1)   62/   2CE32 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   62/   2CE32 :                                                     .__sp:  set             .__sp+4
(1)   62/   2CE32 :                     
(1)   62/   2CE32 :                                             else
(1)   62/   2CE32 :                                                     error "Unrecognized type in "LINE 1111 EMULATOR" operand: \{.__type}"
(1)   62/   2CE32 :                                             endif
(1)   62/   2CE32 :                     
(1)   62/   2CE32 :                                     endif
(1)   62/   2CE32 :                     
(1)   62/   2CE32 :                                     ; Cut "LINE 1111 EMULATOR"
(1)   62/   2CE32 :                                     if (.__pos>0)
(1)   62/   2CE32 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   62/   2CE32 :                                             .__pos: set             strstr(.__str,"%<")
(1)   62/   2CE32 :                                     else
(1)   62/   2CE32 :                                             .__pos: set             -1
(1)   62/   2CE32 :                                     endif
(1)   62/   2CE32 :                     
(1)   62/   2CE32 :                             endm
(1)   62/   2CE32 :                     
(1)   62/   2CE32 : 4EB9 0002 D140                      jsr             __global__ErrorHandler
(1)   62/   2CE38 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "LINE 1111 EMULATOR"
(1)   62/   2CE38 :                     
(1)   62/   2CE38 : =$0                          .__lpos:        set             0               ; start position
(1)   62/   2CE38 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("LINE 1111 EMULATOR", "%<")
(1)   62/   2CE38 :                     
(1)   62/   2CE38 :                             while (.__pos>=0)
(1)   62/   2CE38 :                     
(1)   62/   2CE38 :                                     ; Write part of "LINE 1111 EMULATOR" before % token
(1)   62/   2CE38 :                                     if (.__pos-.__lpos>0)
(1)   62/   2CE38 :                                             dc.b    substr("LINE 1111 EMULATOR", .__lpos, .__pos-.__lpos)
(1)   62/   2CE38 :                                     endif
(1)   62/   2CE38 :                     
(1)   62/   2CE38 :                                     ; Retrive expression in brakets following % char
(1)   62/   2CE38 :                             .__endpos:      set             strstr(substr("LINE 1111 EMULATOR",.__pos+1,0),">")+.__pos+1 
(1)   62/   2CE38 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "LINE 1111 EMULATOR"
(1)   62/   2CE38 :                                             .__endpos:      set             strlen("LINE 1111 EMULATOR")-1
(1)   62/   2CE38 :                                     endif
(1)   62/   2CE38 :                             .__midpos:      set             strstr(substr("LINE 1111 EMULATOR",.__pos+5,0)," ")+.__pos+5
(1)   62/   2CE38 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   62/   2CE38 :                                             .__midpos:      set             .__endpos
(1)   62/   2CE38 :                             endif
(1)   62/   2CE38 :                                     .__type:                set             substr("LINE 1111 EMULATOR",.__pos+1+1,2)             ; .type
(1)   62/   2CE38 :                     
(1)   62/   2CE38 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   62/   2CE38 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   62/   2CE38 :                                             .__param:       set             substr("LINE 1111 EMULATOR",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   62/   2CE38 :                     
(1)   62/   2CE38 :                                             ; Validate format setting ("param")
(1)   62/   2CE38 :                                             if (strlen(.__param)<1)
(1)   62/   2CE38 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   62/   2CE38 :                                             elseif (.__param=="signed")
(1)   62/   2CE38 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   62/   2CE38 :                                             endif
(1)   62/   2CE38 :                     
(1)   62/   2CE38 :                                             if (val(.__param) < $80)
(1)   62/   2CE38 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   62/   2CE38 :                                             endif
(1)   62/   2CE38 :                     
(1)   62/   2CE38 :                                             if (.__type==".b")
(1)   62/   2CE38 :                                                     dc.b    val(.__param)
(1)   62/   2CE38 :                                             elseif (.__type==".w")
(1)   62/   2CE38 :                                                     dc.b    val(.__param)|1
(1)   62/   2CE38 :                                             else
(1)   62/   2CE38 :                                                     dc.b    val(.__param)|3
(1)   62/   2CE38 :                                             endif
(1)   62/   2CE38 :                     
(1)   62/   2CE38 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   62/   2CE38 :                                     else
(1)   62/   2CE38 :                                             dc.b    val(substr("LINE 1111 EMULATOR",.__pos+1+1,.__endpos-.__pos-2))
(1)   62/   2CE38 :                                     endif
(1)   62/   2CE38 :                     
(1)   62/   2CE38 :                                     .__lpos:        set             .__endpos+1
(1)   62/   2CE38 :                                     if (strstr(substr("LINE 1111 EMULATOR",.__pos+1,0),"%<")>=0)
(1)   62/   2CE38 :                                             .__pos: set             strstr(substr("LINE 1111 EMULATOR",.__pos+1,0), "%<")+.__pos+1
(1)   62/   2CE38 :                                     else
(1)   62/   2CE38 :                                             .__pos: set             -1
(1)   62/   2CE38 :                                     endif
(1)   62/   2CE38 :                     
(1)   62/   2CE38 :                             endm
(1)   62/   2CE38 :                     
(1)   62/   2CE38 :                             ; Write part of "LINE 1111 EMULATOR" before the end
(1)   62/   2CE38 : 4C49 4E45 2031              dc.b    substr("LINE 1111 EMULATOR", .__lpos, 0), 0
            2CE3E : 3131 3120 454D 
            2CE44 : 554C 4154 4F52 00 
(1)   62/   2CE4B :                     
(1)   62/   2CE4B :                     
(1)   62/   2CE4B : =$0                                  .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   62/   2CE4B : 20                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   62/   2CE4C :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   62/   2CE4C : 4EF9 0002 D09A                              jmp             __global__ErrorHandler_PagesController  ; ... extensions controller
(1)   63/   2CE52 :                     
(1)   64/   2CE52 :                     ErrorExcept:
(1)   65/   2CE52 : (MACRO)              	__ErrorMessage "ERROR EXCEPTION", _eh_default
(1)   65/   2CE52 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "ERROR EXCEPTION"
(1)   65/   2CE52 :                     
(1)   65/   2CE52 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("ERROR EXCEPTION","%<")             ; token position
(1)   65/   2CE52 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   65/   2CE52 : ="ERROR EXCEPTION"           .__str: set             "ERROR EXCEPTION"
(1)   65/   2CE52 :                     
(1)   65/   2CE52 :                             ; Parse "ERROR EXCEPTION" itself
(1)   65/   2CE52 :                             while (.__pos>=0)
(1)   65/   2CE52 :                     
(1)   65/   2CE52 :                             ; Find the last occurance "%<" in the "ERROR EXCEPTION"
(1)   65/   2CE52 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   65/   2CE52 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   65/   2CE52 :                                     endm
(1)   65/   2CE52 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   65/   2CE52 :                     
(1)   65/   2CE52 :                                     ; Retrive expression in brackets following % char
(1)   65/   2CE52 :                             .__endpos:      set             strstr(.__substr,">")
(1)   65/   2CE52 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ERROR EXCEPTION"
(1)   65/   2CE52 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   65/   2CE52 :                                     endif
(1)   65/   2CE52 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   65/   2CE52 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   65/   2CE52 :                                             .__midpos:      set             .__endpos
(1)   65/   2CE52 :                                     else
(1)   65/   2CE52 :                                             .__midpos:      set             .__midpos+5
(1)   65/   2CE52 :                             endif
(1)   65/   2CE52 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   65/   2CE52 :                     
(1)   65/   2CE52 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   65/   2CE52 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   65/   2CE52 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   65/   2CE52 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   65/   2CE52 :                     
(1)   65/   2CE52 :                                             if (.__type==".b")
(1)   65/   2CE52 :                                                     subq.w  #2, sp
(1)   65/   2CE52 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   65/   2CE52 :                                                     .__sp:  set             .__sp+2
(1)   65/   2CE52 :                     
(1)   65/   2CE52 :                                             elseif (.__type==".w")
(1)   65/   2CE52 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   65/   2CE52 :                                                     .__sp:  set             .__sp+2
(1)   65/   2CE52 :                     
(1)   65/   2CE52 :                                             elseif (.__type==".l")
(1)   65/   2CE52 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   65/   2CE52 :                                                     .__sp:  set             .__sp+4
(1)   65/   2CE52 :                     
(1)   65/   2CE52 :                                             else
(1)   65/   2CE52 :                                                     error "Unrecognized type in "ERROR EXCEPTION" operand: \{.__type}"
(1)   65/   2CE52 :                                             endif
(1)   65/   2CE52 :                     
(1)   65/   2CE52 :                                     endif
(1)   65/   2CE52 :                     
(1)   65/   2CE52 :                                     ; Cut "ERROR EXCEPTION"
(1)   65/   2CE52 :                                     if (.__pos>0)
(1)   65/   2CE52 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   65/   2CE52 :                                             .__pos: set             strstr(.__str,"%<")
(1)   65/   2CE52 :                                     else
(1)   65/   2CE52 :                                             .__pos: set             -1
(1)   65/   2CE52 :                                     endif
(1)   65/   2CE52 :                     
(1)   65/   2CE52 :                             endm
(1)   65/   2CE52 :                     
(1)   65/   2CE52 : 4EB9 0002 D140                      jsr             __global__ErrorHandler
(1)   65/   2CE58 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "ERROR EXCEPTION"
(1)   65/   2CE58 :                     
(1)   65/   2CE58 : =$0                          .__lpos:        set             0               ; start position
(1)   65/   2CE58 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("ERROR EXCEPTION", "%<")
(1)   65/   2CE58 :                     
(1)   65/   2CE58 :                             while (.__pos>=0)
(1)   65/   2CE58 :                     
(1)   65/   2CE58 :                                     ; Write part of "ERROR EXCEPTION" before % token
(1)   65/   2CE58 :                                     if (.__pos-.__lpos>0)
(1)   65/   2CE58 :                                             dc.b    substr("ERROR EXCEPTION", .__lpos, .__pos-.__lpos)
(1)   65/   2CE58 :                                     endif
(1)   65/   2CE58 :                     
(1)   65/   2CE58 :                                     ; Retrive expression in brakets following % char
(1)   65/   2CE58 :                             .__endpos:      set             strstr(substr("ERROR EXCEPTION",.__pos+1,0),">")+.__pos+1 
(1)   65/   2CE58 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ERROR EXCEPTION"
(1)   65/   2CE58 :                                             .__endpos:      set             strlen("ERROR EXCEPTION")-1
(1)   65/   2CE58 :                                     endif
(1)   65/   2CE58 :                             .__midpos:      set             strstr(substr("ERROR EXCEPTION",.__pos+5,0)," ")+.__pos+5
(1)   65/   2CE58 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   65/   2CE58 :                                             .__midpos:      set             .__endpos
(1)   65/   2CE58 :                             endif
(1)   65/   2CE58 :                                     .__type:                set             substr("ERROR EXCEPTION",.__pos+1+1,2)             ; .type
(1)   65/   2CE58 :                     
(1)   65/   2CE58 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   65/   2CE58 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   65/   2CE58 :                                             .__param:       set             substr("ERROR EXCEPTION",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   65/   2CE58 :                     
(1)   65/   2CE58 :                                             ; Validate format setting ("param")
(1)   65/   2CE58 :                                             if (strlen(.__param)<1)
(1)   65/   2CE58 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   65/   2CE58 :                                             elseif (.__param=="signed")
(1)   65/   2CE58 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   65/   2CE58 :                                             endif
(1)   65/   2CE58 :                     
(1)   65/   2CE58 :                                             if (val(.__param) < $80)
(1)   65/   2CE58 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   65/   2CE58 :                                             endif
(1)   65/   2CE58 :                     
(1)   65/   2CE58 :                                             if (.__type==".b")
(1)   65/   2CE58 :                                                     dc.b    val(.__param)
(1)   65/   2CE58 :                                             elseif (.__type==".w")
(1)   65/   2CE58 :                                                     dc.b    val(.__param)|1
(1)   65/   2CE58 :                                             else
(1)   65/   2CE58 :                                                     dc.b    val(.__param)|3
(1)   65/   2CE58 :                                             endif
(1)   65/   2CE58 :                     
(1)   65/   2CE58 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   65/   2CE58 :                                     else
(1)   65/   2CE58 :                                             dc.b    val(substr("ERROR EXCEPTION",.__pos+1+1,.__endpos-.__pos-2))
(1)   65/   2CE58 :                                     endif
(1)   65/   2CE58 :                     
(1)   65/   2CE58 :                                     .__lpos:        set             .__endpos+1
(1)   65/   2CE58 :                                     if (strstr(substr("ERROR EXCEPTION",.__pos+1,0),"%<")>=0)
(1)   65/   2CE58 :                                             .__pos: set             strstr(substr("ERROR EXCEPTION",.__pos+1,0), "%<")+.__pos+1
(1)   65/   2CE58 :                                     else
(1)   65/   2CE58 :                                             .__pos: set             -1
(1)   65/   2CE58 :                                     endif
(1)   65/   2CE58 :                     
(1)   65/   2CE58 :                             endm
(1)   65/   2CE58 :                     
(1)   65/   2CE58 :                             ; Write part of "ERROR EXCEPTION" before the end
(1)   65/   2CE58 : 4552 524F 5220              dc.b    substr("ERROR EXCEPTION", .__lpos, 0), 0
            2CE5E : 4558 4345 5054 
            2CE64 : 494F 4E00          
(1)   65/   2CE68 :                     
(1)   65/   2CE68 :                     
(1)   65/   2CE68 : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   65/   2CE68 : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   65/   2CE69 :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   65/   2CE6A : 4EF9 0002 D09A                              jmp             __global__ErrorHandler_PagesController  ; ... extensions controller
(1)   66/   2CE70 :                     	
(1)   67/   2CE70 :                     CoProcessViol:
(1)   68/   2CE70 : (MACRO)              	__ErrorMessage "CO-PROCESSOR PROTOCOL VIOLATION", _eh_default
(1)   68/   2CE70 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "CO-PROCESSOR PROTOCOL VIOLATION"
(1)   68/   2CE70 :                     
(1)   68/   2CE70 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("CO-PROCESSOR PROTOCOL VIOLATION","%<")             ; token position
(1)   68/   2CE70 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   68/   2CE70 : ="CO-PROCESSOR P..           .__str: set             "CO-PROCESSOR PROTOCOL VIOLATION"
(1)   68/   2CE70 :                     
(1)   68/   2CE70 :                             ; Parse "CO-PROCESSOR PROTOCOL VIOLATION" itself
(1)   68/   2CE70 :                             while (.__pos>=0)
(1)   68/   2CE70 :                     
(1)   68/   2CE70 :                             ; Find the last occurance "%<" in the "CO-PROCESSOR PROTOCOL VIOLATION"
(1)   68/   2CE70 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   68/   2CE70 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   68/   2CE70 :                                     endm
(1)   68/   2CE70 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   68/   2CE70 :                     
(1)   68/   2CE70 :                                     ; Retrive expression in brackets following % char
(1)   68/   2CE70 :                             .__endpos:      set             strstr(.__substr,">")
(1)   68/   2CE70 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "CO-PROCESSOR PROTOCOL VIOLATION"
(1)   68/   2CE70 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   68/   2CE70 :                                     endif
(1)   68/   2CE70 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   68/   2CE70 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   68/   2CE70 :                                             .__midpos:      set             .__endpos
(1)   68/   2CE70 :                                     else
(1)   68/   2CE70 :                                             .__midpos:      set             .__midpos+5
(1)   68/   2CE70 :                             endif
(1)   68/   2CE70 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   68/   2CE70 :                     
(1)   68/   2CE70 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   68/   2CE70 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   68/   2CE70 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   68/   2CE70 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   68/   2CE70 :                     
(1)   68/   2CE70 :                                             if (.__type==".b")
(1)   68/   2CE70 :                                                     subq.w  #2, sp
(1)   68/   2CE70 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   68/   2CE70 :                                                     .__sp:  set             .__sp+2
(1)   68/   2CE70 :                     
(1)   68/   2CE70 :                                             elseif (.__type==".w")
(1)   68/   2CE70 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   68/   2CE70 :                                                     .__sp:  set             .__sp+2
(1)   68/   2CE70 :                     
(1)   68/   2CE70 :                                             elseif (.__type==".l")
(1)   68/   2CE70 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   68/   2CE70 :                                                     .__sp:  set             .__sp+4
(1)   68/   2CE70 :                     
(1)   68/   2CE70 :                                             else
(1)   68/   2CE70 :                                                     error "Unrecognized type in "CO-PROCESSOR PROTOCOL VIOLATION" operand: \{.__type}"
(1)   68/   2CE70 :                                             endif
(1)   68/   2CE70 :                     
(1)   68/   2CE70 :                                     endif
(1)   68/   2CE70 :                     
(1)   68/   2CE70 :                                     ; Cut "CO-PROCESSOR PROTOCOL VIOLATION"
(1)   68/   2CE70 :                                     if (.__pos>0)
(1)   68/   2CE70 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   68/   2CE70 :                                             .__pos: set             strstr(.__str,"%<")
(1)   68/   2CE70 :                                     else
(1)   68/   2CE70 :                                             .__pos: set             -1
(1)   68/   2CE70 :                                     endif
(1)   68/   2CE70 :                     
(1)   68/   2CE70 :                             endm
(1)   68/   2CE70 :                     
(1)   68/   2CE70 : 4EB9 0002 D140                      jsr             __global__ErrorHandler
(1)   68/   2CE76 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "CO-PROCESSOR PROTOCOL VIOLATION"
(1)   68/   2CE76 :                     
(1)   68/   2CE76 : =$0                          .__lpos:        set             0               ; start position
(1)   68/   2CE76 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("CO-PROCESSOR PROTOCOL VIOLATION", "%<")
(1)   68/   2CE76 :                     
(1)   68/   2CE76 :                             while (.__pos>=0)
(1)   68/   2CE76 :                     
(1)   68/   2CE76 :                                     ; Write part of "CO-PROCESSOR PROTOCOL VIOLATION" before % token
(1)   68/   2CE76 :                                     if (.__pos-.__lpos>0)
(1)   68/   2CE76 :                                             dc.b    substr("CO-PROCESSOR PROTOCOL VIOLATION", .__lpos, .__pos-.__lpos)
(1)   68/   2CE76 :                                     endif
(1)   68/   2CE76 :                     
(1)   68/   2CE76 :                                     ; Retrive expression in brakets following % char
(1)   68/   2CE76 :                             .__endpos:      set             strstr(substr("CO-PROCESSOR PROTOCOL VIOLATION",.__pos+1,0),">")+.__pos+1 
(1)   68/   2CE76 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "CO-PROCESSOR PROTOCOL VIOLATION"
(1)   68/   2CE76 :                                             .__endpos:      set             strlen("CO-PROCESSOR PROTOCOL VIOLATION")-1
(1)   68/   2CE76 :                                     endif
(1)   68/   2CE76 :                             .__midpos:      set             strstr(substr("CO-PROCESSOR PROTOCOL VIOLATION",.__pos+5,0)," ")+.__pos+5
(1)   68/   2CE76 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   68/   2CE76 :                                             .__midpos:      set             .__endpos
(1)   68/   2CE76 :                             endif
(1)   68/   2CE76 :                                     .__type:                set             substr("CO-PROCESSOR PROTOCOL VIOLATION",.__pos+1+1,2)             ; .type
(1)   68/   2CE76 :                     
(1)   68/   2CE76 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   68/   2CE76 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   68/   2CE76 :                                             .__param:       set             substr("CO-PROCESSOR PROTOCOL VIOLATION",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   68/   2CE76 :                     
(1)   68/   2CE76 :                                             ; Validate format setting ("param")
(1)   68/   2CE76 :                                             if (strlen(.__param)<1)
(1)   68/   2CE76 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   68/   2CE76 :                                             elseif (.__param=="signed")
(1)   68/   2CE76 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   68/   2CE76 :                                             endif
(1)   68/   2CE76 :                     
(1)   68/   2CE76 :                                             if (val(.__param) < $80)
(1)   68/   2CE76 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   68/   2CE76 :                                             endif
(1)   68/   2CE76 :                     
(1)   68/   2CE76 :                                             if (.__type==".b")
(1)   68/   2CE76 :                                                     dc.b    val(.__param)
(1)   68/   2CE76 :                                             elseif (.__type==".w")
(1)   68/   2CE76 :                                                     dc.b    val(.__param)|1
(1)   68/   2CE76 :                                             else
(1)   68/   2CE76 :                                                     dc.b    val(.__param)|3
(1)   68/   2CE76 :                                             endif
(1)   68/   2CE76 :                     
(1)   68/   2CE76 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   68/   2CE76 :                                     else
(1)   68/   2CE76 :                                             dc.b    val(substr("CO-PROCESSOR PROTOCOL VIOLATION",.__pos+1+1,.__endpos-.__pos-2))
(1)   68/   2CE76 :                                     endif
(1)   68/   2CE76 :                     
(1)   68/   2CE76 :                                     .__lpos:        set             .__endpos+1
(1)   68/   2CE76 :                                     if (strstr(substr("CO-PROCESSOR PROTOCOL VIOLATION",.__pos+1,0),"%<")>=0)
(1)   68/   2CE76 :                                             .__pos: set             strstr(substr("CO-PROCESSOR PROTOCOL VIOLATION",.__pos+1,0), "%<")+.__pos+1
(1)   68/   2CE76 :                                     else
(1)   68/   2CE76 :                                             .__pos: set             -1
(1)   68/   2CE76 :                                     endif
(1)   68/   2CE76 :                     
(1)   68/   2CE76 :                             endm
(1)   68/   2CE76 :                     
(1)   68/   2CE76 :                             ; Write part of "CO-PROCESSOR PROTOCOL VIOLATION" before the end
(1)   68/   2CE76 : 434F 2D50 524F              dc.b    substr("CO-PROCESSOR PROTOCOL VIOLATION", .__lpos, 0), 0
            2CE7C : 4345 5353 4F52 
            2CE82 : 2050 524F 544F 
            2CE88 : 434F 4C20 5649 
            2CE8E : 4F4C 4154 494F 
            2CE94 : 4E00             
(1)   68/   2CE96 :                     
(1)   68/   2CE96 :                     
(1)   68/   2CE96 : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   68/   2CE96 : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   68/   2CE97 :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   68/   2CE98 : 4EF9 0002 D09A                              jmp             __global__ErrorHandler_PagesController  ; ... extensions controller
(1)   69/   2CE9E :                     	
(1)   70/   2CE9E :                     FormatError:
(1)   71/   2CE9E : (MACRO)              	__ErrorMessage "FORMAT ERROR", _eh_default
(1)   71/   2CE9E :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "FORMAT ERROR"
(1)   71/   2CE9E :                     
(1)   71/   2CE9E : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("FORMAT ERROR","%<")             ; token position
(1)   71/   2CE9E : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   71/   2CE9E : ="FORMAT ERROR"              .__str: set             "FORMAT ERROR"
(1)   71/   2CE9E :                     
(1)   71/   2CE9E :                             ; Parse "FORMAT ERROR" itself
(1)   71/   2CE9E :                             while (.__pos>=0)
(1)   71/   2CE9E :                     
(1)   71/   2CE9E :                             ; Find the last occurance "%<" in the "FORMAT ERROR"
(1)   71/   2CE9E :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   71/   2CE9E :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   71/   2CE9E :                                     endm
(1)   71/   2CE9E :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   71/   2CE9E :                     
(1)   71/   2CE9E :                                     ; Retrive expression in brackets following % char
(1)   71/   2CE9E :                             .__endpos:      set             strstr(.__substr,">")
(1)   71/   2CE9E :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "FORMAT ERROR"
(1)   71/   2CE9E :                                             .__endpos:      set             strlen(.__substr)-1
(1)   71/   2CE9E :                                     endif
(1)   71/   2CE9E :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   71/   2CE9E :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   71/   2CE9E :                                             .__midpos:      set             .__endpos
(1)   71/   2CE9E :                                     else
(1)   71/   2CE9E :                                             .__midpos:      set             .__midpos+5
(1)   71/   2CE9E :                             endif
(1)   71/   2CE9E :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   71/   2CE9E :                     
(1)   71/   2CE9E :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   71/   2CE9E :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   71/   2CE9E :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   71/   2CE9E :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   71/   2CE9E :                     
(1)   71/   2CE9E :                                             if (.__type==".b")
(1)   71/   2CE9E :                                                     subq.w  #2, sp
(1)   71/   2CE9E :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   71/   2CE9E :                                                     .__sp:  set             .__sp+2
(1)   71/   2CE9E :                     
(1)   71/   2CE9E :                                             elseif (.__type==".w")
(1)   71/   2CE9E :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   71/   2CE9E :                                                     .__sp:  set             .__sp+2
(1)   71/   2CE9E :                     
(1)   71/   2CE9E :                                             elseif (.__type==".l")
(1)   71/   2CE9E :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   71/   2CE9E :                                                     .__sp:  set             .__sp+4
(1)   71/   2CE9E :                     
(1)   71/   2CE9E :                                             else
(1)   71/   2CE9E :                                                     error "Unrecognized type in "FORMAT ERROR" operand: \{.__type}"
(1)   71/   2CE9E :                                             endif
(1)   71/   2CE9E :                     
(1)   71/   2CE9E :                                     endif
(1)   71/   2CE9E :                     
(1)   71/   2CE9E :                                     ; Cut "FORMAT ERROR"
(1)   71/   2CE9E :                                     if (.__pos>0)
(1)   71/   2CE9E :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   71/   2CE9E :                                             .__pos: set             strstr(.__str,"%<")
(1)   71/   2CE9E :                                     else
(1)   71/   2CE9E :                                             .__pos: set             -1
(1)   71/   2CE9E :                                     endif
(1)   71/   2CE9E :                     
(1)   71/   2CE9E :                             endm
(1)   71/   2CE9E :                     
(1)   71/   2CE9E : 4EB9 0002 D140                      jsr             __global__ErrorHandler
(1)   71/   2CEA4 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "FORMAT ERROR"
(1)   71/   2CEA4 :                     
(1)   71/   2CEA4 : =$0                          .__lpos:        set             0               ; start position
(1)   71/   2CEA4 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("FORMAT ERROR", "%<")
(1)   71/   2CEA4 :                     
(1)   71/   2CEA4 :                             while (.__pos>=0)
(1)   71/   2CEA4 :                     
(1)   71/   2CEA4 :                                     ; Write part of "FORMAT ERROR" before % token
(1)   71/   2CEA4 :                                     if (.__pos-.__lpos>0)
(1)   71/   2CEA4 :                                             dc.b    substr("FORMAT ERROR", .__lpos, .__pos-.__lpos)
(1)   71/   2CEA4 :                                     endif
(1)   71/   2CEA4 :                     
(1)   71/   2CEA4 :                                     ; Retrive expression in brakets following % char
(1)   71/   2CEA4 :                             .__endpos:      set             strstr(substr("FORMAT ERROR",.__pos+1,0),">")+.__pos+1 
(1)   71/   2CEA4 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "FORMAT ERROR"
(1)   71/   2CEA4 :                                             .__endpos:      set             strlen("FORMAT ERROR")-1
(1)   71/   2CEA4 :                                     endif
(1)   71/   2CEA4 :                             .__midpos:      set             strstr(substr("FORMAT ERROR",.__pos+5,0)," ")+.__pos+5
(1)   71/   2CEA4 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   71/   2CEA4 :                                             .__midpos:      set             .__endpos
(1)   71/   2CEA4 :                             endif
(1)   71/   2CEA4 :                                     .__type:                set             substr("FORMAT ERROR",.__pos+1+1,2)             ; .type
(1)   71/   2CEA4 :                     
(1)   71/   2CEA4 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   71/   2CEA4 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   71/   2CEA4 :                                             .__param:       set             substr("FORMAT ERROR",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   71/   2CEA4 :                     
(1)   71/   2CEA4 :                                             ; Validate format setting ("param")
(1)   71/   2CEA4 :                                             if (strlen(.__param)<1)
(1)   71/   2CEA4 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   71/   2CEA4 :                                             elseif (.__param=="signed")
(1)   71/   2CEA4 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   71/   2CEA4 :                                             endif
(1)   71/   2CEA4 :                     
(1)   71/   2CEA4 :                                             if (val(.__param) < $80)
(1)   71/   2CEA4 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   71/   2CEA4 :                                             endif
(1)   71/   2CEA4 :                     
(1)   71/   2CEA4 :                                             if (.__type==".b")
(1)   71/   2CEA4 :                                                     dc.b    val(.__param)
(1)   71/   2CEA4 :                                             elseif (.__type==".w")
(1)   71/   2CEA4 :                                                     dc.b    val(.__param)|1
(1)   71/   2CEA4 :                                             else
(1)   71/   2CEA4 :                                                     dc.b    val(.__param)|3
(1)   71/   2CEA4 :                                             endif
(1)   71/   2CEA4 :                     
(1)   71/   2CEA4 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   71/   2CEA4 :                                     else
(1)   71/   2CEA4 :                                             dc.b    val(substr("FORMAT ERROR",.__pos+1+1,.__endpos-.__pos-2))
(1)   71/   2CEA4 :                                     endif
(1)   71/   2CEA4 :                     
(1)   71/   2CEA4 :                                     .__lpos:        set             .__endpos+1
(1)   71/   2CEA4 :                                     if (strstr(substr("FORMAT ERROR",.__pos+1,0),"%<")>=0)
(1)   71/   2CEA4 :                                             .__pos: set             strstr(substr("FORMAT ERROR",.__pos+1,0), "%<")+.__pos+1
(1)   71/   2CEA4 :                                     else
(1)   71/   2CEA4 :                                             .__pos: set             -1
(1)   71/   2CEA4 :                                     endif
(1)   71/   2CEA4 :                     
(1)   71/   2CEA4 :                             endm
(1)   71/   2CEA4 :                     
(1)   71/   2CEA4 :                             ; Write part of "FORMAT ERROR" before the end
(1)   71/   2CEA4 : 464F 524D 4154              dc.b    substr("FORMAT ERROR", .__lpos, 0), 0
            2CEAA : 2045 5252 4F52 00 
(1)   71/   2CEB1 :                     
(1)   71/   2CEB1 :                     
(1)   71/   2CEB1 : =$0                                  .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   71/   2CEB1 : 20                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   71/   2CEB2 :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   71/   2CEB2 : 4EF9 0002 D09A                              jmp             __global__ErrorHandler_PagesController  ; ... extensions controller
(1)   72/   2CEB8 :                     
(1)   73/   2CEB8 :                     
(1)   74/   2CEB8 :                     
(1)   75/   2CEB8 :                     ; ---------------------------------------------------------------
(1)   76/   2CEB8 :                     ; Built-in debuggers
(1)   77/   2CEB8 :                     ; ---------------------------------------------------------------
(1)   78/   2CEB8 :                     
(1)   79/   2CEB8 :                     Debugger_AddressRegisters:
(1)   80/   2CEB8 :                     
(1)   81/   2CEB8 : 48E7 00FE 41FA      	dc.l	$48E700FE, $41FA002A
            2CEBE : 002A             
(1)   82/   2CEC0 : 4EBA 0D7A           	jsr		__global__Console_Write(pc)
(1)   83/   2CEC4 : 49D7 7C06 3F3C      	dc.l	$49D77C06, $3F3C2000, $2F3CE861, $303A41D7
            2CECA : 2000 2F3C E861 
            2CED0 : 303A 41D7          
(1)   84/   2CED4 : 221C                	dc.w	$221C
(1)   85/   2CED6 : 4EBA 041A           	jsr		__global__Error_DrawOffsetLocation(pc)
(1)   86/   2CEDA : 522F 0002 51CE      	dc.l	$522F0002, $51CEFFF2, $4FEF0022, $4E75E0FA, $01F026EA, $41646472, $65737320, $52656769
            2CEE0 : FFF2 4FEF 0022 
            2CEE6 : 4E75 E0FA 01F0 
            2CEEC : 26EA 4164 6472 
            2CEF2 : 6573 7320 5265 
            2CEF8 : 6769             
(1)   87/   2CEFA : 7374 6572 733A      	dc.l	$73746572, $733AE0E0
            2CF00 : E0E0             
(1)   88/   2CF02 : 0000                	dc.w	$0000
(1)   89/   2CF04 :                     
(1)   90/   2CF04 :                     Debugger_Backtrace:
(1)   91/   2CF04 :                     
(1)   92/   2CF04 : 41FA 0088           	dc.l	$41FA0088
(1)   93/   2CF08 : 4EBA 0D32           	jsr		__global__Console_Write(pc)
(1)   94/   2CF0C : 2278 0000 5989      	dc.l	$22780000, $598945D7
            2CF12 : 45D7             
(1)   95/   2CF14 : 4EBA 0372           	jsr		__global__Error_MaskStackBoundaries(pc)
(1)   96/   2CF18 : B3CA 6570 0C52      	dc.l	$B3CA6570, $0C520040, $64642012, $67602040, $02400001, $66581220, $10200C00, $00616604
            2CF1E : 0040 6464 2012 
            2CF24 : 6760 2040 0240 
            2CF2A : 0001 6658 1220 
            2CF30 : 1020 0C00 0061 
            2CF36 : 6604             
(1)   97/   2CF38 : 4A01 663A 0C00      	dc.l	$4A01663A, $0C00004E, $660A0201, $00F80C01, $0090672A, $30200C40, $61006722, $12004200
            2CF3E : 004E 660A 0201 
            2CF44 : 00F8 0C01 0090 
            2CF4A : 672A 3020 0C40 
            2CF50 : 6100 6722 1200 
            2CF56 : 4200             
(1)   98/   2CF58 : 0C40 4E00 6612      	dc.l	$0C404E00, $66120C01, $00A8650C, $0C0100BB, $62060C01, $00B96606, $0C604EB9, $66102F0A
            2CF5E : 0C01 00A8 650C 
            2CF64 : 0C01 00BB 6206 
            2CF6A : 0C01 00B9 6606 
            2CF70 : 0C60 4EB9 6610 
            2CF76 : 2F0A             
(1)   99/   2CF78 : 2F09 2208           	dc.l	$2F092208
(1)  100/   2CF7C : 4EBA 0378           	jsr		__global__Error_DrawOffsetLocation2(pc)
(1)  101/   2CF80 : 225F 245F 548A      	dc.l	$225F245F, $548A548A, $B3CA6490, $4E75E0FA, $01F026EA, $4261636B, $74726163, $653AE0E0
            2CF86 : 548A B3CA 6490 
            2CF8C : 4E75 E0FA 01F0 
            2CF92 : 26EA 4261 636B 
            2CF98 : 7472 6163 653A 
            2CF9E : E0E0             
(1)  102/   2CFA0 : 0000                	dc.w	$0000
(1)  103/   2CFA2 :                     
(1)  104/   2CFA2 :                     ; ---------------------------------------------------------------
(1)  105/   2CFA2 :                     ; Debugger extensions
(1)  106/   2CFA2 :                     ; ---------------------------------------------------------------
(1)  107/   2CFA2 :                     
(1)  108/   2CFA2 :                     DebuggerExtensions:
(1)  109/   2CFA2 :                     
(1)  110/   2CFA2 : 46FC 2700 4FEF      	dc.l	$46FC2700, $4FEFFFF2, $48E7FFFE, $47EF003C
            2CFA8 : FFF2 48E7 FFFE 
            2CFAE : 47EF 003C          
(1)  111/   2CFB2 : 4EBA 03C8           	jsr		__global__ErrorHandler_SetupVDP(pc)
(1)  112/   2CFB6 : 4EBA 02C4           	jsr		__global__Error_InitConsole(pc)
(1)  113/   2CFBA : 4CDF 7FFF           	dc.l	$4CDF7FFF
(1)  114/   2CFBE : 487A 02A2           	pea		__global__Error_IdleLoop(pc)
(1)  115/   2CFC2 : 2F2F 0012 4E75      	dc.l	$2F2F0012, $4E752F0B, $4E6B0C2B, $005D000C, $661A48E7, $C4464BF9, $00C00004, $4DEDFFFC
            2CFC8 : 2F0B 4E6B 0C2B 
            2CFCE : 005D 000C 661A 
            2CFD4 : 48E7 C446 4BF9 
            2CFDA : 00C0 0004 4DED 
            2CFE0 : FFFC             
(1)  116/   2CFE2 : 43FA 0422           	lea		__global__ErrorHandler_ConsoleConfig_Initial(pc), a1
(1)  117/   2CFE6 : 4EBA 0B68           	jsr		__global__Console_Reset(pc)
(1)  118/   2CFEA : 4CDF 6223 265F      	dc.l	$4CDF6223, $265F4E75, $487A0058, $4E680C28, $005D000C, $67182F0C, $49FA0016, $4FEFFFF0
            2CFF0 : 4E75 487A 0058 
            2CFF6 : 4E68 0C28 005D 
            2CFFC : 000C 6718 2F0C 
            2D002 : 49FA 0016 4FEF 
            2D008 : FFF0             
(1)  119/   2D00A : 41D7 7E0E           	dc.l	$41D77E0E
(1)  120/   2D00E : 4EBA 0A28           	jsr		__global__FormatString(pc)
(1)  121/   2D012 : 4FEF 0010 285F      	dc.l	$4FEF0010, $285F4E75, $42184447, $0647000F, $90C72F08, $2F0D4BF9, $00C00004, $3E3C9E00
            2D018 : 4E75 4218 4447 
            2D01E : 0647 000F 90C7 
            2D024 : 2F08 2F0D 4BF9 
            2D02A : 00C0 0004 3E3C 
            2D030 : 9E00             
(1)  122/   2D032 : 6002 3A87 1E18      	dc.l	$60023A87, $1E186EFA, $67080407, $00E067F2, $60F22A5F, $205F7E0E, $4E752F08, $4E680C28
            2D038 : 6EFA 6708 0407 
            2D03E : 00E0 67F2 60F2 
            2D044 : 2A5F 205F 7E0E 
            2D04A : 4E75 2F08 4E68 
            2D050 : 0C28             
(1)  123/   2D052 : 005D 000C 6708      	dc.l	$005D000C, $670833FC, $9E0000C0, $0004205F, $4E7548E7, $C0D04E6B, $0C2B005D, $000C660C
            2D058 : 33FC 9E00 00C0 
            2D05E : 0004 205F 4E75 
            2D064 : 48E7 C0D0 4E6B 
            2D06A : 0C2B 005D 000C 
            2D070 : 660C             
(1)  124/   2D072 : 3F3C 0000 610C      	dc.l	$3F3C0000, $610C610A, $67FC544F, $4CDF0B03, $4E756174, $41EF0004, $43F900A1, $00036178
            2D078 : 610A 67FC 544F 
            2D07E : 4CDF 0B03 4E75 
            2D084 : 6174 41EF 0004 
            2D08A : 43F9 00A1 0003 
            2D090 : 6178             
(1)  125/   2D092 : 70F0 C02F 0005      	dc.l	$70F0C02F, $00054E75, $48E7FFFE, $3F3C0000, $61E04BF9, $00C00004, $4DEDFFFC, $61D467F2
            2D098 : 4E75 48E7 FFFE 
            2D09E : 3F3C 0000 61E0 
            2D0A4 : 4BF9 00C0 0004 
            2D0AA : 4DED FFFC 61D4 
            2D0B0 : 67F2             
(1)  126/   2D0B2 : 6B40 41FA 0076      	dc.l	$6B4041FA, $00765888, $D00064FA, $20106F32, $20404FEF
            2D0B8 : 5888 D000 64FA 
            2D0BE : 2010 6F32 2040 
            2D0C4 : 4FEF             
(1)  127/   2D0C6 : FFF2                	dc.w	$FFF2
(1)  128/   2D0C8 : 43FA 0340           	lea		__global__ErrorHandler_ConsoleConfig_Shared(pc), a1
(1)  129/   2D0CC : 47D7 2A3C 4000      	dc.l	$47D72A3C, $40000003
            2D0D2 : 0003             
(1)  130/   2D0D4 : 4EBA 0A7C           	jsr		__global__Console_InitShared(pc)
(1)  131/   2D0D8 : 2ABC 8230 8406      	dc.l	$2ABC8230, $84062A85, $487A000C, $48504CEF, $7FFF0014, $4E754FEF, $000E60B0
            2D0DE : 2A85 487A 000C 
            2D0E4 : 4850 4CEF 7FFF 
            2D0EA : 0014 4E75 4FEF 
            2D0F0 : 000E 60B0          
(1)  132/   2D0F4 : 2ABA 02D4           	move.l	__global__ErrorHandler_VDPConfig_Nametables(pc), (a5)
(1)  133/   2D0F8 : 60AA 41F9 00C0      	dc.l	$60AA41F9, $00C00004, $44D06BFC, $44D06AFC, $4E7512BC, $00004E71, $72C01011, $E50812BC
            2D0FE : 0004 44D0 6BFC 
            2D104 : 44D0 6AFC 4E75 
            2D10A : 12BC 0000 4E71 
            2D110 : 72C0 1011 E508 
            2D116 : 12BC             
(1)  134/   2D118 : 0040 4E71 C001      	dc.l	$00404E71, $C0011211, $0201003F, $80014600, $1210B101, $10C0C200, $10C14E75
            2D11E : 1211 0201 003F 
            2D124 : 8001 4600 1210 
            2D12A : B101 10C0 C200 
            2D130 : 10C1 4E75          
(1)  135/   2D134 :                     
(1)  136/   2D134 :                     ; WARNING! Don't move! This must be placed directly below "DebuggerExtensions"
(1)  137/   2D134 :                     DebuggerExtensions_ExtraDebuggerList:
(1)  138/   2D134 : 0002 CEB8           	dc.l	DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER	; for button A
(1)  139/   2D138 : 0000 0000           	dc.l	DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER	; for button C (not B)
(1)  140/   2D13C : 0002 CF04           	dc.l	DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER	; for button B (not C)
(1)  141/   2D140 :                     
(1)  142/   2D140 :                     ; ---------------------------------------------------------------
(1)  143/   2D140 :                     ; Error handler blob
(1)  144/   2D140 :                     ; ---------------------------------------------------------------
(1)  145/   2D140 :                     
(1)  146/   2D140 :                     ErrorHandler:
(1)  147/   2D140 :                     
(1)  148/   2D140 : 46FC 2700 4FEF      	dc.l	$46FC2700, $4FEFFFF2, $48E7FFFE, $4EBA022E, $49EF004A, $4E682F08, $47EF0040, $4EBA011E
            2D146 : FFF2 48E7 FFFE 
            2D14C : 4EBA 022E 49EF 
            2D152 : 004A 4E68 2F08 
            2D158 : 47EF 0040 4EBA 
            2D15E : 011E             
(1)  149/   2D160 : 41FA 02B2 4EBA      	dc.l	$41FA02B2, $4EBA0AD6, $225C45D4, $4EBA0B7A, $4EBA0A72, $49D21C19, $6A025249, $47D10806
            2D166 : 0AD6 225C 45D4 
            2D16C : 4EBA 0B7A 4EBA 
            2D172 : 0A72 49D2 1C19 
            2D178 : 6A02 5249 47D1 
            2D17E : 0806             
(1)  150/   2D180 : 0000 670E 41FA      	dc.l	$0000670E, $41FA0295, $222C0002, $4EBA0164, $504C41FA, $0292222C, $00024EBA, $01562278
            2D186 : 0295 222C 0002 
            2D18C : 4EBA 0164 504C 
            2D192 : 41FA 0292 222C 
            2D198 : 0002 4EBA 0156 
            2D19E : 2278             
(1)  151/   2D1A0 : 0000 45EC 0006      	dc.l	$000045EC, $00064EBA, $01AE41FA, $02844EBA, $01424EBA, $0A300806, $00066600, $00AA45EF
            2D1A6 : 4EBA 01AE 41FA 
            2D1AC : 0284 4EBA 0142 
            2D1B2 : 4EBA 0A30 0806 
            2D1B8 : 0006 6600 00AA 
            2D1BE : 45EF             
(1)  152/   2D1C0 : 0004 4EBA 09FE      	dc.l	$00044EBA, $09FE3F01, $70034EBA, $09C8303C, $64307A07, $4EBA0132, $321F7011, $4EBA09B6
            2D1C6 : 3F01 7003 4EBA 
            2D1CC : 09C8 303C 6430 
            2D1D2 : 7A07 4EBA 0132 
            2D1D8 : 321F 7011 4EBA 
            2D1DE : 09B6             
(1)  153/   2D1E0 : 303C 6130 7A06      	dc.l	$303C6130, $7A064EBA, $0120303C, $73707A00, $2F0C45D7, $4EBA0112, $584F0806, $00016714
            2D1E6 : 4EBA 0120 303C 
            2D1EC : 7370 7A00 2F0C 
            2D1F2 : 45D7 4EBA 0112 
            2D1F8 : 584F 0806 0001 
            2D1FE : 6714             
(1)  154/   2D200 : 43FA 0240 45D7      	dc.l	$43FA0240, $45D74EBA, $0AE443FA, $024145D4, $4EBA0AD6, $584F4EBA, $09AA5241, $70014EBA
            2D206 : 4EBA 0AE4 43FA 
            2D20C : 0241 45D4 4EBA 
            2D212 : 0AD6 584F 4EBA 
            2D218 : 09AA 5241 7001 
            2D21E : 4EBA             
(1)  155/   2D220 : 0974 2038 0078      	dc.l	$09742038, $007841FA, $022F4EBA, $010A2038, $007041FA, $022B4EBA, $00FE4EBA, $09A82278
            2D226 : 41FA 022F 4EBA 
            2D22C : 010A 2038 0070 
            2D232 : 41FA 022B 4EBA 
            2D238 : 00FE 4EBA 09A8 
            2D23E : 2278             
(1)  156/   2D240 : 0000 45D4 5389      	dc.l	$000045D4, $53896140, $4EBA0978, $7A199A41, $6B0A6148, $4EBA005A, $51CDFFFA, $08060005
            2D246 : 6140 4EBA 0978 
            2D24C : 7A19 9A41 6B0A 
            2D252 : 6148 4EBA 005A 
            2D258 : 51CD FFFA 0806 
            2D25E : 0005             
(1)  157/   2D260 : 660A 4E71 60FC      	dc.l	$660A4E71, $60FC7200, $4EBA09A2, $2ECB4CDF, $7FFF487A, $FFEE2F2F, $FFC44E75, $43FA0152
            2D266 : 7200 4EBA 09A2 
            2D26C : 2ECB 4CDF 7FFF 
            2D272 : 487A FFEE 2F2F 
            2D278 : FFC4 4E75 43FA 
            2D27E : 0152             
(1)  158/   2D280 : 45FA 01F2 4EFA      	dc.l	$45FA01F2, $4EFA0888, $223C00FF, $FFFF2409, $C4812242, $240AC481, $24424E75, $4FEFFFD0
            2D286 : 0888 223C 00FF 
            2D28C : FFFF 2409 C481 
            2D292 : 2242 240A C481 
            2D298 : 2442 4E75 4FEF 
            2D29E : FFD0             
(1)  159/   2D2A0 : 41D7 7EFF 20FC      	dc.l	$41D77EFF, $20FC2853, $502930FC, $3A206018, $4FEFFFD0, $41D77EFF, $30FC202B, $320A924C
            2D2A6 : 2853 5029 30FC 
            2D2AC : 3A20 6018 4FEF 
            2D2B2 : FFD0 41D7 7EFF 
            2D2B8 : 30FC 202B 320A 
            2D2BE : 924C             
(1)  160/   2D2C0 : 4EBA 05A4 30FC      	dc.l	$4EBA05A4, $30FC3A20, $700572EC, $B5C96502, $72EE10C1, $321A4EBA, $05AC10FC, $002051C8
            2D2C6 : 3A20 7005 72EC 
            2D2CC : B5C9 6502 72EE 
            2D2D2 : 10C1 321A 4EBA 
            2D2D8 : 05AC 10FC 0020 
            2D2DE : 51C8             
(1)  161/   2D2E0 : FFEA 4218 41D7      	dc.l	$FFEA4218, $41D77200, $4EBA094C, $4FEF0030, $4E754EBA, $09482F01, $2F0145D7, $43FA013C
            2D2E6 : 7200 4EBA 094C 
            2D2EC : 4FEF 0030 4E75 
            2D2F2 : 4EBA 0948 2F01 
            2D2F8 : 2F01 45D7 43FA 
            2D2FE : 013C             
(1)  162/   2D300 : 4EBA 09E6 504F      	dc.l	$4EBA09E6, $504F4E75, $4FEFFFF0, $7EFF41D7, $30C030FC, $3A2010FC, $00EC221A, $4EBA055E
            2D306 : 4E75 4FEF FFF0 
            2D30C : 7EFF 41D7 30C0 
            2D312 : 30FC 3A20 10FC 
            2D318 : 00EC 221A 4EBA 
            2D31E : 055E             
(1)  163/   2D320 : 4218 41D7 7200      	dc.l	$421841D7, $72004EBA, $090E5240, $51CDFFE0, $4FEF0010, $4E752200, $48414601, $66F62440
            2D326 : 4EBA 090E 5240 
            2D32C : 51CD FFE0 4FEF 
            2D332 : 0010 4E75 2200 
            2D338 : 4841 4601 66F6 
            2D33E : 2440             
(1)  164/   2D340 : 0C5A 4EF9 6604      	dc.l	$0C5A4EF9, $66042212, $60A84EBA, $09A043FA, $01174EFA, $09945989, $4EBAFF2E, $B3CA650C
            2D346 : 2212 60A8 4EBA 
            2D34C : 09A0 43FA 0117 
            2D352 : 4EFA 0994 5989 
            2D358 : 4EBA FF2E B3CA 
            2D35E : 650C             
(1)  165/   2D360 : 0C52 0040 650A      	dc.l	$0C520040, $650A548A, $B3CA64F4, $72004E75, $221267F2, $08010000, $66EC4E75, $4BF900C0
            2D366 : 548A B3CA 64F4 
            2D36C : 7200 4E75 2212 
            2D372 : 67F2 0801 0000 
            2D378 : 66EC 4E75 4BF9 
            2D37E : 00C0             
(1)  166/   2D380 : 0004 4DED FFFC      	dc.l	$00044DED, $FFFC4A55, $44D569FC, $41FA0026, $30186A04, $3A8060F8, $70002ABC, $40000000
            2D386 : 4A55 44D5 69FC 
            2D38C : 41FA 0026 3018 
            2D392 : 6A04 3A80 60F8 
            2D398 : 7000 2ABC 4000 
            2D39E : 0000             
(1)  167/   2D3A0 : 2C80 2ABC 4000      	dc.l	$2C802ABC, $40000010, $2C802ABC, $C0000000, $3C804E75, $80048134, $85008700, $8B008C81
            2D3A6 : 0010 2C80 2ABC 
            2D3AC : C000 0000 3C80 
            2D3B2 : 4E75 8004 8134 
            2D3B8 : 8500 8700 8B00 
            2D3BE : 8C81             
(1)  168/   2D3C0 : 8D00 8F02 9011      	dc.l	$8D008F02, $90119100, $92008220, $84040000, $44000000, $00000001, $00100011, $01000101
            2D3C6 : 9100 9200 8220 
            2D3CC : 8404 0000 4400 
            2D3D2 : 0000 0000 0001 
            2D3D8 : 0010 0011 0100 
            2D3DE : 0101             
(1)  169/   2D3E0 : 0110 0111 1000      	dc.l	$01100111, $10001001, $10101011, $11001101, $11101111, $FFFF0EEE, $FFF200CE, $FFF20EEA
            2D3E6 : 1001 1010 1011 
            2D3EC : 1100 1101 1110 
            2D3F2 : 1111 FFFF 0EEE 
            2D3F8 : FFF2 00CE FFF2 
            2D3FE : 0EEA             
(1)  170/   2D400 : FFF2 0E86 FFF2      	dc.l	$FFF20E86, $FFF24000, $00020028, $00280000, $008000FF, $EAE0FA01, $F02600EA, $41646472
            2D406 : 4000 0002 0028 
            2D40C : 0028 0000 0080 
            2D412 : 00FF EAE0 FA01 
            2D418 : F026 00EA 4164 
            2D41E : 6472             
(1)  171/   2D420 : 6573 733A 2000      	dc.l	$6573733A, $2000EA4F, $66667365, $743A2000, $EA43616C, $6C65723A, $2000EC83, $20E8BFEC
            2D426 : EA4F 6666 7365 
            2D42C : 743A 2000 EA43 
            2D432 : 616C 6C65 723A 
            2D438 : 2000 EC83 20E8 
            2D43E : BFEC             
(1)  172/   2D440 : C800 FA10 E875      	dc.l	$C800FA10, $E8757370, $3A20EC83, $00FA03E8, $73723A20, $EC8100EA, $56496E74, $3A2000EA
            2D446 : 7370 3A20 EC83 
            2D44C : 00FA 03E8 7372 
            2D452 : 3A20 EC81 00EA 
            2D458 : 5649 6E74 3A20 
            2D45E : 00EA             
(1)  173/   2D460 : 4849 6E74 3A20      	dc.l	$48496E74, $3A2000E8, $3C756E64, $6566696E, $65643E00, $02F70000, $00000000, $0000183C
            2D466 : 00E8 3C75 6E64 
            2D46C : 6566 696E 6564 
            2D472 : 3E00 02F7 0000 
            2D478 : 0000 0000 0000 
            2D47E : 183C             
(1)  174/   2D480 : 3C18 1800 1800      	dc.l	$3C181800, $18006C6C, $6C000000, $00006C6C, $FE6CFE6C, $6C00187E, $C07C06FC, $180000C6
            2D486 : 6C6C 6C00 0000 
            2D48C : 0000 6C6C FE6C 
            2D492 : FE6C 6C00 187E 
            2D498 : C07C 06FC 1800 
            2D49E : 00C6             
(1)  175/   2D4A0 : 0C18 3060 C600      	dc.l	$0C183060, $C600386C, $3876CCCC, $76001818, $30000000, $00001830, $60606030, $18006030
            2D4A6 : 386C 3876 CCCC 
            2D4AC : 7600 1818 3000 
            2D4B2 : 0000 0000 1830 
            2D4B8 : 6060 6030 1800 
            2D4BE : 6030             
(1)  176/   2D4C0 : 1818 1830 6000      	dc.l	$18181830, $600000EE, $7CFE7CEE, $00000018, $187E1818, $00000000, $00001818, $30000000
            2D4C6 : 00EE 7CFE 7CEE 
            2D4CC : 0000 0018 187E 
            2D4D2 : 1818 0000 0000 
            2D4D8 : 0000 1818 3000 
            2D4DE : 0000             
(1)  177/   2D4E0 : 00FE 0000 0000      	dc.l	$00FE0000, $00000000, $00000038, $3800060C, $183060C0, $80007CC6, $CEDEF6E6, $7C001878
            2D4E6 : 0000 0000 0038 
            2D4EC : 3800 060C 1830 
            2D4F2 : 60C0 8000 7CC6 
            2D4F8 : CEDE F6E6 7C00 
            2D4FE : 1878             
(1)  178/   2D500 : 1818 1818 7E00      	dc.l	$18181818, $7E007CC6, $0C183066, $FE007CC6, $063C06C6, $7C000C1C, $3C6CFE0C, $0C00FEC0
            2D506 : 7CC6 0C18 3066 
            2D50C : FE00 7CC6 063C 
            2D512 : 06C6 7C00 0C1C 
            2D518 : 3C6C FE0C 0C00 
            2D51E : FEC0             
(1)  179/   2D520 : FC06 06C6 7C00      	dc.l	$FC0606C6, $7C007CC6, $C0FCC6C6, $7C00FEC6, $060C1818, $18007CC6, $C67CC6C6, $7C007CC6
            2D526 : 7CC6 C0FC C6C6 
            2D52C : 7C00 FEC6 060C 
            2D532 : 1818 1800 7CC6 
            2D538 : C67C C6C6 7C00 
            2D53E : 7CC6             
(1)  180/   2D540 : C67E 06C6 7C00      	dc.l	$C67E06C6, $7C00001C, $1C00001C, $1C000018, $18000018, $18300C18, $30603018, $0C000000
            2D546 : 001C 1C00 001C 
            2D54C : 1C00 0018 1800 
            2D552 : 0018 1830 0C18 
            2D558 : 3060 3018 0C00 
            2D55E : 0000             
(1)  181/   2D560 : FE00 00FE 0000      	dc.l	$FE0000FE, $00006030, $180C1830, $60007CC6, $060C1800, $18007CC6, $C6DEDCC0, $7E00386C
            2D566 : 6030 180C 1830 
            2D56C : 6000 7CC6 060C 
            2D572 : 1800 1800 7CC6 
            2D578 : C6DE DCC0 7E00 
            2D57E : 386C             
(1)  182/   2D580 : C6C6 FEC6 C600      	dc.l	$C6C6FEC6, $C600FC66, $667C6666, $FC003C66, $C0C0C066, $3C00F86C, $6666666C, $F800FEC2
            2D586 : FC66 667C 6666 
            2D58C : FC00 3C66 C0C0 
            2D592 : C066 3C00 F86C 
            2D598 : 6666 666C F800 
            2D59E : FEC2             
(1)  183/   2D5A0 : C0F8 C0C2 FE00      	dc.l	$C0F8C0C2, $FE00FE62, $607C6060, $F0007CC6, $C0C0DEC6, $7C00C6C6, $C6FEC6C6, $C6003C18
            2D5A6 : FE62 607C 6060 
            2D5AC : F000 7CC6 C0C0 
            2D5B2 : DEC6 7C00 C6C6 
            2D5B8 : C6FE C6C6 C600 
            2D5BE : 3C18             
(1)  184/   2D5C0 : 1818 1818 3C00      	dc.l	$18181818, $3C003C18, $1818D8D8, $7000C6CC, $D8F0D8CC, $C600F060, $60606062, $FE00C6EE
            2D5C6 : 3C18 1818 D8D8 
            2D5CC : 7000 C6CC D8F0 
            2D5D2 : D8CC C600 F060 
            2D5D8 : 6060 6062 FE00 
            2D5DE : C6EE             
(1)  185/   2D5E0 : FED6 D6C6 C600      	dc.l	$FED6D6C6, $C600C6E6, $E6F6DECE, $C6007CC6, $C6C6C6C6, $7C00FC66, $667C6060, $F0007CC6
            2D5E6 : C6E6 E6F6 DECE 
            2D5EC : C600 7CC6 C6C6 
            2D5F2 : C6C6 7C00 FC66 
            2D5F8 : 667C 6060 F000 
            2D5FE : 7CC6             
(1)  186/   2D600 : C6C6 C6D6 7C06      	dc.l	$C6C6C6D6, $7C06FCC6, $C6FCD8CC, $C6007CC6, $C07C06C6, $7C007E5A, $18181818, $3C00C6C6
            2D606 : FCC6 C6FC D8CC 
            2D60C : C600 7CC6 C07C 
            2D612 : 06C6 7C00 7E5A 
            2D618 : 1818 1818 3C00 
            2D61E : C6C6             
(1)  187/   2D620 : C6C6 C6C6 7C00      	dc.l	$C6C6C6C6, $7C00C6C6, $C6C66C38, $1000C6C6, $D6D6FEEE, $C600C66C, $3838386C, $C6006666
            2D626 : C6C6 C6C6 6C38 
            2D62C : 1000 C6C6 D6D6 
            2D632 : FEEE C600 C66C 
            2D638 : 3838 386C C600 
            2D63E : 6666             
(1)  188/   2D640 : 663C 1818 3C00      	dc.l	$663C1818, $3C00FE86, $0C183062, $FE007C60, $60606060, $7C00C060, $30180C06, $02007C0C
            2D646 : FE86 0C18 3062 
            2D64C : FE00 7C60 6060 
            2D652 : 6060 7C00 C060 
            2D658 : 3018 0C06 0200 
            2D65E : 7C0C             
(1)  189/   2D660 : 0C0C 0C0C 7C00      	dc.l	$0C0C0C0C, $7C001038, $6CC60000, $00000000, $00000000, $00FF3030, $18000000, $00000000
            2D666 : 1038 6CC6 0000 
            2D66C : 0000 0000 0000 
            2D672 : 0000 00FF 3030 
            2D678 : 1800 0000 0000 
            2D67E : 0000             
(1)  190/   2D680 : 780C 7CCC 7E00      	dc.l	$780C7CCC, $7E00E060, $7C666666, $FC000000, $7CC6C0C6, $7C001C0C, $7CCCCCCC, $7E000000
            2D686 : E060 7C66 6666 
            2D68C : FC00 0000 7CC6 
            2D692 : C0C6 7C00 1C0C 
            2D698 : 7CCC CCCC 7E00 
            2D69E : 0000             
(1)  191/   2D6A0 : 7CC6 FEC0 7C00      	dc.l	$7CC6FEC0, $7C001C36, $30FC3030, $78000000, $76CEC67E, $067CE060, $7C666666, $E6001800
            2D6A6 : 1C36 30FC 3030 
            2D6AC : 7800 0000 76CE 
            2D6B2 : C67E 067C E060 
            2D6B8 : 7C66 6666 E600 
            2D6BE : 1800             
(1)  192/   2D6C0 : 3818 1818 3C00      	dc.l	$38181818, $3C000C00, $1C0C0C0C, $CC78E060, $666C786C, $E6001818, $18181818, $1C000000
            2D6C6 : 0C00 1C0C 0C0C 
            2D6CC : CC78 E060 666C 
            2D6D2 : 786C E600 1818 
            2D6D8 : 1818 1818 1C00 
            2D6DE : 0000             
(1)  193/   2D6E0 : 6CFE D6D6 C600      	dc.l	$6CFED6D6, $C6000000, $DC666666, $66000000, $7CC6C6C6, $7C000000, $DC66667C, $60F00000
            2D6E6 : 0000 DC66 6666 
            2D6EC : 6600 0000 7CC6 
            2D6F2 : C6C6 7C00 0000 
            2D6F8 : DC66 667C 60F0 
            2D6FE : 0000             
(1)  194/   2D700 : 76CC CC7C 0C1E      	dc.l	$76CCCC7C, $0C1E0000, $DC666060, $F0000000, $7CC07C06, $7C003030, $FC303036, $1C000000
            2D706 : 0000 DC66 6060 
            2D70C : F000 0000 7CC0 
            2D712 : 7C06 7C00 3030 
            2D718 : FC30 3036 1C00 
            2D71E : 0000             
(1)  195/   2D720 : CCCC CCCC 7600      	dc.l	$CCCCCCCC, $76000000, $C6C66C38, $10000000, $C6C6D6FE, $6C000000, $C66C386C, $C6000000
            2D726 : 0000 C6C6 6C38 
            2D72C : 1000 0000 C6C6 
            2D732 : D6FE 6C00 0000 
            2D738 : C66C 386C C600 
            2D73E : 0000             
(1)  196/   2D740 : C6C6 CE76 067C      	dc.l	$C6C6CE76, $067C0000, $FC983064, $FC000E18, $18701818, $0E001818, $18001818, $18007018
            2D746 : 0000 FC98 3064 
            2D74C : FC00 0E18 1870 
            2D752 : 1818 0E00 1818 
            2D758 : 1800 1818 1800 
            2D75E : 7018             
(1)  197/   2D760 : 180E 1818 7000      	dc.l	$180E1818, $700076DC, $00000000, $000043FA, $05C80C59, $DEB26672, $70FED059, $74FC7600
            2D766 : 76DC 0000 0000 
            2D76C : 0000 43FA 05C8 
            2D772 : 0C59 DEB2 6672 
            2D778 : 70FE D059 74FC 
            2D77E : 7600             
(1)  198/   2D780 : 4841 0241 00FF      	dc.l	$48410241, $00FFD241, $D241B240, $625C675E, $20311000, $675847F1, $08004841, $7000301B
            2D786 : D241 D241 B240 
            2D78C : 625C 675E 2031 
            2D792 : 1000 6758 47F1 
            2D798 : 0800 4841 7000 
            2D79E : 301B             
(1)  199/   2D7A0 : B253 654C 43F3      	dc.l	$B253654C, $43F308FE, $45E9FFFC, $E248C042, $B2730000, $65146204, $D6C0601A, $47F30004
            2D7A6 : 08FE 45E9 FFFC 
            2D7AC : E248 C042 B273 
            2D7B2 : 0000 6514 6204 
            2D7B8 : D6C0 601A 47F3 
            2D7BE : 0004             
(1)  200/   2D7C0 : 200A 908B 6AE6      	dc.l	$200A908B, $6AE6594B, $600C45F3, $00FC200A, $908B6AD8, $47D2925B, $7400341B, $D3C24841
            2D7C6 : 594B 600C 45F3 
            2D7CC : 00FC 200A 908B 
            2D7D2 : 6AD8 47D2 925B 
            2D7D8 : 7400 341B D3C2 
            2D7DE : 4841             
(1)  201/   2D7E0 : 4241 4841 D283      	dc.l	$42414841, $D2837000, $4E7570FF, $4E754841, $70003001, $D6805283, $323CFFFF, $48415941
            2D7E6 : 7000 4E75 70FF 
            2D7EC : 4E75 4841 7000 
            2D7F2 : 3001 D680 5283 
            2D7F8 : 323C FFFF 4841 
            2D7FE : 5941             
(1)  202/   2D800 : 6A8E 70FF 4E75      	dc.l	$6A8E70FF, $4E7547FA, $05300C5B, $DEB2664A, $D6D37800, $72007400, $45D351CC, $00061619
            2D806 : 47FA 0530 0C5B 
            2D80C : DEB2 664A D6D3 
            2D812 : 7800 7200 7400 
            2D818 : 45D3 51CC 0006 
            2D81E : 1619             
(1)  203/   2D820 : 7807 D603 D341      	dc.l	$7807D603, $D3415242, $B252620A, $65ECB42A, $00026712, $65E4584A, $B25262FA, $65DCB42A
            2D826 : 5242 B252 620A 
            2D82C : 65EC B42A 0002 
            2D832 : 6712 65E4 584A 
            2D838 : B252 62FA 65DC 
            2D83E : B42A             
(1)  204/   2D840 : 0002 65D6 66F0      	dc.l	$000265D6, $66F010EA, $0003670A, $51CFFFC6, $4E9464C0, $4E755348, $4E757000, $4E754EFA
            2D846 : 10EA 0003 670A 
            2D84C : 51CF FFC6 4E94 
            2D852 : 64C0 4E75 5348 
            2D858 : 4E75 7000 4E75 
            2D85E : 4EFA             
(1)  205/   2D860 : 0024 4EFA 0018      	dc.l	$00244EFA, $0018760F, $3401E84A, $C44310FB, $205E51CF, $004C4E94, $64464E75, $48416104
            2D866 : 760F 3401 E84A 
            2D86C : C443 10FB 205E 
            2D872 : 51CF 004C 4E94 
            2D878 : 6446 4E75 4841 
            2D87E : 6104             
(1)  206/   2D880 : 654A 4841 7404      	dc.l	$654A4841, $7404760F, $E5791801, $C84310FB, $403E51CF, $00044E94, $6532E579, $1801C843
            2D886 : 760F E579 1801 
            2D88C : C843 10FB 403E 
            2D892 : 51CF 0004 4E94 
            2D898 : 6532 E579 1801 
            2D89E : C843             
(1)  207/   2D8A0 : 10FB 402C 51CF      	dc.l	$10FB402C, $51CF0004, $4E946520, $E5791801, $C84310FB, $401A51CF, $00044E94, $650EE579
            2D8A6 : 0004 4E94 6520 
            2D8AC : E579 1801 C843 
            2D8B2 : 10FB 401A 51CF 
            2D8B8 : 0004 4E94 650E 
            2D8BE : E579             
(1)  208/   2D8C0 : C243 10FB 100A      	dc.l	$C24310FB, $100A51CF, $00044ED4, $4E753031, $32333435, $36373839, $41424344, $45464EFA
            2D8C6 : 51CF 0004 4ED4 
            2D8CC : 4E75 3031 3233 
            2D8D2 : 3435 3637 3839 
            2D8D8 : 4142 4344 4546 
            2D8DE : 4EFA             
(1)  209/   2D8E0 : 0026 4EFA 001A      	dc.l	$00264EFA, $001A7407, $7018D201, $D10010C0, $51CF0006, $4E946504, $51CAFFEE, $4E754841
            2D8E6 : 7407 7018 D201 
            2D8EC : D100 10C0 51CF 
            2D8F2 : 0006 4E94 6504 
            2D8F8 : 51CA FFEE 4E75 
            2D8FE : 4841             
(1)  210/   2D900 : 6104 6518 4841      	dc.l	$61046518, $4841740F, $7018D241, $D10010C0, $51CF0006, $4E946504, $51CAFFEE, $4E754EFA
            2D906 : 740F 7018 D241 
            2D90C : D100 10C0 51CF 
            2D912 : 0006 4E94 6504 
            2D918 : 51CA FFEE 4E75 
            2D91E : 4EFA             
(1)  211/   2D920 : 0010 4EFA 0048      	dc.l	$00104EFA, $004847FA, $009A0241, $00FF6004, $47FA008C, $42007609, $381B3403, $924455CA
            2D926 : 47FA 009A 0241 
            2D92C : 00FF 6004 47FA 
            2D932 : 008C 4200 7609 
            2D938 : 381B 3403 9244 
            2D93E : 55CA             
(1)  212/   2D940 : FFFC D244 9443      	dc.l	$FFFCD244, $94434442, $8002670E, $06020030, $10C251CF, $00064E94, $6510381B, $6ADC0601
            2D946 : 4442 8002 670E 
            2D94C : 0602 0030 10C2 
            2D952 : 51CF 0006 4E94 
            2D958 : 6510 381B 6ADC 
            2D95E : 0601             
(1)  213/   2D960 : 0030 10C1 51CF      	dc.l	$003010C1, $51CF0004, $4ED44E75, $47FA002E, $42007609, $281B3403, $928455CA, $FFFCD284
            2D966 : 0004 4ED4 4E75 
            2D96C : 47FA 002E 4200 
            2D972 : 7609 281B 3403 
            2D978 : 9284 55CA FFFC 
            2D97E : D284             
(1)  214/   2D980 : 9443 4442 8002      	dc.l	$94434442, $8002670E, $06020030, $10C251CF, $00064E94, $65D4281B, $6ADC609E, $3B9ACA00
            2D986 : 670E 0602 0030 
            2D98C : 10C2 51CF 0006 
            2D992 : 4E94 65D4 281B 
            2D998 : 6ADC 609E 3B9A 
            2D99E : CA00             
(1)  215/   2D9A0 : 05F5 E100 0098      	dc.l	$05F5E100, $00989680, $000F4240, $000186A0, $00002710, $FFFF03E8, $0064000A, $FFFF2710
            2D9A6 : 9680 000F 4240 
            2D9AC : 0001 86A0 0000 
            2D9B2 : 2710 FFFF 03E8 
            2D9B8 : 0064 000A FFFF 
            2D9BE : 2710             
(1)  216/   2D9C0 : 03E8 0064 000A      	dc.l	$03E80064, $000AFFFF, $48C16008, $4EFA0006, $488148C1, $48E75060, $4EBAFD94, $66182E81
            2D9C6 : FFFF 48C1 6008 
            2D9CC : 4EFA 0006 4881 
            2D9D2 : 48C1 48E7 5060 
            2D9D8 : 4EBA FD94 6618 
            2D9DE : 2E81             
(1)  217/   2D9E0 : 4EBA FE24 4CDF      	dc.l	$4EBAFE24, $4CDF060A, $650A0803, $00036604, $4EFA00B6, $4E754CDF, $060A0803, $00026708
            2D9E6 : 060A 650A 0803 
            2D9EC : 0003 6604 4EFA 
            2D9F2 : 00B6 4E75 4CDF 
            2D9F8 : 060A 0803 0002 
            2D9FE : 6708             
(1)  218/   2DA00 : 47FA 000A 4EFA      	dc.l	$47FA000A, $4EFA00B4, $70FF60DE, $3C756E6B, $6E6F776E, $3E0010FC, $002B51CF, $00064E94
            2DA06 : 00B4 70FF 60DE 
            2DA0C : 3C75 6E6B 6E6F 
            2DA12 : 776E 3E00 10FC 
            2DA18 : 002B 51CF 0006 
            2DA1E : 4E94             
(1)  219/   2DA20 : 65D2 4841 4A41      	dc.l	$65D24841, $4A416700, $FE5A6000, $FE520803, $000366C0, $4EFAFE46, $48E7F810, $10D95FCF
            2DA26 : 6700 FE5A 6000 
            2DA2C : FE52 0803 0003 
            2DA32 : 66C0 4EFA FE46 
            2DA38 : 48E7 F810 10D9 
            2DA3E : 5FCF             
(1)  220/   2DA40 : FFFC 6E14 6718      	dc.l	$FFFC6E14, $67181620, $7470C403, $4EBB201A, $64EA4CDF, $081F4E75, $4E9464E0, $60F45348
            2DA46 : 1620 7470 C403 
            2DA4C : 4EBB 201A 64EA 
            2DA52 : 4CDF 081F 4E75 
            2DA58 : 4E94 64E0 60F4 
            2DA5E : 5348             
(1)  221/   2DA60 : 4E94 4CDF 081F      	dc.l	$4E944CDF, $081F4E75, $47FAFDF4, $B702D402, $4EFB205A, $4E714E71, $47FAFEA4, $B702D402
            2DA66 : 4E75 47FA FDF4 
            2DA6C : B702 D402 4EFB 
            2DA72 : 205A 4E71 4E71 
            2DA78 : 47FA FEA4 B702 
            2DA7E : D402             
(1)  222/   2DA80 : 4EFB 204A 4E71      	dc.l	$4EFB204A, $4E714E71, $47FAFE54, $B702D402, $4EFB203A, $53484E75, $47FAFF2E, $14030242
            2DA86 : 4E71 47FA FE54 
            2DA8C : B702 D402 4EFB 
            2DA92 : 203A 5348 4E75 
            2DA98 : 47FA FF2E 1403 
            2DA9E : 0242             
(1)  223/   2DAA0 : 0003 D442 4EFB      	dc.l	$0003D442, $4EFB2026, $4A406B08, $4A816716, $4EFAFF64, $4EFAFF78, $265A10DB, $57CFFFFC
            2DAA6 : 2026 4A40 6B08 
            2DAAC : 4A81 6716 4EFA 
            2DAB2 : FF64 4EFA FF78 
            2DAB8 : 265A 10DB 57CF 
            2DABE : FFFC             
(1)  224/   2DAC0 : 67D2 4E94 64F4      	dc.l	$67D24E94, $64F44E75, $5248603C, $504B321A, $4ED3584B, $221A4ED3, $52486022, $504B321A
            2DAC6 : 4E75 5248 603C 
            2DACC : 504B 321A 4ED3 
            2DAD2 : 584B 221A 4ED3 
            2DAD8 : 5248 6022 504B 
            2DADE : 321A             
(1)  225/   2DAE0 : 6004 584B 221A      	dc.l	$6004584B, $221A6A08, $448110FC, $002D6004, $10FC002B, $51CF0006, $4E9465CA, $4ED351CF
            2DAE6 : 6A08 4481 10FC 
            2DAEC : 002D 6004 10FC 
            2DAF2 : 002B 51CF 0006 
            2DAF8 : 4E94 65CA 4ED3 
            2DAFE : 51CF             
(1)  226/   2DB00 : 0006 4E94 65C0      	dc.l	$00064E94, $65C010D9, $51CFFFBC, $4ED44BF9, $00C00004, $4DEDFFFC, $4A516B10, $2A9941D2
            2DB06 : 10D9 51CF FFBC 
            2DB0C : 4ED4 4BF9 00C0 
            2DB12 : 0004 4DED FFFC 
            2DB18 : 4A51 6B10 2A99 
            2DB1E : 41D2             
(1)  227/   2DB20 : 3818 4EBA 01F8      	dc.l	$38184EBA, $01F843E9, $002060EC, $544941FA, $00482ABC, $C0000000, $70007603, $3C803419
            2DB26 : 43E9 0020 60EC 
            2DB2C : 5449 41FA 0048 
            2DB32 : 2ABC C000 0000 
            2DB38 : 7000 7603 3C80 
            2DB3E : 3419             
(1)  228/   2DB40 : 3C82 3419 6AFA      	dc.l	$3C823419, $6AFA7200, $4EB02010, $51CBFFEE, $2A194E63, $26C526D9, $26D936FC, $5D002A85
            2DB46 : 7200 4EB0 2010 
            2DB4C : 51CB FFEE 2A19 
            2DB52 : 4E63 26C5 26D9 
            2DB58 : 26D9 36FC 5D00 
            2DB5E : 2A85             
(1)  229/   2DB60 : 7000 3219 6112      	dc.l	$70003219, $61122ABC, $40000000, $72006108, $3ABC8174, $2A854E75, $2C802C80, $2C802C80
            2DB66 : 2ABC 4000 0000 
            2DB6C : 7200 6108 3ABC 
            2DB72 : 8174 2A85 4E75 
            2DB78 : 2C80 2C80 2C80 
            2DB7E : 2C80             
(1)  230/   2DB80 : 2C80 2C80 2C80      	dc.l	$2C802C80, $2C802C80, $51C9FFEE, $4E754CAF, $00030004, $48E76010, $4E6B0C2B, $005D000C
            2DB86 : 2C80 51C9 FFEE 
            2DB8C : 4E75 4CAF 0003 
            2DB92 : 0004 48E7 6010 
            2DB98 : 4E6B 0C2B 005D 
            2DB9E : 000C             
(1)  231/   2DBA0 : 661A 3413 0242      	dc.l	$661A3413, $0242E000, $C2EB000A, $D441D440, $D4403682, $23DB00C0, $000436DB, $4CDF0806
            2DBA6 : E000 C2EB 000A 
            2DBAC : D441 D440 D440 
            2DBB2 : 3682 23DB 00C0 
            2DBB8 : 0004 36DB 4CDF 
            2DBBE : 0806             
(1)  232/   2DBC0 : 4E75 2F0B 4E6B      	dc.l	$4E752F0B, $4E6B0C2B, $005D000C, $66127200, $32130241, $1FFF82EB, $000A2001, $4840E248
            2DBC6 : 0C2B 005D 000C 
            2DBCC : 6612 7200 3213 
            2DBD2 : 0241 1FFF 82EB 
            2DBD8 : 000A 2001 4840 
            2DBDE : E248             
(1)  233/   2DBE0 : 265F 4E75 2F0B      	dc.l	$265F4E75, $2F0B4E6B, $0C2B005D, $000C6618, $3F003013, $D06B000A, $02405FFF, $368023DB
            2DBE6 : 4E6B 0C2B 005D 
            2DBEC : 000C 6618 3F00 
            2DBF2 : 3013 D06B 000A 
            2DBF8 : 0240 5FFF 3680 
            2DBFE : 23DB             
(1)  234/   2DC00 : 00C0 0004 36DB      	dc.l	$00C00004, $36DB301F, $265F4E75, $2F0B4E6B, $0C2B005D, $000C6604, $37410008, $265F4E75
            2DC06 : 301F 265F 4E75 
            2DC0C : 2F0B 4E6B 0C2B 
            2DC12 : 005D 000C 6604 
            2DC18 : 3741 0008 265F 
            2DC1E : 4E75             
(1)  235/   2DC20 : 2F0B 4E6B 0C2B      	dc.l	$2F0B4E6B, $0C2B005D, $000C6606, $584B36C1, $36C1265F, $4E7561D4, $487AFFAA, $48E77E12
            2DC26 : 005D 000C 6606 
            2DC2C : 584B 36C1 36C1 
            2DC32 : 265F 4E75 61D4 
            2DC38 : 487A FFAA 48E7 
            2DC3E : 7E12             
(1)  236/   2DC40 : 4E6B 0C2B 005D      	dc.l	$4E6B0C2B, $005D000C, $661C2A1B, $4C93005C, $48464DF9, $00C00000, $72001218, $6E0E6B28
            2DC46 : 000C 661C 2A1B 
            2DC4C : 4C93 005C 4846 
            2DC52 : 4DF9 00C0 0000 
            2DC58 : 7200 1218 6E0E 
            2DC5E : 6B28             
(1)  237/   2DC60 : 4893 001C 2705      	dc.l	$4893001C, $27054CDF, $487E4E75, $51CB000E, $D642DA86, $0885001D, $2D450004, $D2443C81
            2DC66 : 4CDF 487E 4E75 
            2DC6C : 51CB 000E D642 
            2DC72 : DA86 0885 001D 
            2DC78 : 2D45 0004 D244 
            2DC7E : 3C81             
(1)  238/   2DC80 : 7200 1218 6EE6      	dc.l	$72001218, $6EE667D8, $0241001E, $4EFB1002, $DA86721D, $03856020, $6026602A, $6032603A
            2DC86 : 67D8 0241 001E 
            2DC8C : 4EFB 1002 DA86 
            2DC92 : 721D 0385 6020 
            2DC98 : 6026 602A 6032 
            2DC9E : 603A             
(1)  239/   2DCA0 : 1418 6014 1818      	dc.l	$14186014, $181860D8, $60361218, $D2417680, $4843CA83, $48418A81, $36022D45, $000460C0
            2DCA6 : 60D8 6036 1218 
            2DCAC : D241 7680 4843 
            2DCB2 : CA83 4841 8A81 
            2DCB8 : 3602 2D45 0004 
            2DCBE : 60C0             
(1)  240/   2DCC0 : 0244 07FF 60BA      	dc.l	$024407FF, $60BA0244, $07FF0044, $200060B0, $024407FF, $00444000, $60A60044, $600060A0
            2DCC6 : 0244 07FF 0044 
            2DCCC : 2000 60B0 0244 
            2DCD2 : 07FF 0044 4000 
            2DCD8 : 60A6 0044 6000 
            2DCDE : 60A0             
(1)  241/   2DCE0 : 3F04 1E98 381F      	dc.l	$3F041E98, $381F6098, $487AFEFA, $2F0C49FA, $00164FEF, $FFF041D7, $7E0E4EBA, $FD3C4FEF
            2DCE6 : 6098 487A FEFA 
            2DCEC : 2F0C 49FA 0016 
            2DCF2 : 4FEF FFF0 41D7 
            2DCF8 : 7E0E 4EBA FD3C 
            2DCFE : 4FEF             
(1)  242/   2DD00 : 0010 285F 4E75      	dc.l	$0010285F, $4E754218, $44470647, $000F90C7, $2F084EBA, $FF28205F, $7E0E4E75, $741E1018
            2DD06 : 4218 4447 0647 
            2DD0C : 000F 90C7 2F08 
            2DD12 : 4EBA FF28 205F 
            2DD18 : 7E0E 4E75 741E 
            2DD1E : 1018             
(1)  243/   2DD20 : 1200 E609 C242      	dc.l	$1200E609, $C2423CB1, $1000D000, $C0423CB1, $000051CC, $FFEA4E75
            2DD26 : 3CB1 1000 D000 
            2DD2C : C042 3CB1 0000 
            2DD32 : 51CC FFEA 4E75    
(1)  244/   2DD38 :                     
(1)  245/   2DD38 :                     ; ---------------------------------------------------------------
(1)  246/   2DD38 :                     ; WARNING!
(1)  247/   2DD38 :                     ;	DO NOT put any data from now on! DO NOT use ROM padding!
(1)  248/   2DD38 :                     ;	Symbol data should be appended here after ROM is compiled
(1)  249/   2DD38 :                     ;	by ConvSym utility, otherwise debugger modules won't be able
(1)  250/   2DD38 :                     ;	to resolve symbol names.
(1)  251/   2DD38 :                     ; ---------------------------------------------------------------
(1)  252/   2DD38 :                     
     165/   2DD38 :                     
     166/   2DD38 :                     ; --------------------------------------------------------------
     167/   2DD38 :                     ; WARNING!
     168/   2DD38 :                     ;	DO NOT put any data from now on! DO NOT use ROM padding!
     169/   2DD38 :                     ;	Symbol data should be appended here after ROM is compiled
     170/   2DD38 :                     ;	by ConvSym utility, otherwise debugger modules won't be able
     171/   2DD38 :                     ;	to resolve symbol names.
     172/   2DD38 :                     ; --------------------------------------------------------------
     173/   2DD38 :                     
     174/   2DD38 :                     EndOfRom:
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 11/17/2024 22:22:48


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                        "i386-unknown-win32" - |
*AddressError :               2CD46 C |  AddressError.__align_flag :     80 - |
 AddressError.__lpos :            0 - |
 AddressError.__pos :                                      FFFFFFFFFFFFFFFF - |
*AddressError.__sp :              0 - |
*AddressError.__str :                                       "ADDRESS ERROR" - |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
*BusError :                   2CD2E C |  BusError.__align_flag :         80 - |
 BusError.__lpos :                0 - |  BusError.__pos :  FFFFFFFFFFFFFFFF - |
*BusError.__sp :                  0 - | *BusError.__str :       "BUS ERROR" - |
*CASESENSITIVE :                  1 - | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - | *CUSTOM :                         0 - |
*ChkInstr :                   2CD9E C |  ChkInstr.__align_flag :         80 - |
 ChkInstr.__lpos :                0 - |  ChkInstr.__pos :  FFFFFFFFFFFFFFFF - |
*ChkInstr.__sp :                  0 - | *ChkInstr.__str : "CHK INSTRUCTION" - |
*CoProcessViol :              2CE70 C |  CoProcessViol.__align_flag :    80 - |
 CoProcessViol.__lpos :           0 - |
 CoProcessViol.__pos :                                     FFFFFFFFFFFFFFFF - |
*CoProcessViol.__sp :             0 - |
*CoProcessViol.__str :                    "CO-PROCESSOR PROTOCOL VIOLATION" - |
*DATE :                "11/17/2024" - |
 DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER :                               2CEB8 - |
 DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER :                               2CF04 - |
 DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER :                                   0 - |
 DEBUGGER__EXTENSIONS__ENABLE :   1 - |  DebuggerExtensions :         2CFA2 C |
*DebuggerExtensions_ExtraDebuggerList :                               2D134 C |
 Debugger_AddressRegisters :  2CEB8 C |  Debugger_Backtrace :         2CF04 C |
*EndOfHeader :                  200 C |  EndOfRom :                   2DD38 C |
 EntryPoint :                   202 C | *ErrorExcept :                2CE52 C |
 ErrorExcept.__align_flag :      80 - |  ErrorExcept.__lpos :             0 - |
 ErrorExcept.__pos :                                       FFFFFFFFFFFFFFFF - |
*ErrorExcept.__sp :               0 - |
*ErrorExcept.__str :                                      "ERROR EXCEPTION" - |
 ErrorHandler :               2D140 C |  ErrorTrap :                    200 C |
*FALSE :                          0 - | *FLAGS_LOOP :                     2 - |
*FLAGS_SFX :                      1 - | *FULLPMMU :                       1 - |
*FormatError :                2CE9E C |  FormatError.__align_flag :       0 - |
 FormatError.__lpos :             0 - |
 FormatError.__pos :                                       FFFFFFFFFFFFFFFF - |
*FormatError.__sp :               0 - | *FormatError.__str : "FORMAT ERROR" - |
 GameMode :        FFFFFFFFFFFFFDFC C |  GameModeLoop :                 274 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*Header :                       100 C | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      1 - |
*IllegalInstr :               2CD62 C |  IllegalInstr.__align_flag :     80 - |
 IllegalInstr.__lpos :            0 - |
 IllegalInstr.__pos :                                      FFFFFFFFFFFFFFFF - |
*IllegalInstr.__sp :              0 - |
*IllegalInstr.__str :                                 "ILLEGAL INSTRUCTION" - |
 InfiniteLoopGM :               2F8 C |  InfiniteLoopGM.loop :          300 C |
 IoCtrl1 :                   A10009 - | *IoCtrl2 :                   A1000B - |
 IoData1 :                   A10003 - | *IoData2 :                   A10005 - |
*LISTON :                         3 - | *Line1010Emu :                2CE12 C |
 Line1010Emu.__align_flag :       0 - |  Line1010Emu.__lpos :             0 - |
 Line1010Emu.__pos :                                       FFFFFFFFFFFFFFFF - |
*Line1010Emu.__sp :               0 - |
*Line1010Emu.__str :                                   "LINE 1010 EMULATOR" - |
*Line1111Emu :                2CE32 C |  Line1111Emu.__align_flag :       0 - |
 Line1111Emu.__lpos :             0 - |
 Line1111Emu.__pos :                                       FFFFFFFFFFFFFFFF - |
*Line1111Emu.__sp :               0 - |
*Line1111Emu.__str :                                   "LINE 1111 EMULATOR" - |
*MACEXP :                         7 - |  MOMCPU :                     68008 - |
*MOMCPUNAME :               "68008" - | *MPCM_ST_PITCH_NOT_SET :         10 - |
*MPCM_ST_TOO_MANY_SAMPLES :       1 - | *MPCM_ST_UNKNOWN_SAMPLE_TYPE :    2 - |
*MPCM_ST_WAVE_BAD_AUDIO_FORMAT : 21 - | *MPCM_ST_WAVE_BAD_SAMPLE_RATE :  24 - |
*MPCM_ST_WAVE_INVALID_HEADER :   20 - |
*MPCM_ST_WAVE_MISSING_DATA_CHUNK :                                       25 - |
*MPCM_ST_WAVE_NOT_8BIT :         23 - | *MPCM_ST_WAVE_NOT_MONO :         22 - |
*MPCM_YM2612_A0 :            A04000 - | *MPCM_YM2612_A1 :            A04002 - |
*MPCM_YM2612_D0 :            A04001 - | *MPCM_YM2612_D1 :            A04003 - |
*MPCM_Z80_BUSREQ :           A11100 - | *MPCM_Z80_RAM :              A00000 - |
*MPCM_Z80_RESET :            A11200 - | *MegaPCM :                      662 - |
 MegaPCMLibraryBlob :           302 C | *MegaPCM_End :                 1FD8 - |
 MegaPCM_LoadDriver :           302 - |  MegaPCM_LoadSampleTable :      36C - |
*MegaPCM_PausePlayback :        56E - |  MegaPCM_PlaySample :           54C - |
*MegaPCM_SetPan :               61E - | *MegaPCM_SetSFXPan :            640 - |
*MegaPCM_SetSFXVolume :         5FC - | *MegaPCM_SetVolume :            5DA - |
*MegaPCM_StopPlayback :         5B6 - | *MegaPCM_UnpausePlayback :      592 - |
 MouseBuffer :     FFFFFFFFFFFF8000 C | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        0 - |
*PrivilegeViol :              2CDDC C |  PrivilegeViol.__align_flag :    80 - |
 PrivilegeViol.__lpos :           0 - |
 PrivilegeViol.__pos :                                     FFFFFFFFFFFFFFFF - |
*PrivilegeViol.__sp :             0 - |
*PrivilegeViol.__str :                                "PRIVILEGE VIOLATION" - |
 RAM_End :                        0 C |  RAM_Start :       FFFFFFFFFFFF0000 C |
*RELAXED :                        0 - |  ReadMouse :                    28A C |
 ReadMouse.Error :              2D6 C |  ReadMouse.GotIt :              2B8 C |
 ReadMouse.Loop :               2A4 C |  ReadMouse.Table :              2E6 C |
 ReadMouse.Wait :               2AA C |  SG_NoTMSS :                    216 C |
 SG_NoTMSS.SampleTableOk :      25E C |  SampleTable :                 1FD8 C |
 StackRAM :        FFFFFFFFFFFFFE00 C |  StartOfRom :                     0 C |
*TIME :                  "22:22:48" - | *TRUE :                           1 - |
*TYPE_DPCM :                    'D' - | *TYPE_DPCM_BASE_RATE :         50D3 - |
*TYPE_DPCM_MAX_RATE :          5078 - | *TYPE_NONE :                      0 - |
 TYPE_PCM :                     'P' - |  TYPE_PCM_BASE_RATE :          6278 - |
 TYPE_PCM_MAX_RATE :           620C - | *TYPE_PCM_TURBO :               'T' - |
*TYPE_PCM_TURBO_MAX_RATE :     7D00 - | *Trace :                      2CDFE C |
 Trace.__align_flag :            80 - |  Trace.__lpos :                   0 - |
 Trace.__pos :     FFFFFFFFFFFFFFFF - | *Trace.__sp :                     0 - |
*Trace.__str :              "TRACE" - | *TrapvInstr :                 2CDBC C |
 TrapvInstr.__align_flag :       80 - |  TrapvInstr.__lpos :              0 - |
 TrapvInstr.__pos :                                        FFFFFFFFFFFFFFFF - |
*TrapvInstr.__sp :                0 - |
*TrapvInstr.__str :                                     "TRAPV INSTRUCTION" - |
*VERSION :                     142F - |  V_Int :                        27C C |
*Z80SYNTAX :                      0 - | *Z_MPCM_ActiveSamplePitch :    1FDC - |
*Z_MPCM_COMMAND_PAUSE :           2 - | *Z_MPCM_COMMAND_STOP :            1 - |
*Z_MPCM_CalibrationApplied :   1FE3 - | *Z_MPCM_CalibrationScore_RAM : 1FE6 - |
*Z_MPCM_CalibrationScore_ROM : 1FE4 - | *Z_MPCM_CommandInput :         1FC2 - |
*Z_MPCM_DriverReady :          1FC3 - | *Z_MPCM_ERROR__BAD_INTERRUPT :    2 - |
*Z_MPCM_ERROR__BAD_SAMPLE_TYPE :  1 - | *Z_MPCM_ERROR__UNKNOWN_COMMAND : 80 - |
*Z_MPCM_LOOP_CALIBRATION :       80 - | *Z_MPCM_LOOP_DPCM :              20 - |
*Z_MPCM_LOOP_IDLE :               1 - | *Z_MPCM_LOOP_PAUSE :              2 - |
*Z_MPCM_LOOP_PCM :               10 - | *Z_MPCM_LOOP_PCM_TURBO :         18 - |
*Z_MPCM_LastErrorCode :        1FE8 - | *Z_MPCM_LoopId :               1FDD - |
*Z_MPCM_PanInput :             1FC6 - | *Z_MPCM_SFXPanInput :          1FC7 - |
*Z_MPCM_SFXVolumeInput :       1FC5 - | *Z_MPCM_SampleTable :          1976 - |
*Z_MPCM_VBlankActive :         1FE2 - | *Z_MPCM_VolumeInput :          1FC4 - |
*ZeroDivide :                 2CD84 C |  ZeroDivide.__align_flag :       80 - |
 ZeroDivide.__lpos :              0 - |
 ZeroDivide.__pos :                                        FFFFFFFFFFFFFFFF - |
*ZeroDivide.__sp :                0 - | *ZeroDivide.__str :   "ZERO DIVIDE" - |
*__global__Art1bpp_Font :     2D474 - |
*__global__Console_GetPosAsXY :                                       2DBC2 - |
*__global__Console_Init :     2DB0E - |
 __global__Console_InitShared :                                       2DB52 - |
 __global__Console_Reset :    2DB50 - |
*__global__Console_SetBasePattern :                                   2DC0C - |
*__global__Console_SetPosAsXY :                                       2DB94 - |
*__global__Console_SetPosAsXY_Stack :                                 2DB8E - |
*__global__Console_SetWidth : 2DC20 - |
*__global__Console_StartNewLine :                                     2DBE4 - |
 __global__Console_Write :    2DC3C - |
*__global__Console_WriteLine :                                        2DC38 - |
*__global__Console_WriteLine_Formatted :                              2DCE8 - |
*__global__Console_WriteLine_WithPattern :                            2DC36 - |
*__global__Console_Write_Formatted :                                  2DCEC - |
*__global__Decomp1bpp :       2DD1C - |  __global__ErrorHandler :     2D140 - |
*__global__ErrorHandler_ClearConsole :                                2CFC8 - |
 __global__ErrorHandler_ConsoleConfig_Initial :                       2D406 - |
 __global__ErrorHandler_ConsoleConfig_Shared :                        2D40A - |
*__global__ErrorHandler_ConsoleOnly :                                 2CFA2 - |
 __global__ErrorHandler_PagesController :                             2D09A - |
*__global__ErrorHandler_PauseConsole :                                2D064 - |
 __global__ErrorHandler_SetupVDP :                                    2D37C - |
*__global__ErrorHandler_VDPConfig :                                   2D3B4 - |
 __global__ErrorHandler_VDPConfig_Nametables :                        2D3CA - |
 __global__Error_DrawOffsetLocation :                                 2D2F2 - |
 __global__Error_DrawOffsetLocation2 :                                2D2F6 - |
 __global__Error_IdleLoop :   2D262 - |
 __global__Error_InitConsole :                                        2D27C - |
 __global__Error_MaskStackBoundaries :                                2D288 - |
 __global__FormatString :     2DA38 - | *__global__KDebug_FlushLine : 2D04C - |
*__global__KDebug_WriteLine_Formatted :                               2CFF2 - |
*__global__KDebug_Write_Formatted :                                   2CFF6 - |
*__global__VSync :            2D0FA - |  _eh_address_error :              1 - |
 _eh_align_offset :              80 - |  _eh_default :                    0 - |
*_eh_enter_console :             40 - |  _eh_return :                    20 - |
*_eh_show_sr_usp :                2 - | *bin :                           A0 - |
*byte :                           0 - | *cAqua :                        EE0 - |
*cBlack :                         0 - |  cBlue :                        E00 - |
 cGreen :                        E0 - | *cMagenta :                     E0E - |
 cRed :                           E - | *cWhite :                       EEE - |
*cYellow :                       EE - |  chimes :                     29228 C |
 chimes_End :                 2CD2D C | *cr :                            E6 - |
*dec :                           90 - | *endl :                          E0 - |
*forced :                         4 - | *hex :                           80 - |
*long :                           3 - |  mssound :                     1FFE C |
 mssound_End :                22878 C | *pal0 :                          E8 - |
*pal1 :                          EA - | *pal2 :                          EC - |
*pal3 :                          EE - | *psg_input :                 C00011 - |
 security_addr :             A14000 - | *setoff :                        F4 - |
*setpat :                        F8 - | *setw :                          F0 - |
*setx :                          FA - | *signed :                         8 - |
*split :                          8 - | *sram_port :                 A130F1 - |
*str :                           D0 - | *sym :                           B0 - |
*symdisp :                       C0 - |  tada :                       22878 C |
 tada_End :                   29228 C | *tracenum :                       0 - |
*vdp_control_port :          C00004 - | *vdp_counter :               C00008 - |
 vdp_data_port :             C00000 - | *vram_bg :                     E000 - |
*vram_fg :                     C000 - | *vram_hscroll :                FC00 - |
*vram_sprites :                F800 - | *weak :                           8 - |
*word :                           1 - | *ym2612_a0 :                 A04000 - |
*ym2612_a1 :                 A04002 - | *ym2612_d0 :                 A04001 - |
*ym2612_d1 :                 A04003 - |  z80_bus_request :           A11100 - |
*z80_expansion_control :     A1000C - | *z80_port_1_control :        A10008 - |
*z80_port_1_data :           A10002 - | *z80_port_2_control :        A1000A - |
*z80_ram :                   A00000 - | *z80_ram_end :               A02000 - |
 z80_reset :                 A11200 - |  z80_version :               A10001 - |

    314 symbols
    202 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 11/17/2024 22:22:48


  Defined Macros:
  ---------------

Console                               | KDebug                               
MPCM_ensureYMWriteReady               | MPCM_startZ80                        
MPCM_stopZ80                          | RaiseError                           
__ErrorMessage                        | __FSTRING_GenerateArgumentsCode      
__FSTRING_GenerateDecodedString       | __FSTRING_PushArgument               
align                                 | align0                               
assert                                | cnop                                 
cnop0                                 | dcSample                             
disable_ints                          | ds                                   
enable_ints                           | even                                 
incdac                                | org                                  
org0                                  | resetZ80                             
resetZ80a                             | startZ80                             
stopZ80                               | trace                                

     28 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 11/17/2024 22:22:48


  Defined Functions:
  ------------------

signextendB                           | signextend                           
signmask                              | bit                                  
notZ80                                |

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 11/17/2024 22:22:48


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.08 seconds assembly time

   1994 lines source file
   3987 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
